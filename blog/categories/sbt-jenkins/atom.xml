<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: SBT,Jenkins | Duff Qiu's Blog]]></title>
  <link href="http://duffqiu.github.io/blog/categories/sbt-jenkins/atom.xml" rel="self"/>
  <link href="http://duffqiu.github.io/"/>
  <updated>2015-02-23T16:41:47+08:00</updated>
  <id>http://duffqiu.github.io/</id>
  <author>
    <name><![CDATA[Duff Qiu]]></name>
    <email><![CDATA[duffqiu@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[集成SBT到Jenkins中]]></title>
    <link href="http://duffqiu.github.io/blog/2015/02/23/integrate-sbt-project-jenkins/"/>
    <updated>2015-02-23T14:56:24+08:00</updated>
    <id>http://duffqiu.github.io/blog/2015/02/23/integrate-sbt-project-jenkins</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<hr />

<p>之前有些过关于Jenkins上搭建maven工程<a href="/blog/2014/02/06/yong-jenkinsda-jian-ji-yu-githubhe-junitde-zi-dong-hua-ce-shi/">1</a>，但是对于Scala的工程最好还是用SBT，那么如何在Jenkins用SBT呢？</p>

<h3 id="section-1">解决办法</h3>
<hr />

<p>Jenkins已经提供了SBT的插件，类似Maven的插件</p>

<p>具体步骤如下：</p>

<ul>
  <li>在Jenkins上的系统管理-&gt;管理Jenkins-&gt;管理插件中选择可选插件，然后输入sbt过滤条件</li>
  <li>选择安装sbt plugin</li>
  <li>重启Jenkins</li>
  <li>配置sbt：系统管理-&gt;系统设置，设置”sbt lauch jars”，注意这里是指具体的jar文件，不是配置路径。如<code>/opt/local/share/sbt/sbt-launch.jar</code>  </li>
  <li>新建项目（因为不像Maven有特定的选项），所以选择”构建一个自由风格的软件项目”  </li>
  <li>然后在构建步骤中选择”Build using SBT”，然后配置对应的参数。这里需要注意的是JVM Flags，如果不配置很可能PerGem不够造成OutofMemoryError。但是该配置什么呢？如果不是太清楚，则可以直接拷贝sbt的启动脚本中的JVM Flags参数，如我机器的：<code>-XX:+CMSClassUnloadingEnabled -Xms1536m -Xmx1536m -XX:MaxPermSize=384m -XX:ReservedCodeCacheSize=192m -Dfile.encoding=UTF8</code></li>
  <li>如果Git repo下是涵盖了多个项目，则可以制定sub-directory path来运行特定个项目</li>
</ul>

<h3 id="section-2">小插曲</h3>

<h4 id="linuxunix">Linux/Unix下跟踪或查看文件的命令</h4>

<ol>
  <li>输入文件到console: <code>cat &lt;filename&gt;</code></li>
  <li>逐行显示文件: <code>less &lt;filename&gt;</code></li>
  <li>显示文件最后的一屏: <code>tail &lt;filename&gt;</code></li>
  <li>如果需要跟踪文件的变化则: <code>tail -f &lt;filename&gt;</code></li>
</ol>

<h4 id="git">Git清理工作空间</h4>

<p>如果在某个Repo中，你不小心加入了很多没用的文件和文件目录（或者是因为没有checkout到真确的branch就做了pull操作），则你期望一次性清理掉这些文件，可以用以下命令
不过需要注意的是这个操作不可逆的，可以通过增加<code>-n</code>参数来预览一下将会有什么变化</p>

<p><code>sh
git clean -fdx
</code></p>

]]></content>
  </entry>
  
</feed>
