<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Block Storage | Duff Qiu's Blog]]></title>
  <link href="http://duffqiu.github.io/blog/categories/block-storage/atom.xml" rel="self"/>
  <link href="http://duffqiu.github.io/"/>
  <updated>2015-10-26T09:52:58+08:00</updated>
  <id>http://duffqiu.github.io/</id>
  <author>
    <name><![CDATA[Duff Qiu]]></name>
    <email><![CDATA[duffqiu@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Openstack如何更好的使用block Service作为磁盘使用]]></title>
    <link href="http://duffqiu.github.io/blog/2015/07/05/openstack-blockservice/"/>
    <updated>2015-07-05T17:15:59+08:00</updated>
    <id>http://duffqiu.github.io/blog/2015/07/05/openstack-blockservice</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<hr />
<p>在使用Openstack过程中，VM总是要运行某些程序，而这些程序的数据是记录在磁盘中的。如何保证在VM被删除或者重建后这些数据依然能够存在呢？这就要用到Openstack的Block Service了。但是这里面有几个问题：</p>

<ul>
  <li>block service创建出来的卷是是个无文件格式的盘，无法被直接读写</li>
  <li>通常我们希望在给一个VM初始化时挂在一个盘时，这个盘已经包含了某些必须的文件内容 </li>
</ul>

<h3 id="section-1">解决办法</h3>
<hr />

<p>思路是做出一个带有文件格式已经需要的文件内容／数据的block service的image，这样就不用去格式化这个卷，同时也包含所需的内容，具体方法如下：</p>

<ul>
  <li>创建一个本地image，指定大小。 <code>dd if=/dev/null of=example.img bs=1M seek=1024</code>。这里创建了一个1G大小的镜像文件example.img，对于不同的使用目的，这里的bs需要调优</li>
  <li>格式化成ext4。 <code>mkfs.ext4 -F example.img</code></li>
  <li>创建本地的挂载目录 <code>mkdir &lt;path&gt;</code></li>
  <li>挂载这个image到指定的目录 <code>mount -t ext4 -o loop example.img &lt;path&gt;</code></li>
  <li>将需要的资料放入到这个目录中</li>
  <li>卸载该image <code>umount &lt;path&gt;</code></li>
  <li>将image转成qcow2格式 <code>qemu-img convert -f raw -O qcow2 example.img example.qcow2</code></li>
  <li>上传到openstack</li>
</ul>

<p><code>
glance image-create --name &lt;image name&gt; \
--container-format bare \
--disk-format qcow2 \
--file exmaple.qcow2 \
--is-public True
</code></p>

<ul>
  <li>创建block storage的卷</li>
</ul>

<p><code>
cinder create --image-id &lt;image uuid&gt; --display-name &lt;disk name&gt; &lt;size x G&gt;
</code>
- 创建完成就可以将其挂载到VM中使用了
- 可以在创建VM时在nova命令中生成这个卷</p>

<h4 id="openstack-tips">Openstack tips</h4>

<ul>
  <li><code>vgdisplay</code>获取openstack的磁盘空间信息</li>
</ul>

<h4 id="bash-tips">Bash tips</h4>

<ul>
  <li><code>echo $?</code> 获取最近命令的status code</li>
</ul>

]]></content>
  </entry>
  
</feed>
