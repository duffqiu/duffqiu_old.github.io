<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Octopress | Duff Qiu's Blog]]></title>
  <link href="http://duffqiu.github.io/blog/categories/octopress/atom.xml" rel="self"/>
  <link href="http://duffqiu.github.io/"/>
  <updated>2014-02-07T21:17:11+08:00</updated>
  <id>http://duffqiu.github.io/</id>
  <author>
    <name><![CDATA[Duff Qiu]]></name>
    <email><![CDATA[duffqiu@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Octopress动态展示图片]]></title>
    <link href="http://duffqiu.github.io/blog/2014/02/07/octopressdong-tai-zhan-shi-tu-pian/"/>
    <updated>2014-02-07T20:39:21+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/02/07/octopressdong-tai-zhan-shi-tu-pian</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<p>在Octopress中如果展示图片太大，这回占用屏幕很大的篇幅，最好的办法是先隐藏起来，需要的时候点击展开 </p>

<h3 id="section-1">解决办法</h3>
<p>利用div的display的设置的方式实现</p>

<p>具体的实现方式是  </p>

<ol>
  <li>增加两个javascript的方法，一个展示图片，一个隐藏图片，简单的方式可以直接将他们放入到source/javascripts/octopress.js文件的最开头  </li>
</ol>

<p>{% codeblock lang:Javascript %}   </p>

<p>function showdiv(elemid){</p>

<p>var fd = document.getElementById(elemid);
fd.style.left = event.clientX;
fd.style.top = event.clientY;
fd.style.display = “inline”;</p>

<p>}</p>

<p>function hidediv(elemid){</p>

<p>document.getElementById(elemid).style.display = “none”;</p>

<p>}	</p>

<p>{% endcodeblock %}</p>

<ol>
  <li>在blog中增加使用图片的div的代码</li>
</ol>

<p>{% codeblock lang:sh %}</p>

<div style="text-decoration:underline; font-size: 24px; color: red" onclick="showdiv('pic')"> Picture Show Text </div>

<div style="display:none" class="prev" id="pic" onclick="hidediv('pic')">

<img src="xxx.png" title="点击关闭" />

</div>

<p>{% endcodeblock %}</p>

<p>效果是点击图片文字展开图片，点击图片后隐藏。        </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress实时获取并展示github上其它repository的代码v2]]></title>
    <link href="http://duffqiu.github.io/blog/2014/02/07/octopressshi-shi-huo-qu-bing-zhan-shi-githubshang-qi-ta-repositoryde-dai-ma-v2/"/>
    <updated>2014-02-07T17:02:16+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/02/07/octopressshi-shi-huo-qu-bing-zhan-shi-githubshang-qi-ta-repositoryde-dai-ma-v2</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<p>之前做了个Octopress实时获取并展示github上其它repository的代码的rake任务，参见<a href="{% post_url 2014-02-05-octopressshi-shi-huo-qu-bing-zhan-shi-githubshang-qi-ta-repositoryde-dai-ma %}">1</a>，但是每次都要打开github来获取文件的连接，还是比较烦。如果需要更改github branch的名字就需要重新更改整个链接。</p>

<h3 id="section-1">解决方案</h3>
<p>github上的代码存放实际上是有规则的。格式如下“https://raw.github.com/&lt;your github account&gt;/&lt;repository name&gt;/&lt;branch name&gt;/&lt;file folder&gt;/&lt;java package name&gt;/&lt;file name&gt;”</p>

<p>根据这个规则，可以将https://raw.github.com/，&lt;your github account&gt;固定在Rakefile的变量中<br />
将&lt;repository name&gt;，&lt;branch name&gt;，&lt;file folder&gt;，&lt;java package name&gt;，&lt;file name&gt;配置到文件中  </p>

<p>这样的话后面如果需要更改分支名就不用先去查找github上的raw文件url了<br />
注意，如果用了<a href="http://nvie.com/posts/a-successful-git-branching-model/">git flow</a>，则分支名可能是feature/&lt;branch name&gt;</p>

<div style="text-decoration:underline; font-size: 24px; color: red" onclick="showdiv('gitflow')"> Git flow Picture </div>

<div style="display:none" class="prev" id="gitflow" onclick="hidediv('gitflow')">
  <img src="http://nvie.com/img/2009/12/Screen-shot-2009-12-24-at-11.32.03.png" title="点击关闭" />
</div>

<h3 id="section-2">代码实现</h3>

<p>首先增加变量配置到Rakefile中</p>

<pre><code># github code fetch config
github_code_url = "https://raw.github.com/"
github_account  = "duffqiu"
</code></pre>

<p>为了保留原由的实现，则在Rakefile上增加一个新的任务，起名为github_fetch，对应使用的配置文件为githubfetch.cf，示例如下：  </p>

<pre><code>DesignPatternDemo develop src/main/java org.duffqiu.patterndemo       LazySingleton.java

DesignPatternDemo develop src/test/java org.duffqiu.patterndemotest   LazySingletonTest.java

DesignPatternDemo develop src/main/java org.duffqiu.patterndemo       SerialibleSingleton.java

DesignPatternDemo develop src/test/java org.duffqiu.patterndemotest   SerialibleSingletonTest.java

DesignPatternDemo develop src/main/java org.duffqiu.patterndemo       EnumSingleton.java

DesignPatternDemo develop src/test/java org.duffqiu.patterndemotest   EnumSingletonTest.java
</code></pre>

<p>Rake中的任务代码为：</p>

<pre><code>desc "fetch source code file from github"
task :github_fetch do

  begin
    rm_rf "source/downloads"
    mkdir_p "source/downloads/code"
    if File.exist?("github_fetch.cf")
      IO.foreach("github_fetch.cf") do |line|
        if line.strip.empty? == false
            cd "source/downloads/code" do
            attr = line.split(' ')
            repo = attr[0].strip
            if repo.empty?
              abort("repo name is empty")
            end
            branch = attr[1].strip
            if branch.empty?
              abort("branch name is empty")
            end
            src_fold = attr[2].strip
            if src_fold.empty?
              abort("src fold is empty")
            end
            package = attr[3].strip
            if package.empty?
              abort("package name is empty")
            end
            file_name = attr[4].strip
            if file_name.empty?
              abort("file name is empty")
            end
            package_dir = package.gsub(/\./, '/')
            target_dir = repo + '/' + package_dir
            mkdir_p target_dir
            cd target_dir do
              system ("wget  " + "#{github_code_url}/#{github_account}/#{repo}/#{branch}/#{src_fold}/#{package_dir}/#{file_name}")
            end
          end
        end
      end
    else
      puts 'github_fetch.cf not found'
    end
  end
end    
</code></pre>

<h4 id="vi">Vi小提示</h4>

<ol>
  <li>Copy单前行到文件结尾：“yG”</li>
  <li>Delete单前行到文件结尾：“dG”</li>
  <li>回复上一次的操纵：“u”</li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress实时获取并展示github上其它repository的代码]]></title>
    <link href="http://duffqiu.github.io/blog/2014/02/05/octopressshi-shi-huo-qu-bing-zhan-shi-githubshang-qi-ta-repositoryde-dai-ma/"/>
    <updated>2014-02-05T01:45:57+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/02/05/octopressshi-shi-huo-qu-bing-zhan-shi-githubshang-qi-ta-repositoryde-dai-ma</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<p>在写blog的时候，想要直接关联github上的其它repository的代码，这样以后代码更新就不需要更新blog了。但是看octopress的文档，似乎<a href="https://gist.github.com">gist</a>可以达到该目的，但是它不是一个代码工程，无法像正常的代码工程那样去管理，编译，运行等。<br />
所以就想看看能否给Octopress加个plugin直接展示该代码</p>

<h3 id="section-1">办法</h3>
<p>原本想改一下plugins/include_code.rb，但是感觉还是太复杂，所以想个简单的方式
还是利用include_code这个插件，这个插件是可以将在source/downloads/code/目录下的文件展示出来的，这个目录原octopress代码没有生成，需要手工生成。<br />
思路就是想法将github上的代码在rake generate之前先用wget获取下来放到上面这个指定的目录中<br />
因为include_code.rb的复杂度，我选择了更改Rakefile文件，新增一个任务的方式来解决
具体步骤如下：</p>

<ol>
  <li>
    <p>在octopress目录下新增一个需要下载的文件的配置githubcode.cf，格式为<github repository="" name="">空格<java package="" name="">空格<java code="" file="" url="">。java的包名可以保留'.'的格式，这个插件会自动转成目录</java></java></github></p>

    <pre><code>DesignPatternDemo  org.duffqiu.patterndemo  https://raw.github.com/duffqiu/DesignPatternDemo/feature/LazySingletonDemo/src/org/duffqiu/patterndemo/LazySingleton.java
</code></pre>
  </li>
  <li>
    <p>确保已经安装好wget</p>

    <pre><code>sudo port install wget
</code></pre>
  </li>
  <li>
    <p>更改Rakefile文件，在最后增加一个任务</p>

    <pre><code> desc "get code file from github"
 task :github_code do
	
   begin
     require 'net/http'
     require 'uri'
     rm_rf "source/downloads"
     mkdir_p "source/downloads/code"
     if File.exist?("githubcode.cf")
       IO.foreach("githubcode.cf") do |line|
         if line.strip.empty? == false
             cd "source/downloads/code" do
             attr = line.split(' ')
             repo = attr[0].strip
             if repo.empty?
               abort("repo name is empty")
             end
             package = attr[1].strip
             file_url = attr[2].strip
             if file_url.empty?
               abort("file url is empty")
             end
             package_dir = package.gsub(/\./, '/')
             target_dir = repo + '/' + package_dir
             mkdir_p target_dir
             cd target_dir do
               system ("wget  " + file_url)
             end
           end
         end
       end
     else
       puts 'githubcode.cf not found'
     end
   end
 end        		
</code></pre>
  </li>
  <li>
    <p>在需要引用代码的地方使用以下方式</p>

    <pre><code>{% raw %}
   
{% include_code lang:java &lt;repository name&gt;/&lt;package name&gt;/&lt;java file name&gt; %}
   
{% endraw %}
</code></pre>

    <p>注意：<repository name="">前面没有'/'，<pakcage name="">要将java的包名的'.'改为'/'</pakcage></repository></p>
  </li>
  <li>
    <p>每次有新增的github代码文件引入，则需要在rake generate前先调用</p>

    <pre><code>rake github_code
</code></pre>
  </li>
</ol>

<h3 id="section-2">小插曲</h3>
<p>####wget https访问问题</p>

<p>使用wget访问github的时候，因为github使用https，则会出现说github的“证书不可信”和“证书颁发者未知”的问题。
解决方式为</p>

<ol>
  <li>使用–no-check-certificate参数访问github，但是还是用warning，不够完美</li>
  <li>
    <p>决解证书问题  </p>

    <ul>
      <li>
        <p>安装curl-ca-bundle</p>

        <pre><code> sudo port install curl-ca-bundle
</code></pre>
      </li>
      <li>
        <p>配置wget</p>

        <pre><code> echo CA_CERTIFICATE=/opt/local/share/curl/curl-ca-bundle.crt &gt;&gt; ~/.wgetrc
</code></pre>
      </li>
    </ul>
  </li>
</ol>

<p>然后再运行wget就不会有问题了</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress添加bing网站分析]]></title>
    <link href="http://duffqiu.github.io/blog/2014/02/02/octopresstian-jia-bingwang-zhan-fen-xi/"/>
    <updated>2014-02-02T11:30:01+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/02/02/octopresstian-jia-bingwang-zhan-fen-xi</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<p>Google提供了相应的Analytics网站分析工具，同样Bing也提供了类似的工具：<a href="http://www.bing.com/toolbox/webmaster/" title="官网">Bing网站管理员</a>，同样可以给你的Octopress很快速的添加该分析工具</p>

<h3 id="section-1">配置</h3>

<ol>
  <li>在Bing网站管理员注册，并填写必要的信息</li>
  <li>添加一个新网站，填写相应的信息</li>
  <li>
    <p>根据认证所有权网页配置Octopress，具体如下</p>

    <ul>
      <li>下载你的BingSiteAuth.xml到octopres的source目录下</li>
      <li>
        <p>配置_config_yml文件，设置bing analytics开关，在文件最后加入，如果以后不用bing analytics，则可以将开关设置为false就可以，不用到处改文件</p>

        <pre><code># Bing Analytics  
bing_analytics: true
</code></pre>
      </li>
      <li>
        <p>修改octopres/source/_include目录下的head.html文件，在&lt;head&gt;下面增加以下内容，记得替换&lt;…&gt;bing给你的blog的标识</p>

        <pre><code>{% raw %}
     
{% if site.bing_analytics %}
&lt;meta name="msvalidate.01" content="&lt;...&gt;" /&gt;
{% endif %}
     
{% endraw %}
</code></pre>
      </li>
      <li>
        <p>然后重新生成并部署就可以了      </p>

        <pre><code>&gt;rake generate
&gt;rake deploy
</code></pre>
      </li>
    </ul>
  </li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[加速Octopress的装载]]></title>
    <link href="http://duffqiu.github.io/blog/2014/02/01/jia-su-octopressde-zhuang-zai/"/>
    <updated>2014-02-01T14:23:15+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/02/01/jia-su-octopressde-zhuang-zai</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<p>加速网页的存取有多种方式，其中之一就是减少一个页面的http的请求数量，因为浏览器同时发送http请求的数量是有限的，而对于很多页面而言，通常定义了很多css和js文件的链接，这样就会造成浏览器需要多次请求后才能完整的展示页面，所以最好的方式将多个css和js文件合并，如果需要还可以将合并后的文件压缩再传输，从而达到加速的目的。</p>

<h3 id="gem">Gem插件安装</h3>
<p>Octopress的<a href="https://github.com/matthodan/jekyll-asset-pipeline">jekyll-asset-pipeline</a>就是一个这样机制的开源插件<br />
简单的可以通过以下命令安装</p>

<pre><code>&gt;sudo gem install jekyll-asset-pipeline
</code></pre>

<p><strong>注意：</strong> 有可能安装完成后，需要更新bundle，这行命令</p>

<pre><code>&gt;sudo bunlde update  
</code></pre>

<p>压缩需要用到插件YUI Compressor，可以简单通过以下命令安装</p>

<pre><code>&gt;sudo gem install yui-compressor
</code></pre>

<p>另外一个选择是使用Google的<a href="https://developers.google.com/closure/?hl=zh-cn">Closure</a>，可以通过简单通过以下命令安装</p>

<pre><code>&gt;sudo gem install Closure          
</code></pre>

<h3 id="octopress">配置Octopress</h3>
<ol>
  <li>
    <p>配置octopress目录下的Gemfile文件，在:development中，增加以下两行</p>

    <pre><code>gem "jekyll-asset-pipeline"
gem "yui-compressor
</code></pre>
  </li>
  <li>
    <p>在 Octopress的plugins目录中，创建一个名为“jekyll_asset_pipeline.rb”的文件，内容如下：可以用注释那行代替上面那行就是使用Google的closure来压缩js文件</p>

    <pre><code> require 'jekyll_asset_pipeline'

 module JekyllAssetPipeline
	
   class CssCompressor &lt; JekyllAssetPipeline::Compressor
     require 'yui/compressor'
	
     def self.filetype
       '.css'
     end
	
     def compress
       return YUI::CssCompressor.new.compress(@content)
     end
   end
	
   class JavaScriptCompressor &lt; JekyllAssetPipeline::Compressor
     require 'yui/compressor'
     #require 'closure-compiler'
	
     def self.filetype
       '.js'
     end
	
     def compress
       return YUI::JavaScriptCompressor.new(munge: true).compress(@content)
       #return Closure::Compiler.new.compile(@content)
     end
   end
	
 end
</code></pre>
  </li>
  <li>
    <p>修改Octopress的配置文件_config.yml，在文件最后增加以下配置</p>

    <pre><code>asset_pipeline:
   bundle: true            # Default = true
   compress: true          # Default = true
   #output_path: assets     # Default = assets
   #display_path: nil       # Default = nil
   gzip: false             # Default = false
</code></pre>
  </li>
  <li>
    <p>修改相应的html文件，激活js/css文件的合并压缩。不同的Octopress的template，对应的文件或有不同，我这里用的是Octopress默认的官方template，因该适合大多数人</p>

    <ul>
      <li>
        <p>修改source/_include目录下的head.html文件，注释掉带有js/css的几行</p>

        <pre><code>{% raw %}
     
 &lt;!-- &lt;link href="{{ root_url }}/stylesheets/screen.css" media="screen, projection" rel="stylesheet" type="text/css"&gt; --&gt;
	 
 &lt;!-- &lt;script src="{{ root_url }}/javascripts/modernizr-2.0.js"&gt;&lt;/script&gt; --&gt;
 &lt;!-- &lt;script src="http://duffqiu.github.io//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"&gt;&lt;/script&gt; --&gt;
 &lt;!-- &lt;script&gt;!window.jQuery &amp;&amp; document.write(unescape('%3Cscript src="./javascripts/libs/jquery.min.js"%3E%3C/script%3E'))&lt;/script&gt; --&gt;
 &lt;!-- &lt;script src="{{ root_url }}/javascripts/octopress.js" type="text/javascript"&gt;&lt;/script&gt; --&gt;
	  
{% endraw %}
</code></pre>
      </li>
      <li>
        <p>增加以下内容</p>

        <pre><code>{% raw %}
   
{% css_asset_tag global %}
 - /stylesheets/screen.css
{% endcss_asset_tag %}
	
{% javascript_asset_tag global %}
- /javascripts/octopress.js
- /javascripts/modernizr-2.0.js
- /javascripts/libs/jquery.min.js
- /javascripts/libs/swfobject-dynamic.js
- /javascripts/libs/jXHR.js
{% endjavascript_asset_tag %}
   
{% endraw %}
</code></pre>
      </li>
      <li>
        <p>同理修改source/_includes/custom目录下的head.html文件，注释掉里面的内容，增加上面的内容就可   </p>
      </li>
    </ul>
  </li>
  <li>
    <p>到底有多css和js文件需要加入到需要增加的内容中呢？在octopress/source目录中搜索一下</p>

    <pre><code>find . -name '*.css'
find . -name '*.js'
</code></pre>

    <p>然后将必要的文件加入到上面的文件列表中</p>
  </li>
</ol>

<h3 id="vi">Vi小提示</h3>

<ol>
  <li>跳到文件头用 “:0”</li>
  <li>跳到行头在非编辑状态下直接收入”0”</li>
  <li>跳到行尾在非编辑状态下直接收入”$”      </li>
</ol>

]]></content>
  </entry>
  
</feed>
