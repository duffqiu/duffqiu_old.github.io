<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Octopress | Duff Qiu's Blog]]></title>
  <link href="http://duffqiu.github.io/blog/categories/octopress/atom.xml" rel="self"/>
  <link href="http://duffqiu.github.io/"/>
  <updated>2014-03-03T22:55:33+08:00</updated>
  <id>http://duffqiu.github.io/</id>
  <author>
    <name><![CDATA[Duff Qiu]]></name>
    <email><![CDATA[duffqiu@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Octopress中使用plantuml]]></title>
    <link href="http://duffqiu.github.io/blog/2014/02/12/octopresszhong-shi-yong-plantuml/"/>
    <updated>2014-02-12T22:36:09+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/02/12/octopresszhong-shi-yong-plantuml</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<hr />
<p>一直想便利的在Octopress使用UML，之前没有太好的办法，只能在astah画好后存为图片文件，然后再用链接的方式使用</p>

<h3 id="section-1">解决办法</h3>
<hr />
<p>现在经Leo同学推荐，使用文本的UML语言的方式可以写出UML图，他就是<a href="http://plantuml.sourceforge.net">Plant UML</a>，同时在github上有个octopress的插件可以直接支持在Markdown中使用Plant UML，它是<a href="https://github.com/yjpark/jekyll-plantuml">jekyll-plantuml</a></p>

<h4 id="section-2">安装办法</h4>
<ol>
  <li>在octopress上建一个<code>_lib</code>的目录</li>
  <li>下载<a href="http://plantuml.sourceforge.net/download.html">plantuml.jar</a>到上面建的<code>_lib</code>的目录</li>
  <li>下载<a href="https://github.com/yjpark/jekyll-plantuml/raw/master/plantuml.rb">plantuml.rb</a>插件到<code>plugin</code>目录</li>
  <li>
    <p>修改<code>_config.yml</code>文件，增加platuml的配置如下</p>

    <pre><code># PlantUML
plantuml_jar: _lib/plantuml.jar
plantuml_background_color: "#f8f8f8"
</code></pre>
  </li>
  <li>然后用</li>
</ol>

<p><code>sh
<center><img src='/images/plantuml/f3f38d1d042bc259f06614d2fdeb7237.png'></center>
</code></p>

<p>括上platuml的代码就可以了，下面是一个简单的示例</p>

<p>源码如下：</p>

<p><code>sh  
<center><img src='/images/plantuml/701d88046b71f1849b1c4c67dd74ed25.png'></center>
</code></p>

<p>图片展示如下： </p>

<p><center><img src='/images/plantuml/4b8dd507ddcb69d1776592ee5d1f6ab6.png'></center></p>

<p>类的表示方式如下：</p>

<p><center><img src='/images/plantuml/22b7fb4839fbcdfac523806c58c514ca.png'></center></p>

<h3 id="section-3">小插曲</h3>
<p>默认情况下，plantuml只能支持sequence图的生成，如果要生成其它图，则需要用到Graphiz。<br />
在Mac上用<code>port</code>命令安装Graphiz，安装完成后<code>dot</code>命令是安装到了<code>/opt/local/bin/dot</code>目录下，而plantuml默认是要用<code>/usr/bin/dot</code>，这样plantuml.rb的plugin还是无法生成其它类型的图，但是platuml.jar是支持指定dot的路径的，所以手工改造一下plantuml.rb，具体方式如下：</p>

<ol>
  <li>
    <p>在<code>_config.yml</code>文件中增加一个plantuml的配置项并设定dot的路径：<code>lantuml_dotpath: /opt/local/bin/dot</code></p>
  </li>
  <li>
    <p>在plantuml.rb文件中的<code>filename = Digest::MD5.hexdigest(code) + ".png"</code>语句上面增加dot的配置的读取</p>
  </li>
</ol>

<p><code>ruby
      dotpath = site.config['plantuml_dotpath']
      puts "using dot at: " + dotpath + "\n"
      if File.exist?(dotpath)
        puts "PlantUML set dot path:" + dotpath + "\n"
        dotcmd = " -graphvizdot " + dotpath
      else
        dotcmd = ""
      end
</code></p>

<p>然后修改<code>cmd = "java -jar " + plantuml_jar + " -pipe &gt; " + filepath</code>在最后增加<code> + dotcmd</code>，完整如下 </p>

<p><code>ruby
cmd = "java -jar " + plantuml_jar + " -pipe &gt; " + filepath + dotcmd
</code></p>

<p>因为之前发生过错误，所以需要手工清除<code>octopress/public/images/plantuml/</code>这个目录</p>

<p>这个我的第一个github pull request，纪念一下</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress使用页面标签]]></title>
    <link href="http://duffqiu.github.io/blog/2014/02/09/octopressshi-yong-ye-mian-biao-qian/"/>
    <updated>2014-02-09T21:57:59+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/02/09/octopressshi-yong-ye-mian-biao-qian</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<hr />
<p>当一篇blog太长的时候，总是希望有个按钮能回到某个章节上，或者是文件的开头</p>

<h3 id="section-1">解决办法</h3>
<hr />
<p>因为Markdown语法没有提供这个支持，只用用Div的方式来支持了，具体方式如下</p>

<ul>
  <li>
    <p>定义标签</p>

    <p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>
</span><span class='line'> &lt;a <span class="nv">name</span><span class="o">=</span><span class="s2">&quot;标签名&quot;</span>&gt;&lt;/a&gt;&lt;br /&gt;
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
  </li>
  <li>
    <p>定义跳转链接</p>

    <p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;br /&gt;
</span><span class='line'> &amp;lt;div <span class="nv">style</span><span class="o">=</span><span class="s2">&quot;text-decoration:underline; font-size: 16px; color: red&quot;</span> <span class="nv">onclick</span><span class="o">=</span><span class="s2">&quot;self.location.href=&#39;#标签名&#39;&quot;</span>&amp;gt;跳转&amp;lt;/div&amp;gt;
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
  </li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress动态展示图片]]></title>
    <link href="http://duffqiu.github.io/blog/2014/02/07/octopressdong-tai-zhan-shi-tu-pian/"/>
    <updated>2014-02-07T20:39:21+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/02/07/octopressdong-tai-zhan-shi-tu-pian</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<p>在Octopress中如果展示图片太大，这回占用屏幕很大的篇幅，最好的办法是先隐藏起来，需要的时候点击展开 </p>

<h3 id="section-1">解决办法</h3>
<p>利用div的display的设置的方式实现</p>

<p>具体的实现方式是  </p>

<ul>
  <li>增加两个javascript的方法，一个展示图片，一个隐藏图片，简单的方式可以直接将他们放入到source/javascripts/octopress.js文件的最开头  </li>
</ul>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>   <span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">function</span> <span class="nx">showdiv</span><span class="p">(</span><span class="nx">elemid</span><span class="p">){</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">fd</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="nx">elemid</span><span class="p">);</span>
</span><span class='line'><span class="nx">fd</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">left</span> <span class="o">=</span> <span class="nx">event</span><span class="p">.</span><span class="nx">clientX</span><span class="p">;</span>
</span><span class='line'><span class="nx">fd</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">top</span> <span class="o">=</span> <span class="nx">event</span><span class="p">.</span><span class="nx">clientY</span><span class="p">;</span>
</span><span class='line'><span class="nx">fd</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">display</span> <span class="o">=</span> <span class="err">“</span><span class="nx">inline</span><span class="err">”</span><span class="p">;</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">function</span> <span class="nx">hidediv</span><span class="p">(</span><span class="nx">elemid</span><span class="p">){</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="nx">elemid</span><span class="p">).</span><span class="nx">style</span><span class="p">.</span><span class="nx">display</span> <span class="o">=</span> <span class="err">“</span><span class="nx">none</span><span class="err">”</span><span class="p">;</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>	<span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
  <li>在blog中增加使用图片的div的代码</li>
</ul>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;div <span class="nv">style</span><span class="o">=</span><span class="s2">&quot;text-decoration:underline; font-size: 24px; color: red&quot;</span> <span class="nv">onclick</span><span class="o">=</span><span class="s2">&quot;showdiv(&#39;pic&#39;)&quot;</span>&gt; Picture Show Text &lt;/div&gt;
</span><span class='line'>
</span><span class='line'>&lt;div <span class="nv">style</span><span class="o">=</span><span class="s2">&quot;display:none&quot;</span> <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;prev&quot;</span> <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;pic&quot;</span> <span class="nv">onclick</span><span class="o">=</span><span class="s2">&quot;hidediv(&#39;pic&#39;)&quot;</span>&gt;
</span><span class='line'>
</span><span class='line'>&lt;img <span class="nv">src</span><span class="o">=</span><span class="s2">&quot;xxx.png&quot;</span> <span class="nv">title</span><span class="o">=</span><span class="s2">&quot;点击关闭&quot;</span> /&gt;
</span><span class='line'>
</span><span class='line'>&lt;/div&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>效果是点击图片文字展开图片，点击图片后隐藏。     </p>

<h3 id="section-2">小插曲</h3>
<p>整个2014春节假期就要过去了，回顾一下，整整写了24篇blog，有不少是跑题写出来。很多题目只是开了个头，也期待自己后面继续努力！   </p>

<p>在octopress的source/_post目录里用命令，实际就是将ls输出用wc工具再统计</p>

<pre><code>&gt;ls |wc -l
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress实时获取并展示github上其它repository的代码v2]]></title>
    <link href="http://duffqiu.github.io/blog/2014/02/07/octopressshi-shi-huo-qu-bing-zhan-shi-githubshang-qi-ta-repositoryde-dai-ma-v2/"/>
    <updated>2014-02-07T17:02:16+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/02/07/octopressshi-shi-huo-qu-bing-zhan-shi-githubshang-qi-ta-repositoryde-dai-ma-v2</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<p>之前做了个Octopress实时获取并展示github上其它repository的代码的rake任务，参见<a href="/blog/2014/02/05/octopressshi-shi-huo-qu-bing-zhan-shi-githubshang-qi-ta-repositoryde-dai-ma/">1</a>，但是每次都要打开github来获取文件的连接，还是比较烦。如果需要更改github branch的名字就需要重新更改整个链接。</p>

<h3 id="section-1">解决方案</h3>
<p>github上的代码存放实际上是有规则的。格式如下“https://raw.github.com/&lt;your github account&gt;/&lt;repository name&gt;/&lt;branch name&gt;/&lt;file folder&gt;/&lt;java package name&gt;/&lt;file name&gt;”</p>

<p>根据这个规则，可以将https://raw.github.com/，&lt;your github account&gt;固定在Rakefile的变量中<br />
将&lt;repository name&gt;，&lt;branch name&gt;，&lt;file folder&gt;，&lt;java package name&gt;，&lt;file name&gt;配置到文件中  </p>

<p>这样的话后面如果需要更改分支名就不用先去查找github上的raw文件url了<br />
注意，如果用了<a href="http://nvie.com/posts/a-successful-git-branching-model/">git flow</a>，则分支名可能是feature/&lt;branch name&gt;</p>

<div style="text-decoration:underline; font-size: 24px; color: red" onclick="showdiv('gitflow')"> Git flow Picture </div>

<div style="display:none" class="prev" id="gitflow" onclick="hidediv('gitflow')">
  <img src="http://nvie.com/img/2009/12/Screen-shot-2009-12-24-at-11.32.03.png" title="点击关闭" />
</div>

<h3 id="section-2">代码实现</h3>

<p>首先增加变量配置到Rakefile中</p>

<pre><code># github code fetch config
github_code_url = "https://raw.github.com/"
github_account  = "duffqiu"
</code></pre>

<p>为了保留原由的实现，则在Rakefile上增加一个新的任务，起名为github_fetch，对应使用的配置文件为githubfetch.cf，示例如下：  </p>

<pre><code>DesignPatternDemo develop src/main/java org.duffqiu.patterndemo       LazySingleton.java

DesignPatternDemo develop src/test/java org.duffqiu.patterndemotest   LazySingletonTest.java

DesignPatternDemo develop src/main/java org.duffqiu.patterndemo       SerialibleSingleton.java

DesignPatternDemo develop src/test/java org.duffqiu.patterndemotest   SerialibleSingletonTest.java

DesignPatternDemo develop src/main/java org.duffqiu.patterndemo       EnumSingleton.java

DesignPatternDemo develop src/test/java org.duffqiu.patterndemotest   EnumSingletonTest.java
</code></pre>

<p>Rake中的任务代码为：</p>

<pre><code>desc "fetch source code file from github"
task :github_fetch do

  begin
    rm_rf "source/downloads"
    mkdir_p "source/downloads/code"
    if File.exist?("github_fetch.cf")
      IO.foreach("github_fetch.cf") do |line|
        if line.strip.empty? == false
            cd "source/downloads/code" do
            attr = line.split(' ')
            repo = attr[0].strip
            if repo.empty?
              abort("repo name is empty")
            end
            branch = attr[1].strip
            if branch.empty?
              abort("branch name is empty")
            end
            src_fold = attr[2].strip
            if src_fold.empty?
              abort("src fold is empty")
            end
            package = attr[3].strip
            if package.empty?
              abort("package name is empty")
            end
            file_name = attr[4].strip
            if file_name.empty?
              abort("file name is empty")
            end
            package_dir = package.gsub(/\./, '/')
            target_dir = repo + '/' + package_dir
            mkdir_p target_dir
            cd target_dir do
              system ("wget  " + "#{github_code_url}/#{github_account}/#{repo}/#{branch}/#{src_fold}/#{package_dir}/#{file_name}")
            end
          end
        end
      end
    else
      puts 'github_fetch.cf not found'
    end
  end
end    
</code></pre>

<h4 id="vi">Vi小提示</h4>

<ol>
  <li>Copy单前行到文件结尾：“yG”</li>
  <li>Delete单前行到文件结尾：“dG”</li>
  <li>回复上一次的操纵：“u”</li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress实时获取并展示github上其它repository的代码]]></title>
    <link href="http://duffqiu.github.io/blog/2014/02/05/octopressshi-shi-huo-qu-bing-zhan-shi-githubshang-qi-ta-repositoryde-dai-ma/"/>
    <updated>2014-02-05T01:45:57+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/02/05/octopressshi-shi-huo-qu-bing-zhan-shi-githubshang-qi-ta-repositoryde-dai-ma</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<p>在写blog的时候，想要直接关联github上的其它repository的代码，这样以后代码更新就不需要更新blog了。但是看octopress的文档，似乎<a href="https://gist.github.com">gist</a>可以达到该目的，但是它不是一个代码工程，无法像正常的代码工程那样去管理，编译，运行等。<br />
所以就想看看能否给Octopress加个plugin直接展示该代码</p>

<h3 id="section-1">办法</h3>
<p>原本想改一下plugins/include_code.rb，但是感觉还是太复杂，所以想个简单的方式
还是利用include_code这个插件，这个插件是可以将在source/downloads/code/目录下的文件展示出来的，这个目录原octopress代码没有生成，需要手工生成。<br />
思路就是想法将github上的代码在rake generate之前先用wget获取下来放到上面这个指定的目录中<br />
因为include_code.rb的复杂度，我选择了更改Rakefile文件，新增一个任务的方式来解决
具体步骤如下：</p>

<ol>
  <li>
    <p>在octopress目录下新增一个需要下载的文件的配置githubcode.cf，格式为<github repository="" name="">空格<java package="" name="">空格<java code="" file="" url="">。java的包名可以保留'.'的格式，这个插件会自动转成目录</java></java></github></p>

    <pre><code>DesignPatternDemo  org.duffqiu.patterndemo  https://raw.github.com/duffqiu/DesignPatternDemo/feature/LazySingletonDemo/src/org/duffqiu/patterndemo/LazySingleton.java
</code></pre>
  </li>
  <li>
    <p>确保已经安装好wget</p>

    <pre><code>sudo port install wget
</code></pre>
  </li>
  <li>
    <p>更改Rakefile文件，在最后增加一个任务</p>

    <pre><code> desc "get code file from github"
 task :github_code do
	
   begin
     require 'net/http'
     require 'uri'
     rm_rf "source/downloads"
     mkdir_p "source/downloads/code"
     if File.exist?("githubcode.cf")
       IO.foreach("githubcode.cf") do |line|
         if line.strip.empty? == false
             cd "source/downloads/code" do
             attr = line.split(' ')
             repo = attr[0].strip
             if repo.empty?
               abort("repo name is empty")
             end
             package = attr[1].strip
             file_url = attr[2].strip
             if file_url.empty?
               abort("file url is empty")
             end
             package_dir = package.gsub(/\./, '/')
             target_dir = repo + '/' + package_dir
             mkdir_p target_dir
             cd target_dir do
               system ("wget  " + file_url)
             end
           end
         end
       end
     else
       puts 'githubcode.cf not found'
     end
   end
 end        		
</code></pre>
  </li>
  <li>
    <p>在需要引用代码的地方使用以下方式</p>

    <pre><code>
   
{% include_code lang:java &lt;repository name&gt;/&lt;package name&gt;/&lt;java file name&gt; %}
   

</code></pre>

    <p>注意：<repository name="">前面没有'/'，<pakcage name="">要将java的包名的'.'改为'/'</pakcage></repository></p>
  </li>
  <li>
    <p>每次有新增的github代码文件引入，则需要在rake generate前先调用</p>

    <pre><code>rake github_code
</code></pre>
  </li>
</ol>

<h3 id="section-2">小插曲</h3>
<p>####wget https访问问题</p>

<p>使用wget访问github的时候，因为github使用https，则会出现说github的“证书不可信”和“证书颁发者未知”的问题。
解决方式为</p>

<ol>
  <li>使用–no-check-certificate参数访问github，但是还是用warning，不够完美</li>
  <li>
    <p>决解证书问题  </p>

    <ul>
      <li>
        <p>安装curl-ca-bundle</p>

        <pre><code> sudo port install curl-ca-bundle
</code></pre>
      </li>
      <li>
        <p>配置wget</p>

        <pre><code> echo CA_CERTIFICATE=/opt/local/share/curl/curl-ca-bundle.crt &gt;&gt; ~/.wgetrc
</code></pre>
      </li>
    </ul>
  </li>
</ol>

<p>然后再运行wget就不会有问题了</p>
]]></content>
  </entry>
  
</feed>
