<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Octopress | Duff Qiu's Blog]]></title>
  <link href="http://duffqiu.github.io/blog/categories/octopress/atom.xml" rel="self"/>
  <link href="http://duffqiu.github.io/"/>
  <updated>2014-02-04T23:44:13+08:00</updated>
  <id>http://duffqiu.github.io/</id>
  <author>
    <name><![CDATA[Duff Qiu]]></name>
    <email><![CDATA[duffqiu@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Octopress添加bing网站分析]]></title>
    <link href="http://duffqiu.github.io/blog/2014/02/02/octopresstian-jia-bingwang-zhan-fen-xi/"/>
    <updated>2014-02-02T11:30:01+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/02/02/octopresstian-jia-bingwang-zhan-fen-xi</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<p>Google提供了相应的Analytics网站分析工具，同样Bing也提供了类似的工具：<a href="http://www.bing.com/toolbox/webmaster/" title="官网">Bing网站管理员</a>，同样可以给你的Octopress很快速的添加该分析工具</p>

<h3 id="section-1">配置</h3>

<ol>
  <li>在Bing网站管理员注册，并填写必要的信息</li>
  <li>添加一个新网站，填写相应的信息</li>
  <li>
    <p>根据认证所有权网页配置Octopress，具体如下</p>

    <ul>
      <li>下载你的BingSiteAuth.xml到octopres的source目录下</li>
      <li>
        <p>配置_config_yml文件，设置bing analytics开关，在文件最后加入，如果以后不用bing analytics，则可以将开关设置为false就可以，不用到处改文件</p>

        <pre><code># Bing Analytics  
bing_analytics: true
</code></pre>
      </li>
      <li>
        <p>修改octopres/source/_include目录下的head.html文件，在&lt;head&gt;下面增加以下内容，记得替换&lt;…&gt;bing给你的blog的标识</p>

        <pre><code>
     
{% if site.bing_analytics %}
&lt;meta name="msvalidate.01" content="&lt;...&gt;" /&gt;
{% endif %}
     

</code></pre>
      </li>
      <li>
        <p>然后重新生成并部署就可以了      </p>

        <pre><code>&gt;rake generate
&gt;rake deploy
</code></pre>
      </li>
    </ul>
  </li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[加速Octopress的装载]]></title>
    <link href="http://duffqiu.github.io/blog/2014/02/01/jia-su-octopressde-zhuang-zai/"/>
    <updated>2014-02-01T14:23:15+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/02/01/jia-su-octopressde-zhuang-zai</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<p>加速网页的存取有多种方式，其中之一就是减少一个页面的http的请求数量，因为浏览器同时发送http请求的数量是有限的，而对于很多页面而言，通常定义了很多css和js文件的链接，这样就会造成浏览器需要多次请求后才能完整的展示页面，所以最好的方式将多个css和js文件合并，如果需要还可以将合并后的文件压缩再传输，从而达到加速的目的。</p>

<h3 id="gem">Gem插件安装</h3>
<p>Octopress的<a href="https://github.com/matthodan/jekyll-asset-pipeline">jekyll-asset-pipeline</a>就是一个这样机制的开源插件<br />
简单的可以通过以下命令安装</p>

<pre><code>&gt;sudo gem install jekyll-asset-pipeline
</code></pre>

<p><strong>注意：</strong> 有可能安装完成后，需要更新bundle，这行命令</p>

<pre><code>&gt;sudo bunlde update  
</code></pre>

<p>压缩需要用到插件YUI Compressor，可以简单通过以下命令安装</p>

<pre><code>&gt;sudo gem install yui-compressor
</code></pre>

<p>另外一个选择是使用Google的<a href="https://developers.google.com/closure/?hl=zh-cn">Closure</a>，可以通过简单通过以下命令安装</p>

<pre><code>&gt;sudo gem install Closure          
</code></pre>

<h3 id="octopress">配置Octopress</h3>
<ol>
  <li>
    <p>配置octopress目录下的Gemfile文件，在:development中，增加以下两行</p>

    <pre><code>gem "jekyll-asset-pipeline"
gem "yui-compressor
</code></pre>
  </li>
  <li>
    <p>在 Octopress的plugins目录中，创建一个名为“jekyll_asset_pipeline.rb”的文件，内容如下：可以用注释那行代替上面那行就是使用Google的closure来压缩js文件</p>

    <pre><code> require 'jekyll_asset_pipeline'

 module JekyllAssetPipeline
	
   class CssCompressor &lt; JekyllAssetPipeline::Compressor
     require 'yui/compressor'
	
     def self.filetype
       '.css'
     end
	
     def compress
       return YUI::CssCompressor.new.compress(@content)
     end
   end
	
   class JavaScriptCompressor &lt; JekyllAssetPipeline::Compressor
     require 'yui/compressor'
     #require 'closure-compiler'
	
     def self.filetype
       '.js'
     end
	
     def compress
       return YUI::JavaScriptCompressor.new(munge: true).compress(@content)
       #return Closure::Compiler.new.compile(@content)
     end
   end
	
 end
</code></pre>
  </li>
  <li>
    <p>修改Octopress的配置文件_config.yml，在文件最后增加以下配置</p>

    <pre><code>asset_pipeline:
   bundle: true            # Default = true
   compress: true          # Default = true
   #output_path: assets     # Default = assets
   #display_path: nil       # Default = nil
   gzip: false             # Default = false
</code></pre>
  </li>
  <li>
    <p>修改相应的html文件，激活js/css文件的合并压缩。不同的Octopress的template，对应的文件或有不同，我这里用的是Octopress默认的官方template，因该适合大多数人</p>

    <ul>
      <li>
        <p>修改source/_include目录下的head.html文件，注释掉带有js/css的几行</p>

        <pre><code>
     
 &lt;!-- &lt;link href="{{ root_url }}/stylesheets/screen.css" media="screen, projection" rel="stylesheet" type="text/css"&gt; --&gt;
	 
 &lt;!-- &lt;script src="{{ root_url }}/javascripts/modernizr-2.0.js"&gt;&lt;/script&gt; --&gt;
 &lt;!-- &lt;script src="http://duffqiu.github.io//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"&gt;&lt;/script&gt; --&gt;
 &lt;!-- &lt;script&gt;!window.jQuery &amp;&amp; document.write(unescape('%3Cscript src="./javascripts/libs/jquery.min.js"%3E%3C/script%3E'))&lt;/script&gt; --&gt;
 &lt;!-- &lt;script src="{{ root_url }}/javascripts/octopress.js" type="text/javascript"&gt;&lt;/script&gt; --&gt;
	  

</code></pre>
      </li>
      <li>
        <p>增加以下内容</p>

        <pre><code>
   
{% css_asset_tag global %}
 - /stylesheets/screen.css
{% endcss_asset_tag %}
	
{% javascript_asset_tag global %}
- /javascripts/octopress.js
- /javascripts/modernizr-2.0.js
- /javascripts/libs/jquery.min.js
- /javascripts/libs/swfobject-dynamic.js
- /javascripts/libs/jXHR.js
{% endjavascript_asset_tag %}
   

</code></pre>
      </li>
      <li>
        <p>同理修改source/_includes/custom目录下的head.html文件，注释掉里面的内容，增加上面的内容就可   </p>
      </li>
    </ul>
  </li>
  <li>
    <p>到底有多css和js文件需要加入到需要增加的内容中呢？在octopress/source目录中搜索一下</p>

    <pre><code>find . -name '*.css'
find . -name '*.js'
</code></pre>

    <p>然后将必要的文件加入到上面的文件列表中</p>
  </li>
</ol>

<h3 id="vi">Vi小提示</h3>

<ol>
  <li>跳到文件头用 “:0”</li>
  <li>跳到行头在非编辑状态下直接收入”0”</li>
  <li>跳到行尾在非编辑状态下直接收入”$”      </li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress通知搜索引擎]]></title>
    <link href="http://duffqiu.github.io/blog/2014/02/01/octopresstong-zhi-sou-suo-yin-qing/"/>
    <updated>2014-02-01T13:21:02+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/02/01/octopresstong-zhi-sou-suo-yin-qing</id>
    <content type="html"><![CDATA[<h3 id="section">目的</h3>
<p>每次更新blog后，总希望搜索引擎可以尽快收录到，最好是多个搜索引擎都能收入到<br />
怎么做到呢？</p>

<h3 id="rake">配置搜索引擎rake任务</h3>
<p>首先感谢原作者的介绍<a href="http://blog.eavatar.com/post/2013/06/octopress-ping-search-engines/">1</a></p>

<ol>
  <li>
    <p>编辑octopress目录的Rakefile文件，在最后增加搜索引擎任务</p>

    <pre><code>＃Google search engine
desc 'Notify Google of the new sitemap'
 task :sitemapgoogle do
  begin
    require 'net/http'
    require 'uri'
    puts '* Pinging Google about our sitemap'
    Net::HTTP.get('www.google.com', '/webmasters/tools/ping?sitemap=' + URI.escape('http://duffqiu.github.io/sitemap.xml'))
  rescue LoadError
    puts '! Could not ping Google about our sitemap, because Net::HTTP or URI could not be found.'
  end
 end

#Baidu search engine       
desc 'Ping Baidu'
 task :pingbaidu do
   begin
     require 'xmlrpc/client'
     puts '* Pinging Baidu search engine'
     XMLRPC::Client.new('ping.baidu.com', '/ping/RPC2').call('weblogUpdates.extendedPing', 'duffqiu.github.io' , 'http://duffqiu.github.io', 'http://duffqiu.github.io', 'http://duffqiu.github.io/rss.xml')
   rescue LoadError
     puts '! Could not ping Baidu, because XMLRPC::Client could not be found.'
   end
 end
	
#Bing search engine
desc 'Notify Bing of the new sitemap'
 task :sitemapbing do
   begin
     require 'net/http'
     require 'uri'
     puts '* Pinging Bing about our sitemap'
     Net::HTTP.get('www.bing.com', '/webmaster/ping.aspx?siteMap=' + URI.escape('http://duffqiu.github.io/sitemap.xml'))
   rescue LoadError
     puts '! Could not ping Bing about our sitemap, because Net::HTTP or URI could not be found.'
   end
 end	
</code></pre>

    <p>将”duffqiu.github.io”换成你的blog域名字即可</p>
  </li>
  <li>
    <p>增加一个批量任务同时执行三个通知</p>

    <pre><code>desc "Notify various services about new content"
task :notify =&gt; [:sitemapgoogle, :sitemapbing, :pingbaidu] do
end
</code></pre>
  </li>
  <li>
    <p>每次部署后执行命令</p>

    <pre><code>rake notify
</code></pre>
  </li>
</ol>

<h3 id="vi">vi小技巧</h3>
<p>今天有用到一个vi的命令，跳转到文件最后用”:$”        </p>

<h3 id="section-1">小插曲</h3>
<p>今天发现用Mac OSX10.9可以直接投射屏幕到小米盒子(v1.3.20)了</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress Gem插件gsl安装]]></title>
    <link href="http://duffqiu.github.io/blog/2014/01/30/octopress-gemcha-jian-gslan-zhuang/"/>
    <updated>2014-01-30T20:00:10+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/01/30/octopress-gemcha-jian-gslan-zhuang</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<p>Octopress用rake generate的时候会提示使用GSL将会加速文件的生成，速度是原来的的10+倍，但是需要安装<a href="http://rb-gsl.rubyforge.org/">Ruby GSL</a>插件。</p>

<h3 id="section-1">安装</h3>
<p>当使用命令安装Ruby GSL的时候确发现了问题 </p>

<pre><code>gem install gsl
</code></pre>

<p>原因是缺少了<a href="http://www.gnu.org/software/gsl/" title="GSL Library官网">GSL的C的开发库</a>    </p>

<p>然后在GSL Library官网下载了最新的GSL1.16，然后编译安装，然后再重新安装Ruby GSL，但是还是出现错误，后来搜索<a href="http://stackoverflow.com">stackoverflow</a>找到一个说明，说是GSL和Ruby GSL配合的版本只能用1.14的。所以再次下载GSL1.14编译、安装然后再安装Ruby GSL就可以了</p>

<h3 id="section-2">使用</h3>

<pre><code>rake notify
</code></pre>

<p>目前看除了rake generate没有那个提示，好像速度没有看出来，或许是文章的数目不多体现不出来 </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress的内部blog间关联]]></title>
    <link href="http://duffqiu.github.io/blog/2014/01/30/octopressde-nei-bu-blogjian-guan-lian/"/>
    <updated>2014-01-30T18:28:34+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/01/30/octopressde-nei-bu-blogjian-guan-lian</id>
    <content type="html"><![CDATA[<h3 id="section">首先鸣谢参考资料的作者</h3>

<p>参考资料来自与 <a href="http://blog.eavatar.com/post/2013/06/use-post-url-internal-link-octopress/">1</a></p>

<h3 id="octopress">完善Octopress的配置</h3>

<ol>
  <li>
    <p>获取内部关联的<a href="https://raw.github.com/michael-groble/jekyll/fix_post_url/lib/jekyll/tags/post_url.rb">post url plugin</a>，然后将其放入到plugin目录中    </p>
  </li>
  <li>
    <p>确保已经安装了kramdown，如果没有，用以下命令安装</p>

    <pre><code>&gt;sudo gem install kramdown
</code></pre>
  </li>
  <li>
    <p>编辑配置文件_configy.yml，注释掉markdown: rdiscount，然后增加</p>

    <pre><code>#markdown: rdiscount
markdown: kramdown
</code></pre>
  </li>
</ol>

<h3 id="blog">在blog中使用关联，语法如下</h3>

<pre><code>

[&lt;链接名字&gt;]({% post_url &lt;blog的文件名字，不要带目录和文件后缀&gt; %}) 


</code></pre>

<p>然后重新生成和部署就可以了</p>

<pre><code>&gt;rake generate
&gt;rake deploy
</code></pre>

<h3 id="section-1">一个小插曲</h3>
<p>今天在生成地8个blog后，rake generate就出错了，报在matrix.rb文件中反馈出”Not Regular Matrix”错误，但是就是死活找不到问题所在，只要将刚生成的文件删除就好了，而文件还没写东西。后来经历反复的从头再来，终于发现了问题所在，结论是之前参照网上配置关联blog的配置，在_configy.yml中增加了以下配置：</p>

<pre><code>lsi: true    
</code></pre>

<p>只要将这个选项关闭或删除就可，好像octopress已经没有用了</p>

<h3 id="octopress-1">Octopress经验总结</h3>

<p>尽管使用上就是用markdown的方式写文章，但是使用octopress这个平台，就像使用开发工具一样，总会出现这样那样的错误，而且还很难定位，最好的办法就是像编程一样，今早“编译”－》“试运行”－》“改错”－》“再运行”，不然当你写了很多后一次行生成出现错误就无从下手去解决问题了，只能一个一个做减法然后再试。</p>

<p>最好的方式是</p>

<ol>
  <li>写一部分，就立马rake generate  </li>
  <li>rake new_post[“<文章名>"]，不写任何东西，立马rake generate</文章名></li>
  <li>只要用到 {%  %}这些内嵌语法，立马rake generate</li>
  <li>更改一项_config.yml配置，立马rake generate</li>
</ol>
]]></content>
  </entry>
  
</feed>
