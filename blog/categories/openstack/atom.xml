<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Openstack | Duff Qiu's Blog]]></title>
  <link href="http://duffqiu.github.io/blog/categories/openstack/atom.xml" rel="self"/>
  <link href="http://duffqiu.github.io/"/>
  <updated>2015-10-26T09:50:23+08:00</updated>
  <id>http://duffqiu.github.io/</id>
  <author>
    <name><![CDATA[Duff Qiu]]></name>
    <email><![CDATA[duffqiu@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Openstack如何更好的使用block Service作为磁盘使用]]></title>
    <link href="http://duffqiu.github.io/blog/2015/07/05/openstack-blockservice/"/>
    <updated>2015-07-05T17:15:59+08:00</updated>
    <id>http://duffqiu.github.io/blog/2015/07/05/openstack-blockservice</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<hr />
<p>在使用Openstack过程中，VM总是要运行某些程序，而这些程序的数据是记录在磁盘中的。如何保证在VM被删除或者重建后这些数据依然能够存在呢？这就要用到Openstack的Block Service了。但是这里面有几个问题：</p>

<ul>
  <li>block service创建出来的卷是是个无文件格式的盘，无法被直接读写</li>
  <li>通常我们希望在给一个VM初始化时挂在一个盘时，这个盘已经包含了某些必须的文件内容 </li>
</ul>

<h3 id="section-1">解决办法</h3>
<hr />

<p>思路是做出一个带有文件格式已经需要的文件内容／数据的block service的image，这样就不用去格式化这个卷，同时也包含所需的内容，具体方法如下：</p>

<ul>
  <li>创建一个本地image，指定大小。 <code>dd if=/dev/null of=example.img bs=1M seek=1024</code>。这里创建了一个1G大小的镜像文件example.img，对于不同的使用目的，这里的bs需要调优</li>
  <li>格式化成ext4。 <code>mkfs.ext4 -F example.img</code></li>
  <li>创建本地的挂载目录 <code>mkdir &lt;path&gt;</code></li>
  <li>挂载这个image到指定的目录 <code>mount -t ext4 -o loop example.img &lt;path&gt;</code></li>
  <li>将需要的资料放入到这个目录中</li>
  <li>卸载该image <code>umount &lt;path&gt;</code></li>
  <li>将image转成qcow2格式 <code>qemu-img convert -f raw -O qcow2 example.img example.qcow2</code></li>
  <li>上传到openstack</li>
</ul>

<p><code>
glance image-create --name &lt;image name&gt; \
--container-format bare \
--disk-format qcow2 \
--file exmaple.qcow2 \
--is-public True
</code></p>

<ul>
  <li>创建block storage的卷</li>
</ul>

<p><code>
cinder create --image-id &lt;image uuid&gt; --display-name &lt;disk name&gt; &lt;size x G&gt;
</code>
- 创建完成就可以将其挂载到VM中使用了
- 可以在创建VM时在nova命令中生成这个卷</p>

<h4 id="openstack-tips">Openstack tips</h4>

<ul>
  <li><code>vgdisplay</code>获取openstack的磁盘空间信息</li>
</ul>

<h4 id="bash-tips">Bash tips</h4>

<ul>
  <li><code>echo $?</code> 获取最近命令的status code</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Openstack用Keealived来实现VIP]]></title>
    <link href="http://duffqiu.github.io/blog/2015/07/05/openstack-vip/"/>
    <updated>2015-07-05T15:34:52+08:00</updated>
    <id>http://duffqiu.github.io/blog/2015/07/05/openstack-vip</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<hr />
<p>在Openstack创建VM的时候一般都是使用DHCP的方式来分配虚拟机的IP地址。这样就会出现一个问题，每次重建VM的时候，IP地址都会被改变，从而影响外部的访问。同时如果期望有两个虚拟机同时服务一个IP接入的话，则需要用到VIP的方式来实现。</p>

<h3 id="section-1">解决办法</h3>
<hr />

<p>VIP的实现方式通常使用VRRP（Virtual Router Redundancy Protocol）协议的方式。目前开源比较通用的软件是<a href="http://keepalived.org/">Keepalived</a>，但是在Openstack的环境中，并不是在两台虚拟机安装了Keepalived就可以的。而是需要做某些配置，下面具体讲讲</p>

<ul>
  <li>在OpenStack的一个内部网络上创建一个Port，这个Port将得到一个内网的IP <code>neutron port-create --name &lt;port name&gt; &lt;internal network name&gt;</code> 。如果不知道openstack上有哪些网络可用，则可以用<code>neutron net-list</code>来查看</li>
  <li>创建一个外网可访问的floating ip。<code>neutron floatingip-create &lt;external network name&gt;</code></li>
  <li>将这个floating ip关联到这个新建的port上。 <code>neutron floatingip-associate &lt;floating ip uuid&gt; &lt;port uuid&gt;</code>。这样就可以通过外部网络访问到这个port口了。</li>
  <li>启动两台VM，然后各自配置keepalived，并且用这个内网的ip作为VIP给keepalvied使用。配置好后，似乎都没有问题了。但是始终无法访问，原因是openstack对于使用VIP有安全限制，必须认为的将这个VIP与VM关联才可以访问</li>
  <li>配置VM的allowed-address-pair。首先通过<code>nova list |grep &lt;vm identity&gt;</code>来找到自己创建的VM，然后通过<code>neutron port-list|grep &lt;vm ip&gt;</code>来找到VM port对应的uuid。通过<code>neutron port-show &lt;vm port uuid&gt;</code>来查看是否配置了allowed-address-pair。如果没有则需要更新port来支持allowed-address-pair。命令是<code>neutron port-update &lt;vm port uuid&gt; --allowed-address-pairs type=dict list=true ip_address=&lt;VIP&gt;</code></li>
</ul>

<h3 id="section-2">如何调试</h3>

<ul>
  <li>如果一切都配置好了，但是就是无法通，则可以在VM或者是Openstack对应的Computer Node上用<code>tcpdump -i &lt;net card name&gt; icmp</code>的方式开跟踪是否消息包是通的</li>
  <li><code>ip neigh |grep &lt;vip&gt;</code> 来查看<vip>对应的mac地址。然后在作为master的keepalived的机器上看看是否是这个mac地址</vip></li>
</ul>

]]></content>
  </entry>
  
</feed>
