<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | Duff Qiu's Blog]]></title>
  <link href="http://duffqiu.github.io/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://duffqiu.github.io/"/>
  <updated>2014-03-03T22:51:34+08:00</updated>
  <id>http://duffqiu.github.io/</id>
  <author>
    <name><![CDATA[Duff Qiu]]></name>
    <email><![CDATA[duffqiu@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[设计模式：动态代理]]></title>
    <link href="http://duffqiu.github.io/blog/2014/03/01/she-ji-mo-shi-%3Adong-tai-dai-li/"/>
    <updated>2014-03-01T23:31:47+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/03/01/she-ji-mo-shi-:dong-tai-dai-li</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<hr />
<p>之前我们讲了如何使用代理模式，但是代理必须实现被代理对象共同的接口，如果需要用到代理模式的类表多，则同一个扩展功能就必须实现很多个相似的代理类。从而造成代码的重复。
有没有更简单的方法生成代理，而对于一个扩展只需要一个代理类呢 ？</p>

<h3 id="section-1">解决办法</h3>
<hr />

<h4 id="jdkjavalangreflect">JDK的java.lang.reflect</h4>
<p>JDK的反射机制中动态代理类和接口就可以帮助我们简化代理类的生成。
具体代码建议模版为：</p>

<ul>
  <li>生成一个实现<code>InvocationHandler</code>接口的类，建议命名为xxxDynamicProxy</li>
  <li>设计一个私有变量来存储被代理的对象，并提供一个带参数的构造方法，该参数为被代理的对象。为了通用，使用Object或者范型的形式。我使用范型的方式：</li>
</ul>

<p>``` java
public final class xxxDynamicProxy<t> implements InvocationHandler {</t></p>

<pre><code>private T delegate;
....

public xxxDynamicProxy(T t) {
this.delegate = t;
}

... }         ```
</code></pre>

<ul>
  <li>设计一个静态工厂方法函数，帮助生成代理对象</li>
</ul>

<p>``` java
@SuppressWarnings(“unchecked”)
public static <t> T createProxyInstance(T t) {</t></p>

<p>return (T) Proxy.newProxyInstance(t.getClass().getClassLoader(), t
	        .getClass().getInterfaces(), new LoggingDynamicProxy<t>(t));
}
```</t></p>

<ul>
  <li>使用方式就是先生成被代理对象，然后用动态代理类的工厂方法来生成代理对象，接着就可以像被代理对象那样使用了。</li>
</ul>

<p>注意1：JDK这个动态代理的方式是有约束性的，被代理的对象一定要实现某个接口，不然会有运行时错误。</p>

<p>注意2：代理对象也可以被另外一个代理对象所代理，从而实现功能叠加的效果。也就是装饰模式的叠加效果。从这点上看，JDK这个动态代理的方式其实也是装饰模式。</p>

<h4 id="google-guava">Google Guava的动态代理</h4>
<p>原理上Google Guava的动态代理也是使用JDK的动态代理，这是做了封装，更加简便。另外一点是能够很好的检查需要代理的对象必须拥有接口。使用<code>Class类的isInterface()</code>来做检查。从我自己的实现的例子看，当代理作为下一个代理的输入时，这个检查将实效。</p>

<p>Google Guava的动态代理的使用方式</p>

<ul>
  <li>类似上面的步骤生成代理类，但是不用生成静态的工厂方法了。</li>
  <li>
    <p>使用方式为调用<code>Reflection.newProxy(...)</code>来生成代理类。</p>
  </li>
  <li>如果需要比对用相同的handler生成的prxoy是相等的(并非同一个对象)，则可以通过继承<code>AbstractInvocationHandler</code>来简化编码。因为这个抽象类已经实现了相等的相关操作。</li>
</ul>

<h4 id="cglib">CGLIB</h4>
<p>CGLIB对于dynamic proxy的支持个人理解已经太老了，虽然可以对没有实现接口的类支持代理，但是对于final类还是不行。</p>

<h3 id="section-2">总结</h3>

<p>使用Guava来开发代理吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式：代理模式]]></title>
    <link href="http://duffqiu.github.io/blog/2014/02/23/she-ji-mo-shi-%3Adai-li-mo-shi/"/>
    <updated>2014-02-23T17:05:45+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/02/23/she-ji-mo-shi-:dai-li-mo-shi</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<hr />

<p>在编程中我们往往会使用到大对象，而对这些大对象的访问总是比较耗时，但是大对象又不是每次都需要使用到。例如从数据库读取出来的对象，或者从远程服务读取的对象。</p>

<h3 id="section-1">解决办法</h3>
<hr />
<p>使用一个代理对象，实现原有对象的接口，并由这个代理对象来负责大对象的创建、缓存等优化操作。
最常用的例子是数据的储存，我们希望将一个大对象很快的存到数据库中，但是又不希望等待以及做很多异常的处理，以为对于使用端而言并不关系存储方式和异常处理。所以可以通过Proxy对象来隔离这些特殊的处理，并通过多线程等异步手段提高性能。</p>

<h3 id="uml">UML图</h3>

<p><center><img src='/images/plantuml/2547fe12de2303e888755d4f0a12be0f.png'></center></p>

<h3 id="proxydecorate">Proxy与Decorate的区别</h3>

<p>－ Decorate的目的是给已有的类增加业务功能，而Proxy就像名义一样目的是为了某种而外目的给已有的类增加非业务功能</p>

<ul>
  <li>
    <p>从UML图可以看出，Proxy是图钉针对某个某个固定对象的，而Decorate是针对接口的，并且Proxy是负责对应的对象的生命周期的，让Decorate只是使用对应的对象。同时Proxy和对应的对象的数量关系并不确定，可以是1-*，也可以是1-1。而Decorate只能是1-1</p>
  </li>
  <li>
    <p>Decorate可以通过递归的方式叠加使用，而Proxy不作此用途</p>
  </li>
  <li>
    <p>当然既然类似，就可能可以混用。没有必要教条的说一定要明确Proxy或Decorate。</p>
  </li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Guice入门2]]></title>
    <link href="http://duffqiu.github.io/blog/2014/02/23/google-guiceru-men-2/"/>
    <updated>2014-02-23T14:26:45+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/02/23/google-guiceru-men-2</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<hr />
<p>在使用Guice做依赖注入的时候，很可能会发生在一个依赖模块（Module）中有多个同类型的接口需要注入，但是又需要根据不同的使用类注入不同的具体对象。如果只是简单的申明为接口注入对象，则会使用同一个对象。如：<code>bind(IDescription.class).to(ConnectionDescription.class);</code></p>

<h3 id="section-1">解决办法</h3>
<hr />
<p>使用<code>@Named("&lt;xxxx&gt;")</code>来命名需要注入的接口，然后在注入的时候指定名称来特定注入，如： </p>

<p>顶层使用类中：</p>

<p><code>java
@Inject
@Named("SendMsgWithAuditDesc")
private IDescription desc;
</code></p>

<p>Module configure方法中</p>

<p>``` java</p>

<p>//为什么的注入
bind(IDescription.class).to(ConnectionDescription.class);</p>

<p>//指定名称的注入
bind(IDescription.class).annotatedWith(
	        Names.named(“SendMsgWithAuditDesc”)).toProvider(
	        SendMessageWithAuditDescriptionProvider.class);
```</p>

<p>这里用了prvoider是因为需要使用参数的构造函数。Provider类如下：</p>

<p>``` java
public class SendMessageWithAuditDescriptionProvider implements
        Provider<connectiondescription> {</connectiondescription></p>

<pre><code>@Override
public final ConnectionDescription get() {

return new ConnectionDescription("Audit with SMPP",
        "Send Msg with audit via SMPP");
}
</code></pre>

<p>}
```</p>

<p>代码可以参考<a href="https://github.com/duffqiu/DesignPatternDemo">DesignPatternDemo的Decorator部分</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Guice入门1]]></title>
    <link href="http://duffqiu.github.io/blog/2014/02/22/google-guiceru-men-1/"/>
    <updated>2014-02-22T20:26:34+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/02/22/google-guiceru-men-1</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<hr />
<p>在一个系统中，多个模块总是通过各种关系关联在一起的。但是一般的编程方式总是讲如何组装各种模块与处理业务逻辑混合在一块，造成代码的维护比较困看，也容易造成代码的行数很大。</p>

<h3 id="section-1">解决办法</h3>
<hr />

<p>在前面我们已经介绍过<a href="/blog/2014/02/19/she-ji-mo-shi-%3Aioche-yi-lai-zhu-ru/">IoC</a>。可以通过自己创建单独的模块来维护类间的依赖。但是现在已经有成熟的框架帮助我们完成这个。主要有Spring和<a href="https://code.google.com/p/google-guice/">Google Guice</a>。这里主要讲一下如何使用Google Guice，这是一个基本的入门使用，后面如果用到高级的地方再讲。</p>

<h3 id="guice">Guice的使用</h3>

<h4 id="section-2">简介</h4>

<p>Google Guice是通过代码的方式来简单维护类间的依赖关系，不象Spring通过XML或annotation然后通过autoscan的方式来维护依赖。个人感觉好的地方是，对于程序员而言，代码方式更加贴近，也更容易理解。</p>

<h4 id="maven">使用方式(基于maven)</h4>
<ul>
  <li>在maven项目中增加Guice的jar包。注意，这里我们没有用AOP，所以特地讲AOP去掉，从而减少了对AOP的依赖</li>
</ul>

<p><code>sh
    &lt;dependency&gt;
    	&lt;groupId&gt;com.google.inject&lt;/groupId&gt;
    	&lt;artifactId&gt;guice&lt;/artifactId&gt;
    	&lt;version&gt;3.0&lt;/version&gt;
    	&lt;classifier&gt;no_aop&lt;/classifier&gt;
    &lt;/dependency&gt;
</code></p>

<ul>
  <li>
    <p>在依赖的顶层被使用的类上指明要注入的类</p>

    <p>注入方式有：  </p>

    <ul>
      <li>
        <p>属性注入：在对应的属性上使用<code>@inject</code>的annotation，前提是要有默认的public的无參构造函数，建议这种方式</p>
      </li>
      <li>
        <p>构造函数注入：在对应的构造函数上使用<code>@inject</code>的annotation，前提是该构造函数带有需要被注入的参数。</p>
      </li>
    </ul>
  </li>
</ul>

<p>``` java
public class SendMessageImpl implements ISendMessage {</p>

<pre><code>@Inject
private SmppSendMsg smpp;

@Inject
private IDescription desc;
... }     ```
</code></pre>

<ul>
  <li>
    <p>生成绑定关系的类，该类必须是继承于AbstractModule，然后在重载<code>configure</code>方法，在该方法中指定绑定关系。Best Practice：该类的命名后缀建议为BindingModule。如果注入的为具体的类，则无需在<code>configure</code>方法中指定绑定关系，如果为接口，则需要绑定到具体的类如：<code>bind(&lt;Interface&gt;.class).to(&lt;ConcreteClass&gt;.class)</code>。注意就算<code>configure</code>方法为空，都要生成一个Module类。Best Practise：尽量使用接口而不是具体的类，以便于以后更改类的实现而不用更改业务类的代码，因为注入都是在这个Module类完成。</p>
  </li>
  <li>
    <p>如果注入的类必须使用带参数的构造函数，则必须手工完成类的实例的生成。但是都必须在module类中指定。</p>

    <p>主要有两种方式手工完成类的实例的生成：</p>

    <ul>
      <li>
        <p>使用<code>@provider</code> annotation指定类的生成方法，该方法必须是返回一个该类的实例，但是这种方式无法让Guice自动完成Singleton。</p>
      </li>
      <li>
        <p>给需要手工生成实例的类创建一个provider类，该类实现 <code>Provider&lt;T&gt;</code>接口，然后在<code>configure</code>方法中使用<code>bind(xxx.class).toProvider(yyy.class)</code>指定手工生成实例的类。如果需要Singleton则在后面增加指定如<code>bind(xxx.class).toProvider(yyy.class).in(
        Singleton.class)</code>。Best Practice：该类的命名后缀建议为Provider。</p>
      </li>
    </ul>
  </li>
  <li>
    <p>客户端的使用方式 </p>

    <p>使用生成的BindingModule获取一个Inject实例，然后使用该实例创建需要的对象。如： </p>
  </li>
</ul>

<p><code>java
Injector injector = Guice.createInjector(new SendMessageBindingModule());
ISendMessage sender = injector.getInstance(SendMessageImpl.class);
sender.xxx();
...
</code></p>

<h3 id="section-3">小插曲</h3>
<p>这是在写Decorator设计模式的时候分心出来写的，代码可以参考<a href="https://github.com/duffqiu/DesignPatternDemo">DesignPatternDemo的Decorator部分</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式：装饰器模式]]></title>
    <link href="http://duffqiu.github.io/blog/2014/02/22/she-ji-mo-shi-%3Azhuang-shi-qi-mo-shi/"/>
    <updated>2014-02-22T15:09:29+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/02/22/she-ji-mo-shi-:zhuang-shi-qi-mo-shi</id>
    <content type="html"><![CDATA[<h3 id="section">装饰器模式原理</h3>
<hr />
<ol>
  <li>模式名称：装饰器模式 (Decorator Pattern)，另外一个别名是包装器模式(Wrapper)</li>
  <li>问题：在开发过程，当一个比较大的类实现并测试后，将逐渐被稳定下来。但是这个时候有了新的需求，需要增强原由的功能，一般的做法是直接修改原由的类，但是会影响到原有类的稳定性，所有的测试都要回归，并且新增代码会对已有功能的稳定性带来影响，而且违背OO的开放－封闭原则。另外一个做法是继承原有的类然后扩展功，但是会造成代码重复，而且扩展性不高，同时如果类已经是final的则无法通过这种方式达到目的。</li>
  <li>解决方案：提供一个与原来相同接口的类，但是原来的实现累作为新累的一个部分。这样对于客户端而言并没有改变，但是实际行为变成了除原有的功能外，新增了功能。同时可以由多个新增功能的类叠加来处理。简单讲就是<code>Interface i = new A();</code>变成了<code>Interface i = new B(new A)</code></li>
  <li>结论：无需静态继承，可以灵活扩展。可以作为AOP的简单实现。缺点是产生很多类似的类，容易引起歧异。</li>
</ol>

<h3 id="section-1">案例说明</h3>
<hr />
<p>这里提供一个简单的业务需求来完成这个例子。
需求的简单说明如下 ：系统一个模块给系统的其它部分用以发送用户通知。原本已经实现好了SMPP发送的功能，但是现在为了统计方便，需要在每次发送时记录到内存中/文件中，以便审计，但是这个对于客户端使用必须是透明的</p>

<h4 id="uml">UML图</h4>

<p><center><img src='/images/plantuml/6315d532d32d6a1c697023198bdd2f7a.png'></center></p>

<h3 id="section-2">模式要点</h3>

<p>一个类A实现接口I，同时拥有一个同样实现接口I的对象。客户端调用的时候，可以实例化多个实现接口I的对象，然后叠加在一起后给客户端使用。客户端只是看到I提供的功能描述，并不知道具体的实现叠加了多少。
这个模式的最大目的就是能够动态的给类增加功能。</p>

<p>使用中可以通过I i = new A(new B(new C))的方式使用，可以通过Guice等通过Inject的方式组装。在<a href="https://github.com/duffqiu/DesignPatternDemo">DesignPatternDemo的Decorator部分</a>例子中同时提供了这两种方式的代码。</p>
]]></content>
  </entry>
  
</feed>
