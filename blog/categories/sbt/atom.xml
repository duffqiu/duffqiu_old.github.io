<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: SBT | Duff Qiu's Blog]]></title>
  <link href="http://duffqiu.github.io/blog/categories/sbt/atom.xml" rel="self"/>
  <link href="http://duffqiu.github.io/"/>
  <updated>2015-08-14T14:42:49+08:00</updated>
  <id>http://duffqiu.github.io/</id>
  <author>
    <name><![CDATA[Duff Qiu]]></name>
    <email><![CDATA[duffqiu@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[集成SBT到Jenkins中]]></title>
    <link href="http://duffqiu.github.io/blog/2015/02/23/integrate-sbt-project-jenkins/"/>
    <updated>2015-02-23T14:56:24+08:00</updated>
    <id>http://duffqiu.github.io/blog/2015/02/23/integrate-sbt-project-jenkins</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<hr />

<p>之前有些过关于Jenkins上搭建maven工程<a href="/blog/2014/02/06/yong-jenkinsda-jian-ji-yu-githubhe-junitde-zi-dong-hua-ce-shi/">1</a>，但是对于Scala的工程最好还是用SBT，那么如何在Jenkins用SBT呢？</p>

<h3 id="section-1">解决办法</h3>
<hr />

<p>Jenkins已经提供了SBT的插件，类似Maven的插件</p>

<p>具体步骤如下：</p>

<ul>
  <li>在Jenkins上的系统管理-&gt;管理Jenkins-&gt;管理插件中选择可选插件，然后输入sbt过滤条件</li>
  <li>选择安装sbt plugin</li>
  <li>重启Jenkins</li>
  <li>配置sbt：系统管理-&gt;系统设置，设置”sbt lauch jars”，注意这里是指具体的jar文件，不是配置路径。如<code>/opt/local/share/sbt/sbt-launch.jar</code>  </li>
  <li>新建项目（因为不像Maven有特定的选项），所以选择”构建一个自由风格的软件项目”  </li>
  <li>然后在构建步骤中选择”Build using SBT”，然后配置对应的参数。这里需要注意的是JVM Flags，如果不配置很可能PerGem不够造成OutofMemoryError。但是该配置什么呢？如果不是太清楚，则可以直接拷贝sbt的启动脚本中的JVM Flags参数，如我机器的：<code>-XX:+CMSClassUnloadingEnabled -Xms1536m -Xmx1536m -XX:MaxPermSize=384m -XX:ReservedCodeCacheSize=192m -Dfile.encoding=UTF8</code></li>
  <li>如果Git repo下是涵盖了多个项目，则可以制定sub-directory path来运行特定个项目</li>
</ul>

<h3 id="section-2">小插曲</h3>

<h4 id="linuxunix">Linux/Unix下跟踪或查看文件的命令</h4>

<ol>
  <li>输入文件到console: <code>cat &lt;filename&gt;</code></li>
  <li>逐行显示文件: <code>less &lt;filename&gt;</code></li>
  <li>显示文件最后的一屏: <code>tail &lt;filename&gt;</code></li>
  <li>如果需要跟踪文件的变化则: <code>tail -f &lt;filename&gt;</code></li>
</ol>

<h4 id="git">Git清理工作空间</h4>

<p>如果在某个Repo中，你不小心加入了很多没用的文件和文件目录（或者是因为没有checkout到真确的branch就做了pull操作），则你期望一次性清理掉这些文件，可以用以下命令
不过需要注意的是这个操作不可逆的，可以通过增加<code>-n</code>参数来预览一下将会有什么变化</p>

<p><code>sh
git clean -fdx
</code></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[初学sbt]]></title>
    <link href="http://duffqiu.github.io/blog/2015/02/10/sbt-for-new-user/"/>
    <updated>2015-02-10T15:22:32+08:00</updated>
    <id>http://duffqiu.github.io/blog/2015/02/10/sbt-for-new-user</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<hr />
<p>初学一种语言最烦的就是搭建开发环境了，每次都要装一堆的plugin，有时候又因为不同的plugin的版本等问题冲突
前面介绍如何使用Maven来搭建开发环境，总体而言还算比较复杂。特别是在不同的机器上竟然有些plugin不可用，也不知道问题在那里。
所以既然是以开发Scala为主，那还是用<a href="http://scala-sbt.org">SBT</a>吧</p>

<h3 id="section-1">主要参考</h3>
<hr />
<p>直接参考<a href="http://www.scala-sbt.org/0.13/tutorial/index.html">SBT官网的Getting Started</a>并结合自己的一些实践做了下浓缩
官网已经提供中文版本了(开来中国是用Scala增长比较快的地区，另一个是美国硅谷，有兴趣可以看看google trend上关于Scala)</p>

<p>该Getting Started有几章可以暂时不用看的，到真的有需要再看
- Scope
- Multi-project builds
- Custom settings and tasks
- .scala build definition</p>

<p>另外在Github上有个<a href="https://github.com/n8han/giter8">giter8，简称g8</a>的工具，可以帮助获取scala, sbt的模版，不过自从有了<a href="http://typesafe.com/get-started">typesafe的activator</a>后，提供g8模版已经不多了，原有的模版也没怎么更新了</p>

<h4 id="sbt">安装SBT</h4>
<p>可以根据SBT官网的Getting Started，对于不同的平台采用不同的安装方式
安装完后，基本上就是一个sbt的命令脚本和sbt-launch.jar
安装完后，通过命令行运行一次<code>sbt</code>，然后sbt会将对应的依赖包下载下来。
sbt会在用户的home目录下创建.sbt和.ivy2的目录，依赖包都放在了ivy2的目录里。因为sbt实际是通过ivy2来管理包依赖。不过大家不用去看ivy2，这些都是sbt自己管理的。
如果是公司有代理的环境中，则需要设置java代理的参数才可以使用，不然sbt总是在尝试下载依赖包。
一般设置java代理的参数是在shell的文件中设置JAVA_OPTS,但是好像不其作用。所以最好的方式是直接修改sbt的命令脚本增加代理配置参数</p>

<p><code>sh
JAVA_OPTS="$JAVA_OPTS -Dhttp.proxyHost=&lt;proxy host&gt; -Dhttp.proxyPort=&lt;proxy port&gt; -Dhttps.proxyHost=&lt;proxy host&gt; -Dhttps.proxyPort=&lt;proxy port&gt;"
</code></p>

<h4 id="scalajava">建立一个scala/java工程</h4>
<p>建议不要从参考SBT官网的Getting Started的hello world，因为它将源文件建在了工程的根目录上了
很奇怪，到目前位置都没有个一个像maven那样可以直接在Eclipse上创建一个sbt的工程，而必须先手工创建一些文件</p>

<p>具体步骤为：</p>

<ul>
  <li>创建一个工程目录如： sbt-sample</li>
  <li>在工程目录下再创建一个子目录，必须名为project</li>
  <li>在工程目录下创建名为build.sbt的定义文件，并写入基本的信息，需要注意的是每个配置都要空一行。以后打开别人的工程先看看这个文件的基本定义，特比是scala的版本</li>
</ul>

<p>``` sh
name := “sbt-sample”</p>

<p>version := “1.0”</p>

<p>scalaVersion := “2.11.4”</p>

<p>organization := “org.duff”
```
- 使用<a href="https://github.com/typesafehub/sbteclipse">sbteclpise</a>插件， 在project子目录下创建一个plugins.sbt文件，然后加入一下内容，然后在sbt的命令行下执行<code>eclipse</code>就可以生成对应的eclipse的工程了。如果改动了sbt的文件则最后重新执行一次<code>eclipse</code>获得最新的包依赖等</p>

<p><code>sh
addSbtPlugin("com.typesafe.sbteclipse" % "sbteclipse-plugin" % "2.5.0")
</code></p>

<ul>
  <li>打开Eclipse，写个测试的App</li>
</ul>

<p>``` java
package org.duff.sbtsample</p>

<p>object Main extends App{</p>

<p>println(“this is a sbt sample”)</p>

<p>}</p>

<p>```</p>

<ul>
  <li>
    <p>在sbt命令行下执行<code>compile</code>，然后<code>run</code>就可以看到对应的输入了</p>
  </li>
  <li>
    <p>设置包依赖仓库（repository）。对于Maven是设置的Maven的conf文件中，但是对于SBT是每次定义在项目的build.sbt文件中</p>

    <ul>
      <li>方法一： 通过URL定义如： <code>resolvers += "&lt;rep name&gt;" at "&lt;rep url&gt;"</code></li>
    </ul>
  </li>
</ul>

<p><code>sh
resolvers += 
  "Sonatype OSS Snapshots" at "https://oss.sonatype.org/content/repositories/snapshots"
</code></p>

<ul>
  <li>
    <p>方法二： 使用<a href="http://www.scala-sbt.org/0.13/docs/Resolvers.html">预定义的Rep</a>，主要有：</p>

    <ul>
      <li>DefaultMavenRepository at  https://repo1.maven.org/maven2/，这个会被默认使用，无需指定</li>
      <li>JavaNet1Repository  at http://download.java.net/maven/1/</li>
      <li>Resolver.sonatypeRepo(“public”) (or “snapshots”, “releases”) at https://oss.sonatype.org/content/repositories/public</li>
      <li>Resolver.typesafeRepo(“releases”) (or “snapshots”) at https://repo.typesafe.com/typesafe/releases</li>
      <li>Resolver.typesafeIvyRepo(“releases”) (or “snapshots”) at https://repo.typesafe.com/typesafe/ivy-releases</li>
      <li>Resolver.sbtPluginRepo(“releases”) (or “snapshots”) at https://repo.scala-sbt.org/scalasbt/sbt-plugin-releases</li>
      <li>Resolver.bintrayRepo(“owner”, “repo”) at https://dl.bintray.com/[owner]/[repo]/</li>
      <li>Resolver.jcenterRepo at https://jcenter.bintray.com/</li>
    </ul>
  </li>
</ul>

<p><code>sh
resolvers += JavaNet1Repository
</code></p>

<ul>
  <li>方法三：同时指定多个rep，使用<code>resolvers ++= Seq(&lt;rep1&gt;, &lt;rep2&gt;)</code>, rep1/rep2可以使用方法一或方法二</li>
</ul>

<p><code>sh
resolvers ++= Seq(Resolver.sonatypeRepo("public"),
    Resolver.typesafeRepo("releases"))
</code></p>

<ul>
  <li>指定工程依赖包，和resolver类似，可以一个一个指定(+=)，也可以同时指定(++= Seq())，另外如果需要对多个包使用同一个变量指定如scala版本等，则可以使用如下例子的方式(即Scala的闭包)</li>
</ul>

<p><code>
libraryDependencies ++= {
  val akkaVersion       = "2.3.9"
  val sprayVersion      = "1.3.2"
  Seq(
    "com.typesafe.akka" %% "akka-slf4j"      % akkaVersion withSources() withJavadoc(),
    "ch.qos.logback"    %  "logback-classic" % "1.1.2",
    "com.typesafe.akka" %% "akka-testkit"    % akkaVersion   % "test",
    "org.scalatest"     %% "scalatest"       % "2.2.0"       % "test" withSources() withJavadoc()
  )
}
</code>
   - 每个lib的定义格式为 <code>&lt;groupID&gt; % &lt;artifactID&gt; % &lt;revision&gt; % configuration</code>。如上面的 ch.qos.logback，默认情况下都是”compile”的配置，而对于scalatest是指定在”test”的时候才使用
   - 如果artifactID是根据scala的版本有不同的版本则可以简化的使用%%的方式省去指定xxx_2.11.4 (使用scala 2.11.4)而是直接写xxx
   - 需要同时下载javadoc和source，则可以在最后用withSources() withJavadoc()</p>

<ul>
  <li>
    <p>更改完后，如果还在sbt命令行下，则可以运行<code>reload</code>来更新相应的配置</p>
  </li>
  <li>
    <p>打包程序，如果使用的不同的framework/toolkit，则有不同的打包方式，一般的打包方式是打成大的jar包</p>

    <ul>
      <li>配置打包plugin，在project子目录中增加一个名为assembly.sbt的文件，增加以下内容</li>
    </ul>
  </li>
</ul>

<p><code>
addSbtPlugin("com.eed3si9n" % "sbt-assembly" % "0.12.0")
</code>
   - 然后就可以在sbt命令行下执行<code>assembly</code>，则可以打包出jar文件了。可以在子目录target/scala-2.11/下找到这个jar
   - 通过执行<code>java -jar &lt;xxx.jar&gt;</code>来执行程序
   - 可以通过在build.sbt中增加以下配置更改打包jar</p>

<pre><code>   - `ssemblyJarName in assembly := "&lt;xxxx.jar&gt;"` 更改打包的jar文件名
   - `mainClass in assembly := Some("&lt;com.example.Main&gt;")` 更改main函数的入库
   - 如果像用工程的版本号来合成打包文件，则可以这样写 `assemblyJarName in assembly := "&lt;name&gt;" + version.value +".jar"`
</code></pre>

<p>到此一个就本的sbt的scala开发环境就建成了。
后续不同的项目的变化基本上就集中在增加新的依赖包，增加不同的plugin来执行不同的任务
个人使用看来，对比maven相对而言要简单一些。只是SBT使用场景基本只局限于java和scala，同时sbt的写法是scala语法</p>

]]></content>
  </entry>
  
</feed>
