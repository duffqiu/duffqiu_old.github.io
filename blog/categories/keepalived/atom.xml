<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Keepalived | Duff Qiu's Blog]]></title>
  <link href="http://duffqiu.github.io/blog/categories/keepalived/atom.xml" rel="self"/>
  <link href="http://duffqiu.github.io/"/>
  <updated>2015-08-18T10:31:54+08:00</updated>
  <id>http://duffqiu.github.io/</id>
  <author>
    <name><![CDATA[Duff Qiu]]></name>
    <email><![CDATA[duffqiu@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CoreOS安装和使用Keepalived]]></title>
    <link href="http://duffqiu.github.io/blog/2015/07/05/coreos-keepalived/"/>
    <updated>2015-07-05T15:43:47+08:00</updated>
    <id>http://duffqiu.github.io/blog/2015/07/05/coreos-keepalived</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<hr />
<p>在之前的文章<a href="/blog/2015/07/05/openstack-vip/">Openstack用Keealived来实现VIP</a>介绍了如何使用Keepalived来实现VIP，但是如果使用的vm是CoreOS，所有的程序又必须运行在Docker中的话，又该如何办呢？</p>

<h3 id="section-1">解决办法</h3>
<hr />

<ul>
  <li>将Keepalived做成一个Docker的image，如果需要可以自己下载keepalived的源码编译出可执行文件。因为只是用到VIP特性，可以在编译的时候将IPVS去掉（该功能可以使用haproxy代替）。一个比较偷懒的办法是先用yum的方式安装keepalived(基于CentOS)<code>yum install keepalived</code>，然后用<code>rpm -e --nodeps keepalived</code>去掉安装的可执行文件而是用自己编译的可执行文件。不然的话就需要一个一个指定的方式来安装keepalived需要的依赖包了</li>
  <li>查看CoreOS的内核是否已经启动ip_vs模块<code>lsmod</code>。似乎从681.2开始，默认都已经启动了，之前的版本没有默认启动</li>
  <li>如果没有启动ip_vs，则可以通过<code>sudo modprobe -a ip_vs</code>来加载</li>
  <li>使用<code>--priviliedged</code>和<code>--net=host</code>的方式来启动keepalived</li>
  <li>具体的docker file可以参考我的github上的<a href="https://github.com/duffqiu/keepalived">repo</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Openstack用Keealived来实现VIP]]></title>
    <link href="http://duffqiu.github.io/blog/2015/07/05/openstack-vip/"/>
    <updated>2015-07-05T15:34:52+08:00</updated>
    <id>http://duffqiu.github.io/blog/2015/07/05/openstack-vip</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<hr />
<p>在Openstack创建VM的时候一般都是使用DHCP的方式来分配虚拟机的IP地址。这样就会出现一个问题，每次重建VM的时候，IP地址都会被改变，从而影响外部的访问。同时如果期望有两个虚拟机同时服务一个IP接入的话，则需要用到VIP的方式来实现。</p>

<h3 id="section-1">解决办法</h3>
<hr />

<p>VIP的实现方式通常使用VRRP（Virtual Router Redundancy Protocol）协议的方式。目前开源比较通用的软件是<a href="http://keepalived.org/">Keepalived</a>，但是在Openstack的环境中，并不是在两台虚拟机安装了Keepalived就可以的。而是需要做某些配置，下面具体讲讲</p>

<ul>
  <li>在OpenStack的一个内部网络上创建一个Port，这个Port将得到一个内网的IP <code>neutron port-create --name &lt;port name&gt; &lt;internal network name&gt;</code> 。如果不知道openstack上有哪些网络可用，则可以用<code>neutron net-list</code>来查看</li>
  <li>创建一个外网可访问的floating ip。<code>neutron floatingip-create &lt;external network name&gt;</code></li>
  <li>将这个floating ip关联到这个新建的port上。 <code>neutron floatingip-associate &lt;floating ip uuid&gt; &lt;port uuid&gt;</code>。这样就可以通过外部网络访问到这个port口了。</li>
  <li>启动两台VM，然后各自配置keepalived，并且用这个内网的ip作为VIP给keepalvied使用。配置好后，似乎都没有问题了。但是始终无法访问，原因是openstack对于使用VIP有安全限制，必须认为的将这个VIP与VM关联才可以访问</li>
  <li>配置VM的allowed-address-pair。首先通过<code>nova list |grep &lt;vm identity&gt;</code>来找到自己创建的VM，然后通过<code>neutron port-list|grep &lt;vm ip&gt;</code>来找到VM port对应的uuid。通过<code>neutron port-show &lt;vm port uuid&gt;</code>来查看是否配置了allowed-address-pair。如果没有则需要更新port来支持allowed-address-pair。命令是<code>neutron port-update &lt;vm port uuid&gt; --allowed-address-pairs type=dict list=true ip_address=&lt;VIP&gt;</code></li>
</ul>

<h3 id="section-2">如何调试</h3>

<ul>
  <li>如果一切都配置好了，但是就是无法通，则可以在VM或者是Openstack对应的Computer Node上用<code>tcpdump -i &lt;net card name&gt; icmp</code>的方式开跟踪是否消息包是通的</li>
  <li><code>ip neigh |grep &lt;vip&gt;</code> 来查看<vip>对应的mac地址。然后在作为master的keepalived的机器上看看是否是这个mac地址</vip></li>
</ul>

]]></content>
  </entry>
  
</feed>
