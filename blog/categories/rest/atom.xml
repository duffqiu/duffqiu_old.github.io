<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: REST | Duff Qiu's Blog]]></title>
  <link href="http://duffqiu.github.io/blog/categories/rest/atom.xml" rel="self"/>
  <link href="http://duffqiu.github.io/"/>
  <updated>2014-04-06T11:08:20+08:00</updated>
  <id>http://duffqiu.github.io/</id>
  <author>
    <name><![CDATA[Duff Qiu]]></name>
    <email><![CDATA[duffqiu@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[如何定义一个好的REST接口3]]></title>
    <link href="http://duffqiu.github.io/blog/2014/04/06/ru-he-ding-yi-%5B%3F%5D-ge-hao-de-restjie-kou-3/"/>
    <updated>2014-04-06T10:49:35+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/04/06/ru-he-ding-yi-[?]-ge-hao-de-restjie-kou-3</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<hr />

<h3 id="section-1">解决办法</h3>
<hr />

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何定义一个好的REST接口2]]></title>
    <link href="http://duffqiu.github.io/blog/2014/03/13/ru-he-ding-yi-%5B%3F%5D-ge-hao-de-restjie-kou-2/"/>
    <updated>2014-03-13T22:06:13+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/03/13/ru-he-ding-yi-[?]-ge-hao-de-restjie-kou-2</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<hr />
<p>经过一段实践的实践，特别是需求总在变化的项目（项目开始阶段总是比较痛苦的）中，如何去管理REST接口的描述文件变得非常重要。即要美观，又要开发人员随时能看，能更新。之前写过第一篇的这个<a href="/blog/2014/03/03/ru-he-ding-yi-%5B%3F%5D-ge-hao-de-restjie-kou/">“如何定义一个好的REST接口”</a>，但是如果写到word文档中，痛苦是难以仍受的。特别是需要比较大篇幅的改动。同时开发人员也很难知道具体那些被改了，就会陷入迷茫中。</p>

<h3 id="section-1">解决办法</h3>
<hr />

<h4 id="section-2">前提条件</h4>
<ol>
  <li>前提条件1，将设计文档放在离开发最近的地方。那么当然是代码工程的地方是最进的。</li>
  <li>前提条件2，有利于跟踪变化。对于开发人员而言，当然是像代码那样跟踪最顺手了。（目前我用的是Git）</li>
  <li>尽可能足够简单</li>
</ol>

<h4 id="section-3">解决方式</h4>
<ol>
  <li>参照<a href="http://json-schema.org">JSON SCHEMA</a>的方式</li>
  <li>简化JSON SCHEMA，但依然是用JSON的方式字描述接口</li>
  <li>安装Eclipse的JSON editor plugin，可以在outline上很清晰的看到JSON的结构。当然如果是windows下也可以用notepad++的jason plugin看。不过如何是代码就在eclispe上，最好还是用eclipse的plugin</li>
  <li>
    <p>定义设计规则：</p>

    <ul>
      <li>接口文件的目录结构： <componentname>\<resourcename>\Method_&lt;create/delete/query/update&gt;.json. ComponentName：组件或模块名称，ResourceName：资源名称，最后是方法的接口文件名。举个例子：有个组件Calendar，它下面有个资源叫Event，那么操作这个资源的更新的接口文件为Method_update.json，它放在了Calendar\Event\目录下。</resourcename></componentname></li>
      <li>接口文件的层次结构。因为是基于HTTP的方式，则整个REST接口的层次结构为： </li>
    </ul>
  </li>
</ol>

<p><img class="left" src="images/rest_structure1.png" title="‘REST API First Level Structure’" ></p>

<p>其中，Revision Information用来描述文档的要点变化情况  </p>

<p><code>
{
   "Revision Information" : [
   {
      "Revision": "v0.1",
      "Section":"Whole document",
      "Change":"initialized"
   },
   {
      ...
   }
   ]
}
</code></p>

<p>description用来描述接口的说明</p>

<p><code>
{
   "description":{
    "method_description":"Create xxxxx",
    "method_direction":"xxx-&gt;yyy"
   }
}
</code></p>

<p>request描述接口的http的query parameter和request body</p>

<p>response描述接口的http的response body</p>

<p>error_list描述接口的可能的错误信息</p>

<p><code>
{
   "error_list":[
   {
      "errorCode":"91101",
      "errorMsg":"xxxx"
    },
    {
      "errorCode":"91102",
      "errorMsg":"yyyyy"
   }]
}
</code></p>

<ul>
  <li>request的层次结构</li>
</ul>

<p><img class="left" src="images/rest_structure2.png" title="‘REST API Request Structure’" >   </p>

<p><code>
{
   "request":{
  	"http_method" : "GET",
    "http_request_url":"https://www.xxxx.com/&lt;warContext&gt;/p/&lt;component&gt;/v1/&lt;resouce&gt;/{&lt;resourceId&gt;}",
    "path_parameter":{
      "&lt;resourceId&gt;":"resourceId"
    },
    "required_query_parameter":{
      "&lt;parameter1&gt;" : "xxx"
    },
    "optional_query_parameter":{
      "&lt;parameter2&gt;":"yyy"
    },
    "request_body":{
    ...
    }
   }
}
</code>
   http_method指明http调用的方法：GET/DELETE/PUT/POST<br />
   http_request_url指明http调用的URL的格式<br />
   path_parameter指明唯一索引到某个特定资源的标识<br />
   required_query_parameter必须传入的参数
   optional_query_parameter可选传入的参数
   request_body传入的JSON复杂对象</p>

<ul>
  <li>response的层次结构</li>
</ul>

<p>就是返回一个JSON的对象。这里有个BEST PRACTISE的建议，尽量返回能索引到特定资源的标识信息无论输入是否有该信息</p>

<p><code>
{
   "response":{
    "&lt;parameter1&gt;":{
      "string":"&lt;parameter1 description&gt;",
      "required":"y"
    },
    "&lt;parameter2&gt;":{
      "integer":"&lt;parameter2 description&gt;",
      "required":"n"
    }        
   }
}
</code></p>

<p>对于request body和response body中JSON对象的定义，不使用JSON Schema那种繁复的写法，直接参照google的方式，将parameter的类型定义为key，描述为value，然后再用”required”标识是否是必须的</p>

<h4 id="section-4">完整的例子模版</h4>

<p><code>
{  
  "Revision Information" : [
    {
      "Revision": "v0.1",
      "Section":"Whole document",
      "Change":"initialized"
    },
    {
      "Revision": "v0.2",
      "Section":"xx",
      "Change":"yyy"
    }
  ],
  "description":{
    "method_description":"query xxxxx",
    "method_direction":"xx-&gt;yyy"
  },
  "request":{
  	"http_method" : "GET",
    "http_request_url":"https://www.xxxx.com/&lt;warContext&gt;/p/&lt;component&gt;/v1/&lt;resouce&gt;/{&lt;resourceId&gt;}",
    "path_parameter":{
      "&lt;resourceId&gt;":"resourceId"
    },
    "required_query_parameter":{
      "&lt;parameter1&gt;" : "xxx"
    },
    "optional_query_parameter":{
      "&lt;parameter2&gt;":"yyy"
    },
    "request_body":{
    }
  },
  "response":{
    "&lt;parameter1&gt;":{
      "string":"&lt;parameter1 description&gt;",
      "required":"y"
    },
    "&lt;parameter2&gt;":{
      "integer":"&lt;parameter2 description&gt;",
      "required":"n"
    }        
  },
  "error_list":[
    {
      "errorCode":"xx1",
      "errorMsg":"yyyy"
    },
    {
      "errorCode":"xx2",
      "errorMsg":"yyyy"
    }
  ]
}
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何定义一个好的REST接口]]></title>
    <link href="http://duffqiu.github.io/blog/2014/03/03/ru-he-ding-yi-%5B%3F%5D-ge-hao-de-restjie-kou/"/>
    <updated>2014-03-03T21:25:32+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/03/03/ru-he-ding-yi-[?]-ge-hao-de-restjie-kou</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<hr />
<p>现在<a href="http://www.json.org">基于JSON的REST接口</a>使用的是越来越多了，但是在自己去定义JSON的REST API的时候，我们确难免遇到不少疑惑，以下我们来谈谈这些疑惑 </p>

<h3 id="rcp-based-or-rest-based">RCP-BASED or REST-BASED</h3>
<hr />

<p>在接口定义上，我们以往一般都是去定义请求什么，然后响应是什么，这就是典型的RPC(Remote Procedure Call)接口的定义方式。一般可以使用IDL（Interface Description Language，IDL）的方式来描述，如典型的WSDL等。RPC我的理解是，更多的是描述响应端提供什么样的行为给请求端调用。响应端会提供一个服务接入端点(End Point)，依据请求来返回响应。</p>

<p>对于REST-BASED的接口定义，通常针对的是响应端提供什么样的资源给客户端使用。这里有一个很重要的特点是，所有的行为都是围绕“资源”来进行的。主要有：</p>

<ul>
  <li>GET  获取资源(可以是一个或多个)</li>
  <li>PUT  更新资源，PUT方法有个很重要的特性就是多次调用，结果是一直的。</li>
  <li>POST 创建资源，这个方法不是幂等</li>
  <li>DELETE 删除资源 </li>
</ul>

<p>对于每个操作的返回都是基于同一个资源描述，只是不同的方法，资料描述里的某些内容被省略了。</p>

<p>其实对于使用JSON在RPC-Based上还是REST-Based都可以。接口定义成RPC-Based上还是REST-Based没有绝对的好坏，而是根据实际的使用场景。简单来说就是如果可以能被描述成“资源”(如：用户账户、购物车等等)，则用REST-Based更合适，如果是需要执行某些动作(如：发送邮件等)则RPC-Based更合适。</p>

<h3 id="rest-based-best-practice">REST-BASED BEST PRACTICE</h3>

<p>如果使用REST-Based，建议可以参考<a href="https://developers.google.com/google-apps/calendar/v3/reference/">Google Canlendar的API定义</a>。主要的要点如下：</p>

<ol>
  <li>确定什么是资源(如calendar, event…)以及资源的表述</li>
</ol>

<p>例如：</p>

<p><code>
{
  "id": string,
  "summary": string,
  "description": string,
  "location": string,
  "timeZone": string,
  "summaryOverride": string,
  "colorId": string,
  "backgroundColor": string,
  "foregroundColor": string,
  "hidden": boolean,
  "selected": boolean,
  "accessRole": string,
  "defaultReminders": [
    {
      "method": string,
      "minutes": integer
    }
  ],
  "primary": boolean
}
</code></p>

<ol>
  <li>
    <p>列举每个资源能提供的操作简要</p>

    <table>
      <thead>
        <tr>
          <th>Method</th>
          <th>HTTP request</th>
          <th>Description</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>delete</td>
          <td>DELETE  /calendars/calendarId/acl/ruleId</td>
          <td>Deletes an access control rule.</td>
        </tr>
        <tr>
          <td>get</td>
          <td>GET  /calendars/calendarId/acl/ruleId</td>
          <td>Returns an access control rule.</td>
        </tr>
        <tr>
          <td>insert</td>
          <td>POST  /calendars/calendarId/acl</td>
          <td>Creates an access control rule.</td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>
    <p>详细描述每个资源操作</p>

    <ul>
      <li>http request形式，如</li>
    </ul>

    <p><code>
POST https://www.googleapis.com/calendar/v3/calendars/{calendarId}/clear
</code></p>

    <ul>
      <li>
        <p>http request parameter</p>

        <p>这里需要注意的是什么放在Path上，什么放在query parameter上。一般而言，一个资源的子资源放在path上，定位资源的条件放在query paramenter上</p>

        <table>
          <thead>
            <tr>
              <th>Path parameter</th>
              <th>Value</th>
              <th>Description</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>calendarId</td>
              <td>string</td>
              <td>Calendar identifier</td>
            </tr>
            <tr>
              <td>…</td>
              <td> </td>
              <td> </td>
            </tr>
          </tbody>
        </table>

        <table>
          <thead>
            <tr>
              <th>Query parameter</th>
              <th>Value</th>
              <th>Description</th>
              <th>Required?</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>…</td>
              <td> </td>
              <td> </td>
              <td> </td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <p>Authorization<br />
 定义是否需要授权</p>
      </li>
      <li>
        <p>Request Body (通常只用在Post操作上)，定义方式如下：</p>

        <table>
          <thead>
            <tr>
              <th>Property name</th>
              <th>Value</th>
              <th>Description</th>
              <th>Notes</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>email</td>
              <td>string</td>
              <td>user’s email address</td>
              <td> </td>
            </tr>
            <tr>
              <td>…</td>
              <td> </td>
              <td> </td>
              <td> </td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <p>http response representations(针对RPC的接口，如果是REST原则是公用一个resource的描述，只是不同的操作某些参数可以被忽略)，如</p>

        <p><code>
{  
"id": string,  
"status": string,  
"htmlLink": string,   
"created": datetime   
}  
</code></p>
      </li>
      <li>
        <p>http reponse parameters(对于资源描述中使用到的参数的解释)</p>

        <table>
          <thead>
            <tr>
              <th>Property name</th>
              <th>Value</th>
              <th>Description</th>
              <th>Notes</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>home address</td>
              <td>string</td>
              <td>user’s home address</td>
              <td> </td>
            </tr>
            <tr>
              <td>…</td>
              <td> </td>
              <td> </td>
              <td> </td>
            </tr>
          </tbody>
        </table>
      </li>
    </ul>
  </li>
</ol>

<h3 id="json-style-guideline">JSON Style Guideline</h3>

<p>如何编写JSON，可以参见<a href="https://google-styleguide.googlecode.com/svn/trunk/jsoncstyleguide.xml">Google JSON STYLE</a></p>

<p>主要是参考保留的定义属性名</p>

<p><code>java
object {
  string apiVersion?;
  string context?;
  string id?;
  string method?;
  object {
    string id?
  }* params?;
  object {
    string kind?;
    string fields?;
    string etag?;
    string id?;
    string lang?;
    string updated?; # date formatted RFC 3339
    boolean deleted?;
    integer currentItemCount?;
    integer itemsPerPage?;
    integer startIndex?;
    integer totalItems?;
    integer pageIndex?;
    integer totalPages?;
    string pageLinkTemplate /^https?:/ ?;
    object {}* next?;
    string nextLink?;
    object {}* previous?;
    string previousLink?;
    object {}* self?;
    string selfLink?;
    object {}* edit?;
    string editLink?;
    array [
      object {}*;
    ] items?;
  }* data?;
  object {
    integer code?;
    string message?;
    array [
      object {
        string domain?;
        string reason?;
        string message?;
        string location?;
        string locationType?;
        string extendedHelp?;
        string sendReport?;
      }*;
    ] errors?;
  }* error?;
}*;
</code></p>

<h3 id="section-1">接口定义模版参考</h3>

<p><a href="">REST JSON API模版</a></p>
]]></content>
  </entry>
  
</feed>
