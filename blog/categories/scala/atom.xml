<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Scala | Duff Qiu's Blog]]></title>
  <link href="http://duffqiu.github.io/blog/categories/scala/atom.xml" rel="self"/>
  <link href="http://duffqiu.github.io/"/>
  <updated>2015-07-13T19:17:27+08:00</updated>
  <id>http://duffqiu.github.io/</id>
  <author>
    <name><![CDATA[Duff Qiu]]></name>
    <email><![CDATA[duffqiu@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Scala作为脚本语言动态执行]]></title>
    <link href="http://duffqiu.github.io/blog/2015/03/03/scala-script/"/>
    <updated>2015-03-03T17:05:37+08:00</updated>
    <id>http://duffqiu.github.io/blog/2015/03/03/scala-script</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<hr />
<p>通常我们设计程序的时候都会分为3个层面，MVC是最通用的分层方式。一个是展示层，一个逻辑处理层，一个存储层。但是对于逻辑处理层还可以抽象分为两个层次，一个固定逻辑层，一个动态逻辑层。
对于动态逻辑层的实现，在Java中一般可以使用JavaScript引擎来执行JavaScript脚本。在Scala的程序中也可以这样做。不过Scala增加了使用Scala语言本身作为scritp语言。即Scala代替Javascript。
在2.11的REPL中可以这样做了，参见<a href="/blog/2015/03/02/scala211-overview/">Scala2.11Overview</a>
那么在代码中如何做呢？找了半天都没有找到官方的例子，尝试的过程中不是发现Null Point Exception的此错误就是说xxx Not Found (xxx是指Scala的类型，如Object, Int等)
在Junjun的提醒下，可能是ClassLoader的问题，造成script的执行找不到对应的jar包（包括Scala的标准包），因为默认情况下，ScriptEngine是在bootstrap路径下找jar包。参见<a href="http://docs.oracle.com/javase/7/docs/technotes/tools/findingclasses.html">Java如何找CLASS文件</a></p>

<h3 id="section-1">解决办法</h3>
<hr />

<ul>
  <li>先来看看原来在REPL中调用ScalaScript(尽管Script的代码依然是Scala，为了好区分这些是动态执行的Scala,暂且叫他ScalaScript)</li>
</ul>

<p><code>
import javax.script.ScriptEngineManager
val e = new ScriptEngineManager().getEngineByName("scala")
e.put("n", 10)
e.eval("1 to n.asInstanceOf[Int] foreach println")
</code></p>

<ul>
  <li>
    <p>这些代码如果直接搬到Scala程序中，然后通过<code>java -jar</code>的方式运行是回出现我前面提到的错误的</p>
  </li>
  <li>
    <p>解决方式1： 使用<code>-xXbootclasspath</code>来指定scalascript中用到的jar包，包含scala的标准包，因为bootstrao只包含了JAVA的rt.jar以及jre/lib下面的jar包。</p>
  </li>
</ul>

<p><code>
java -Xbootclasspath/a:/usr/scala-2.11.4/lib/scala-library.jar:/usr/scala-2.11.4/lib/scala-compiler.jar:/usr/scala-2.11.4/lib/scala-reflect.jar -jar  &lt;your jar file&gt;
//注意/a:/是固定的格式，具体可以查Jdk的文档
</code>
    - 但是这个方式在前面的«Java如何找CLASS文件»的文中不建议，同时使用起来也比较麻烦</p>

<ul>
  <li>解决方式2： 在代码中指定scalascript和调用程度本身使用相同的jar包，代码如下：</li>
</ul>

<p>```
import javax.script.ScriptEngineManager
import javax.script.ScriptEngine</p>

<p>val m = new ScriptEngineManager()
val engine = m.getEngineByName(“scala”)</p>

<p>//需要设计的属性
val settings = engine.asInstanceOf[scala.tools.nsc.interpreter.IMain].settings
settings.usejavacp.value = true  //使用程序的class path作为engine的class path</p>

<p>engine.put(“m”, 10)
engine.eval(“1 to m.asInstanceOf[Int] foreach println”)
```
    - 在sbt的工程中，将scala的标准包都变成依赖包，显示指定
    - 然后通过<code>sbt assembly</code>来打包程序为胖程序（即包含所有的依赖包），<code>sbt package</code>不会包含依赖包的
    - 直接通过<code>jar -jar &lt;your jar file&gt;</code>就可以了.</p>

<h4 id="section-2">官方讨论</h4>

<p><a href="https://github.com/scala/scala/pull/2238">Scala Issue 2238</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scala211特性简介]]></title>
    <link href="http://duffqiu.github.io/blog/2015/03/02/scala211-overview/"/>
    <updated>2015-03-02T12:02:16+08:00</updated>
    <id>http://duffqiu.github.io/blog/2015/03/02/scala211-overview</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<hr />
<p>Scala语言本生的变更还是比较快的，现在最通用是2.10和2.11版本
那么是否需要用2.11版本呢？
我们来看一看2.11的一些特性。参考于<a href="http://docs.scala-lang.org/scala/2.11/">scala2.11overview</a></p>

<h3 id="scala-211">Scala 2.11特性简介</h3>
<hr />

<ul>
  <li>
    <p>更小</p>

    <ul>
      <li>Actor包被废弃，如果的需要直接用Akka的包，已经被包含在了Scala的版准语言包了</li>
      <li>XML包被移除出scala-library.jar，编程了一个独立的包，如需要可以加入如下依赖 <code>libraryDependencies += "org.scala-lang.modules" %% "scala-xml" % "1.0.3"</code></li>
    </ul>
  </li>
  <li>更快: 提高了性能</li>
  <li>
    <p>更强</p>

    <ul>
      <li>语言：支持case class的参数多于22个参数(参见：<a href="https://issues.scala-lang.org/browse/SI-7296">1</a>)</li>
      <li>语言：增强类型推断。(不过好像这个问题又被打开了, 参见<a href="https://issues.scala-lang.org/browse/SI-1786">2</a>)</li>
      <li>REPL: 这个增强了很多项， 不一一举例了，下面是一些我个人觉得有用的。</li>
    </ul>
  </li>
</ul>

<p><code>
scala&gt; :settings &lt;+/-&gt; &lt;flag&gt;
//这个主要是针对在REPL中提示有warning的时候，需要使用某些启动参数。原来的方式是需要退出REPL然后再用指定参数启动。现在可以直接通过这个名利来激活(+)/去除(-)某个特性(flag)，如显示deprecation，则用":settings + deprecation"
</code></p>

<pre><code>- REPL: 支持script引擎 (我个人没有用过scala下的script引擎，不知道。后面再写个如何在[代码中动态执行Scala](/blog/2015/03/03/scala-script/))
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sublime入门以及搭建scala开发环境]]></title>
    <link href="http://duffqiu.github.io/blog/2015/02/25/sublime-startup/"/>
    <updated>2015-02-25T14:49:46+08:00</updated>
    <id>http://duffqiu.github.io/blog/2015/02/25/sublime-startup</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<hr />
<p>Sublime号称是神级编辑器，同时支持多种插件的扩展。并且支持多个平台。
这里主要讲以下如何安装和配置，并说明一下如何使用scala插件来搭建开发环境，
避免使用其他的IDE这么重的工具，节约内存和系统消耗</p>

<h3 id="sublime">sublime使用入门</h3>
<hr />

<ul>
  <li>
    <p>安装sublime
可以直接从<a href="http://www.sublimetext.com/">sublime官网</a>下载对应的版本安装
这里针对不同的系统的配置的文件的路径如下：</p>

    <ul>
      <li>Mac OSX: <code>~/Library/Library/Application Support/Sublime Text 3</code></li>
      <li>Linux CentOS7: <code>~/.config/sublime-text-3</code></li>
    </ul>
  </li>
</ul>

<p>Mac OSX有对应的dmg安装包，一部一部安装就可以
CentOS7没有安装包，需要下载压缩包，4然后解压到<code>/opt/sublime-text</code>目录(注意要把名字中的3去掉)，然后将目录中的sublime_text.desktop复制到<code>/usr/share/applications</code>，这样在CentOS的启动菜单上就对应的图表了</p>

<ul>
  <li>
    <p>安装包管理插件Package Control</p>

    <ul>
      <li>最先要安装的是插件<a href="https://packagecontrol.io/installation">管理工具Package Control</a>: 下载插件包，然后放到配置路径的Installed Packages目录下就可以了。</li>
      <li>每次通过<code>shift+Ctrl+P</code>来打开命令板选择“Package Control: Install Package”来安装插件</li>
    </ul>
  </li>
  <li>
    <p>安装scala插件SublimeREPL</p>

    <ul>
      <li><code>shift+Ctrl+P</code>来打开命令板选择“Package Control: Install Package”，然后选择SublimeREPL</li>
      <li>安装成功后就可以在命令板中选择对应的scala/sbt来打开scala REPL和sbt REPL了</li>
      <li>配置： 有可能你安装sbt/scala的目录不同，造成无法打开scala REPL和sbt REPL，这个时候需要手工配置一下。在配置的文件的路径下找到<code>Packages/SublimeREPL/config/Scala</code>目录下的Main.sublime-menu文件，编辑该文件，为对应的scala和sbt指定好对应的目录就可以了</li>
      <li>使用：对于SublimeREPL:scala只是打开了scala REPL，用处不大，可以使用下面的scala worksheet插件代替。但是对于SublimeREPL:sbt则比较有用。方式是通过sublime先打开sbt的工程的目录，然后在命令板执行SublimeREPL:SBT for opened folder。不过还有更方便的插件SbblimeSBT</li>
    </ul>
  </li>
  <li>
    <p>安装scala worksheet插件</p>

    <ul>
      <li><code>shift+Ctrl+P</code>来打开命令板选择“Package Control: Install Package”，然后选择Scala Worksheet</li>
      <li>安装成功后就可以在命令板中选择对应的show scala worksheet了。</li>
      <li>使用方式是编写对应的scala文件并保存后，再执行show scala worksheet，这样scala REPL就自动会执行你编辑的文件了。</li>
      <li>有可能在打开show scala worksheet出现无法找到scala的无法，简单的解决方式是在1<code>/usr/bin</code>下给scala建立一个soft link <code>sudo ln &lt;scala install path&gt; /usr/bin/scala</code></li>
      <li>如果需要给Scala worksheet增加额外的jar包，则需要配置Sublime中的setting。<code>preferences-&gt;Settings - User</code>，然后增加一个JSON key: (注意不要用相对路径，要用绝对路径)</li>
    </ul>
  </li>
</ul>

<p><code>
	"scala_worksheet_classpath":
	[
		"&lt;jar path&gt;/&lt;jar name&gt;"
	]
</code></p>

<ul>
  <li>
    <p>安装SublimeSBT插件</p>

    <ul>
      <li><code>shift+Ctrl+P</code>来打开命令板选择“Package Control: Install Package”，然后选择SublimeSBT</li>
      <li>使用：shift+Ctrl+P`来打开命令板选择SBT: xxx来运行对应的sbt命令</li>
    </ul>
  </li>
  <li>
    <p>给对应的scala sbt项目配置SBT插件：sbt-sublime </p>

    <ul>
      <li>在project/plugin.sbt中增加<code>addSbtPlugin("com.orrsella" % "sbt-sublime" % "1.0.9")</code></li>
      <li>在sbt console中调用<code>gen-sublime</code>来获取依赖包的源文件以及生成sublime的工程文件（每次SBT Clean都会自动删除这些文件。）。这样也节约了需要在每一个依赖包的定义后面增加withSource的选项</li>
      <li>使用步骤1： 在sublime中， project-&gt;open project来打开生成sublime的工程文件，这个时候将会将SBT的工程目录加载进来，同时多了一个External Libraries的目录（其存放了依赖包的源代码）</li>
      <li>使用步骤2： 使用SublimeSBT插件调用SBT: Start continus compiling，这样每次更改源文件都会被自动编译。如果发现错误，则Sublime会自动提示在那一行代码上</li>
      <li>使用步骤3： 因为引入了依赖包的源代码，则可以通过在sublime中的Goto菜单来调转到指定的类/方法的源文件处(仅Sublime Text 3支持)</li>
      <li>使用步骤4： 使用Snippet：case class…等来协助快速编写代码（但是不知道是上面哪个插件体提供的了）</li>
    </ul>
  </li>
  <li>
    <p>使用Git插件，在“Package Control: Install Package”中选择Git就可以了，然后在命令板选择对应的Git:xxx命令就可如Git status。</p>
  </li>
</ul>

<p>Sublime搭建Scala开发环境小结：
    - 总体而言还是不错，运行速度又快，基本的功能都有
    - 但是唯一的遗憾是没有办法在编写代码的时候自动提示可能的方法/类等</p>

<h4 id="section-1">小提示</h4>
<p>对于sublime text 3的最新版本在linus下无法使用ibus的输入法，所以编写这个blog的时候我又回到了gedit
从这个对比来看，linus和mac osx从个人用户的使用来看还是差很远的</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[初学sbt]]></title>
    <link href="http://duffqiu.github.io/blog/2015/02/10/sbt-for-new-user/"/>
    <updated>2015-02-10T15:22:32+08:00</updated>
    <id>http://duffqiu.github.io/blog/2015/02/10/sbt-for-new-user</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<hr />
<p>初学一种语言最烦的就是搭建开发环境了，每次都要装一堆的plugin，有时候又因为不同的plugin的版本等问题冲突
前面介绍如何使用Maven来搭建开发环境，总体而言还算比较复杂。特别是在不同的机器上竟然有些plugin不可用，也不知道问题在那里。
所以既然是以开发Scala为主，那还是用<a href="http://scala-sbt.org">SBT</a>吧</p>

<h3 id="section-1">主要参考</h3>
<hr />
<p>直接参考<a href="http://www.scala-sbt.org/0.13/tutorial/index.html">SBT官网的Getting Started</a>并结合自己的一些实践做了下浓缩
官网已经提供中文版本了(开来中国是用Scala增长比较快的地区，另一个是美国硅谷，有兴趣可以看看google trend上关于Scala)</p>

<p>该Getting Started有几章可以暂时不用看的，到真的有需要再看
- Scope
- Multi-project builds
- Custom settings and tasks
- .scala build definition</p>

<p>另外在Github上有个<a href="https://github.com/n8han/giter8">giter8，简称g8</a>的工具，可以帮助获取scala, sbt的模版，不过自从有了<a href="http://typesafe.com/get-started">typesafe的activator</a>后，提供g8模版已经不多了，原有的模版也没怎么更新了</p>

<h4 id="sbt">安装SBT</h4>
<p>可以根据SBT官网的Getting Started，对于不同的平台采用不同的安装方式
安装完后，基本上就是一个sbt的命令脚本和sbt-launch.jar
安装完后，通过命令行运行一次<code>sbt</code>，然后sbt会将对应的依赖包下载下来。
sbt会在用户的home目录下创建.sbt和.ivy2的目录，依赖包都放在了ivy2的目录里。因为sbt实际是通过ivy2来管理包依赖。不过大家不用去看ivy2，这些都是sbt自己管理的。
如果是公司有代理的环境中，则需要设置java代理的参数才可以使用，不然sbt总是在尝试下载依赖包。
一般设置java代理的参数是在shell的文件中设置JAVA_OPTS,但是好像不其作用。所以最好的方式是直接修改sbt的命令脚本增加代理配置参数</p>

<p><code>sh
JAVA_OPTS="$JAVA_OPTS -Dhttp.proxyHost=&lt;proxy host&gt; -Dhttp.proxyPort=&lt;proxy port&gt; -Dhttps.proxyHost=&lt;proxy host&gt; -Dhttps.proxyPort=&lt;proxy port&gt;"
</code></p>

<h4 id="scalajava">建立一个scala/java工程</h4>
<p>建议不要从参考SBT官网的Getting Started的hello world，因为它将源文件建在了工程的根目录上了
很奇怪，到目前位置都没有个一个像maven那样可以直接在Eclipse上创建一个sbt的工程，而必须先手工创建一些文件</p>

<p>具体步骤为：</p>

<ul>
  <li>创建一个工程目录如： sbt-sample</li>
  <li>在工程目录下再创建一个子目录，必须名为project</li>
  <li>在工程目录下创建名为build.sbt的定义文件，并写入基本的信息，需要注意的是每个配置都要空一行。以后打开别人的工程先看看这个文件的基本定义，特比是scala的版本</li>
</ul>

<p>``` sh
name := “sbt-sample”</p>

<p>version := “1.0”</p>

<p>scalaVersion := “2.11.4”</p>

<p>organization := “org.duff”
```
- 使用<a href="https://github.com/typesafehub/sbteclipse">sbteclpise</a>插件， 在project子目录下创建一个plugins.sbt文件，然后加入一下内容，然后在sbt的命令行下执行<code>eclipse</code>就可以生成对应的eclipse的工程了。如果改动了sbt的文件则最后重新执行一次<code>eclipse</code>获得最新的包依赖等</p>

<p><code>sh
addSbtPlugin("com.typesafe.sbteclipse" % "sbteclipse-plugin" % "2.5.0")
</code></p>

<ul>
  <li>打开Eclipse，写个测试的App</li>
</ul>

<p>``` java
package org.duff.sbtsample</p>

<p>object Main extends App{</p>

<p>println(“this is a sbt sample”)</p>

<p>}</p>

<p>```</p>

<ul>
  <li>
    <p>在sbt命令行下执行<code>compile</code>，然后<code>run</code>就可以看到对应的输入了</p>
  </li>
  <li>
    <p>设置包依赖仓库（repository）。对于Maven是设置的Maven的conf文件中，但是对于SBT是每次定义在项目的build.sbt文件中</p>

    <ul>
      <li>方法一： 通过URL定义如： <code>resolvers += "&lt;rep name&gt;" at "&lt;rep url&gt;"</code></li>
    </ul>
  </li>
</ul>

<p><code>sh
resolvers += 
  "Sonatype OSS Snapshots" at "https://oss.sonatype.org/content/repositories/snapshots"
</code></p>

<ul>
  <li>
    <p>方法二： 使用<a href="http://www.scala-sbt.org/0.13/docs/Resolvers.html">预定义的Rep</a>，主要有：</p>

    <ul>
      <li>DefaultMavenRepository at  https://repo1.maven.org/maven2/，这个会被默认使用，无需指定</li>
      <li>JavaNet1Repository  at http://download.java.net/maven/1/</li>
      <li>Resolver.sonatypeRepo(“public”) (or “snapshots”, “releases”) at https://oss.sonatype.org/content/repositories/public</li>
      <li>Resolver.typesafeRepo(“releases”) (or “snapshots”) at https://repo.typesafe.com/typesafe/releases</li>
      <li>Resolver.typesafeIvyRepo(“releases”) (or “snapshots”) at https://repo.typesafe.com/typesafe/ivy-releases</li>
      <li>Resolver.sbtPluginRepo(“releases”) (or “snapshots”) at https://repo.scala-sbt.org/scalasbt/sbt-plugin-releases</li>
      <li>Resolver.bintrayRepo(“owner”, “repo”) at https://dl.bintray.com/[owner]/[repo]/</li>
      <li>Resolver.jcenterRepo at https://jcenter.bintray.com/</li>
    </ul>
  </li>
</ul>

<p><code>sh
resolvers += JavaNet1Repository
</code></p>

<ul>
  <li>方法三：同时指定多个rep，使用<code>resolvers ++= Seq(&lt;rep1&gt;, &lt;rep2&gt;)</code>, rep1/rep2可以使用方法一或方法二</li>
</ul>

<p><code>sh
resolvers ++= Seq(Resolver.sonatypeRepo("public"),
    Resolver.typesafeRepo("releases"))
</code></p>

<ul>
  <li>指定工程依赖包，和resolver类似，可以一个一个指定(+=)，也可以同时指定(++= Seq())，另外如果需要对多个包使用同一个变量指定如scala版本等，则可以使用如下例子的方式(即Scala的闭包)</li>
</ul>

<p><code>
libraryDependencies ++= {
  val akkaVersion       = "2.3.9"
  val sprayVersion      = "1.3.2"
  Seq(
    "com.typesafe.akka" %% "akka-slf4j"      % akkaVersion withSources() withJavadoc(),
    "ch.qos.logback"    %  "logback-classic" % "1.1.2",
    "com.typesafe.akka" %% "akka-testkit"    % akkaVersion   % "test",
    "org.scalatest"     %% "scalatest"       % "2.2.0"       % "test" withSources() withJavadoc()
  )
}
</code>
   - 每个lib的定义格式为 <code>&lt;groupID&gt; % &lt;artifactID&gt; % &lt;revision&gt; % configuration</code>。如上面的 ch.qos.logback，默认情况下都是”compile”的配置，而对于scalatest是指定在”test”的时候才使用
   - 如果artifactID是根据scala的版本有不同的版本则可以简化的使用%%的方式省去指定xxx_2.11.4 (使用scala 2.11.4)而是直接写xxx
   - 需要同时下载javadoc和source，则可以在最后用withSources() withJavadoc()</p>

<ul>
  <li>
    <p>更改完后，如果还在sbt命令行下，则可以运行<code>reload</code>来更新相应的配置</p>
  </li>
  <li>
    <p>打包程序，如果使用的不同的framework/toolkit，则有不同的打包方式，一般的打包方式是打成大的jar包</p>

    <ul>
      <li>配置打包plugin，在project子目录中增加一个名为assembly.sbt的文件，增加以下内容</li>
    </ul>
  </li>
</ul>

<p><code>
addSbtPlugin("com.eed3si9n" % "sbt-assembly" % "0.12.0")
</code>
   - 然后就可以在sbt命令行下执行<code>assembly</code>，则可以打包出jar文件了。可以在子目录target/scala-2.11/下找到这个jar
   - 通过执行<code>java -jar &lt;xxx.jar&gt;</code>来执行程序
   - 可以通过在build.sbt中增加以下配置更改打包jar</p>

<pre><code>   - `ssemblyJarName in assembly := "&lt;xxxx.jar&gt;"` 更改打包的jar文件名
   - `mainClass in assembly := Some("&lt;com.example.Main&gt;")` 更改main函数的入库
   - 如果像用工程的版本号来合成打包文件，则可以这样写 `assemblyJarName in assembly := "&lt;name&gt;" + version.value +".jar"`
</code></pre>

<p>到此一个就本的sbt的scala开发环境就建成了。
后续不同的项目的变化基本上就集中在增加新的依赖包，增加不同的plugin来执行不同的任务
个人使用看来，对比maven相对而言要简单一些。只是SBT使用场景基本只局限于java和scala，同时sbt的写法是scala语法</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scala中函数式编程还是命令式编程]]></title>
    <link href="http://duffqiu.github.io/blog/2015/02/05/fp-or-imperative-with-scala/"/>
    <updated>2015-02-05T11:44:46+08:00</updated>
    <id>http://duffqiu.github.io/blog/2015/02/05/fp-or-imperative-with-scala</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<hr />
<p>Scala是即支持传统的命令式编程也支持函数式编程(FP)，我们既可以像java那样写代码，也可以像Lisp那样写。
但是那种好呢？</p>

<h3 id="section-1">解决办法</h3>
<hr />
<p>个人的理解是，主要取决于对问题的解决方式的思路。
如果已经习惯了命令式编程的思路，那就用命令式编程好了。
不过既然FP已经逐渐成为潮流，那换换思路也未尝不可。
从Scala语言本身看两者没有冲突</p>

<h3 id="section-2">一个例子来对比两种思路</h3>
<hr />

<p>例子：有一个Map的数组/列表，要将不同Map中相同key的value值相加，最后得到一个Map</p>

<p><code>java
Vector(Map("test" -&gt; 1, "hello" -&gt; 2, "wwww" -&gt; 9), Map("test" -&gt; 3, "hello" -&gt; 5, "http" -&gt; 33))
</code>
期望得到的结果</p>

<p><code>java
Map(test -&gt; 4, hello -&gt; 7, wwww -&gt; 9, http -&gt; 33)
</code></p>

<ul>
  <li>命令式编程方式
思路：循环Vector中的每个Map，然后循环Map中的每个Key-Value，将相同的Key对应的Value加起来后存入到一个临时的Map，最后返回这个Map</li>
</ul>

<p>``` java
def merge(input: Vector[Map[String, Int]]) = {</p>

<p>var mergeRes = input.head
  val temp = input.tail</p>

<p>for(itr &lt;- temp) {
  	for((word, count) &lt;- itr) {
  		mergeRes = mergeRes + (word -&gt; (mergeRes.get(word).getOrElse(0) + count))
  	}
  }</p>

<p>mergeRes
}
```</p>

<ul>
  <li>函数式编程方式
思路：对于Vector作折叠操作(reduceLeft)，因为每此计算都要以上一次计算作为输入。而计算中需要做的操作由使用者控制。同时对于每个Map都需要操作每个key-value并返回新的key-value所以用到map函数</li>
</ul>

<p><code>java
  def mergeFP(input: Vector[Map[String, Int]]) = {
    input.reduceLeft {
      (el, acc) =&gt;
        el.map {
          case (word, count) =&gt;
            acc.get(word).map(accCount =&gt; (word -&gt; (accCount + count))).getOrElse(word -&gt; count)
        } ++ (acc -- el.keys)
    }
  }
</code></p>

<p>从两者的对比俩看，如果不是熟悉FP的思路的化，似乎FP的代码更难看些。这也是为什么有人认为FP不利于代码沟通的原因吧。
但是从FP的实现看，中间没有任何可变变量（其实Scala对于reduceLeft用了中间可变变量，只是对于函数的使用者不需要了）</p>

<p><strong>注</strong> 改FP的例子载自Akka in Action，但是它的是foldLeft不是reduceLeft</p>

]]></content>
  </entry>
  
</feed>
