<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Design Pattern | Duff Qiu's Blog]]></title>
  <link href="http://duffqiu.github.io/blog/categories/design-pattern/atom.xml" rel="self"/>
  <link href="http://duffqiu.github.io/"/>
  <updated>2014-02-04T21:23:50+08:00</updated>
  <id>http://duffqiu.github.io/</id>
  <author>
    <name><![CDATA[Duff Qiu]]></name>
    <email><![CDATA[duffqiu@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[设计模式: 单例模式]]></title>
    <link href="http://duffqiu.github.io/blog/2014/02/03/she-ji-mo-shi-dan-li-mo-shi/"/>
    <updated>2014-02-03T17:47:12+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/02/03/she-ji-mo-shi-dan-li-mo-shi</id>
    <content type="html"><![CDATA[<h3 id="section">单例模式原理</h3>

<ol>
  <li>模式名称：单例模式(Singleton Pattern)</li>
  <li>问题：需要确保系统中的某个类只能有一个实例存在。现实中如序号ID分配器，确保ID在系统中必须是唯一的。(当然也有很多方式生成唯一ID，这里只是个例子)</li>
  <li>解决方案：限制类被new出来，只能通过唯一的访问点（static方法）获得一个全局的自身的实例。这个访问点确保实例不会被多次创建</li>
  <li>结论：通过唯一访问点有效的控制实例的生成</li>
</ol>

<h3 id="singleton">简单的Singleton</h3>

<pre><code><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Singleton</span> <span class="o">{</span>
</span><span class='line'>	<span class="kd">private</span> <span class="kd">static</span> <span class="n">Singleton</span> <span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Singleton</span><span class="o">();</span>
</span><span class='line'>	<span class="c1">//public staic Singleton INSTANCE = new Singleton(); //not suggest</span>
</span><span class='line'>	
</span><span class='line'>
</span><span class='line'>    <span class="c1">//must make the default create menthod private</span>
</span><span class='line'>    <span class="kd">private</span> <span class="nf">Singleton</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">staic</span> <span class="n">Singleton</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//....</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</code></pre>

<p>这里有几点注意：</p>

<ol>
  <li>默认的构造函数要设置为private，避免类被错误的new出来</li>
  <li>尽量用方法的方式获取类的实例    </li>
  <li>如果构造过程表负责，则需要用static{…}方式阔起来</li>
  <li>成员变量和单例控制函数都应该是static</li>
</ol>

<h3 id="section-1">延迟初始化</h3>

<p>根据<a href="">Effective Java</a>中的第55条，除非真的有必要，不然不用延迟初始化<br />
延迟初始化一定要考虑多线程安全的问题</p>

<p>使用<strong>Initialization on demand holder</strong>方式来控制延迟初始化</p>

<p>在单例中，变量是static的，使用Lazy Holder的方式根据需要创建这个静态变量，同时由JVM来保证线程并发问题。</p>

<pre><code><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LazySingleton</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="nf">LazySingleton</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">//避免被new</span>
</span><span class='line'>    <span class="c1">//....</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">LazyHolder</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">LazySingleton</span> <span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LazySingleton</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">LazySingleton</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">LazyHolder</span><span class="o">.</span><span class="na">instance</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//....</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

File /Users/macbook/Documents/Git/octopress/source/downloads/code/https://github.com/duffqiu/DesignPatternDemo/blob/feature/LazySingletonDemo/src/org/duffqiu/patterndemo/LazySingleton.java could not be found
</code></pre>

<p>小提示：对于非单例的类的延迟初始化要用double check的方式，具体可以参见Effective Java 第71条</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式：模版方法]]></title>
    <link href="http://duffqiu.github.io/blog/2014/02/03/she-ji-mo-shi-%3Amo-ban-fang-fa/"/>
    <updated>2014-02-03T14:53:40+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/02/03/she-ji-mo-shi-:mo-ban-fang-fa</id>
    <content type="html"><![CDATA[<h3 id="section">模版方法模式原理</h3>

<ol>
  <li>名称：模版方法(Template Method)模式</li>
  <li>问题：在很多时候多个对象有很多个共性，只是某个／某些行为不同，如果单独实现这些对象，则需要很多的copy - paste</li>
  <li>解决方案：将共性的行为抽取到抽象类，将特定的行为由具体的对象来实现／或者这个具体的行为本身就是一个对象(主要由继承方式和回调方式两种实现手段)</li>
  <li>结果：减少了相同的代码，增强了维护性</li>
</ol>

<h3 id="section-1">继承方式实现模版方法模式</h3>

<p><img src="/images/TemplatePattern1.png" alt="继承方式的模版方法" /></p>

<p>这里注意点：
1. 父类是抽象类
2. 抽象方法是个个子类需要实现的各自的具体行为
3. 父类只是实现一个算法框架
4. Java为了避免父类的的方法被覆盖／重写，可以将其申明为final或private</p>

<h3 id="section-2">回调函数实现模版方法模式</h3>

<p><img src="/images/TemplatePattern2.png" alt="回调函数的模版方法" /></p>

<p>这里注意点：
1. 主类对应的接口依赖与回调的接口定义，不是直接依赖回调对象本身
2. 主类无需被继承，提定行为由实现回调接口的对象实现
3. 最为常用的例子是多线程处理中，回调对象都实现了Runable接口实现特性的逻辑，控制线程的主逻辑类如ExecutorService依赖于Runable接口</p>

<p>个人比较建议使用回调函数实现模版方法模式。（之前用C++的时候计较多的是用继承的方式）</p>

<h4 id="vi">Vi小技巧</h4>
<ol>
  <li>yy 用来copy当前行</li>
  <li>数字n＋yy  用来copy从单前行开始的n行</li>
  <li>p 在当前光标出插入copy的内容</li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式开篇]]></title>
    <link href="http://duffqiu.github.io/blog/2014/02/02/she-ji-mo-shi-kai-pian/"/>
    <updated>2014-02-02T15:31:04+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/02/02/she-ji-mo-shi-kai-pian</id>
    <content type="html"><![CDATA[<h3 id="section">参考</h3>
<p>从这里开始，主要是参考<a href="http://www.amazon.cn/漫谈设计模式-从面向对象开始-刘济华/dp/B006QQZE4Y/ref=sr_1_1?ie=UTF8&amp;qid=1391326331&amp;sr=8-1&amp;keywords=漫谈设计模式">漫谈设计模式</a></p>

<p>要去理解设计模式，必须是有以下基础</p>

<ol>
  <li>语言基础(Java, C++, Object-C…)，这里是以Java语言做介绍，如果需要初步学Java则可以看看<a href="https://www.udemy.com/java-tutorial/?couponCode=FREE">Udemy</a>上面的免费入门视频</li>
  <li>懂得OO的设计理念/原则，后面再抽个章节讲讲这个<a href="/blog/2014/02/02/oode-%5B%3F%5D-xie-she-ji-yuan-ze/">OO的设计原则</a></li>
  <li>懂得UML的基础，入门可以先看看这本简单的<a href="http://www.amazon.cn/系统分析师UML项目实战-邱郁惠/dp/B00DSQZ9IQ/ref=sr_1_1?ie=UTF8&amp;qid=1391326582&amp;sr=8-1&amp;keywords=系统分析师UML项目实战">系统分析师UML项目实战</a>，个人也不太建议UML在工作做过于教条化。之前曾经有1年多都是在画UML图，然后开发依据UML图去做开发，结果效果并不是很好。但是一些基础的比较实际的用法还是值得去做的。要看明白设计模式的类图，请先看看<a href="/blog/2014/02/02/umllei-tu/">UML类图</a></li>
</ol>

<h3 id="gof-23">经典的GoF 23个设计模式，这只是个基础</h3>
<p>GoF的23个设计模式只是一个经典的总结，但是不代表只有23个，其实在工作中很多问题的共性解决方案都有可能编程设计模式，只要复合以下4个基本的设计模式要素</p>

<ol>
  <li>模式名称（Pattern Name）</li>
  <li>问题描述（Problem）</li>
  <li>解决方案（Solution）</li>
  <li>效果／结果（consequence）</li>
</ol>

<h3 id="section-1">模式的套用</h3>
<p>不是说能套上设计模式就是好的设计，好的设计需要多个方面的积累，AOP、BDD、TDD。。。<br />
模式更像是独孤九剑，最后是忘记模式而自然而然的使用模式(好像有些玄乎？)<br />
设计模式的基础还是OO，只有用好OO才能更好的理解和用好设计模式</p>
]]></content>
  </entry>
  
</feed>
