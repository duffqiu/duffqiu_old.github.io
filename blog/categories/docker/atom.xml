<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Docker | Duff Qiu's Blog]]></title>
  <link href="http://duffqiu.github.io/blog/categories/docker/atom.xml" rel="self"/>
  <link href="http://duffqiu.github.io/"/>
  <updated>2015-10-26T09:50:23+08:00</updated>
  <id>http://duffqiu.github.io/</id>
  <author>
    <name><![CDATA[Duff Qiu]]></name>
    <email><![CDATA[duffqiu@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[配置Docker的容器网络与主机网络相同]]></title>
    <link href="http://duffqiu.github.io/blog/2015/10/25/docker-fix-network/"/>
    <updated>2015-10-25T19:31:58+08:00</updated>
    <id>http://duffqiu.github.io/blog/2015/10/25/docker-fix-network</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<hr />
<p>原生的Docker安装后，容器使用的网络是一个通过Bridge方式的NAT内部网络，但是多个主机中的容器是无法通信的。如果需要将多个主机中的容器构成同一个网络，则需要另外独立于Docker来预先配置网络</p>

<h3 id="section-1">解决办法</h3>
<hr />

<p>目前可行的方式有多种，有用OVS的Overlay Network的等SDN方式。但是鉴于SDN方式依然不是很成熟，所以还是期望将容器的网络构建于与主机相同的网络或使用独立网卡在不同的网络中。这种方式下，从网络的角度，容器就是一台独立的机器。</p>

<p>具体方式如下(以CentOS 7为主机系统):</p>

<ul>
  <li>安装bridge工具：<code>yum install bridge-utilis</code></li>
  <li>先卸载原有的Docker，目前CentOS yum repo的版本为1.7.1，但是该版本的网络功能还是有问题，具体可以参见Github上Docker的Release Note。</li>
  <li>参照Docker官方的方式配置Docker yum repo<a href="https://docs.docker.com/installation/centos/">docker centos install guide</a>, 然后<code>yum install docker-engine</code> (目前需要1.8.3版本)</li>
  <li>如果需要其它用户使用docker而非用root，则需要创建docker用户和用户组，然后将其它用户加入到docker用户组中。并且将<code>/var/lib/docker</code>目录的拥有者改为<code>docker.docker</code></li>
  <li>创建一个linux bridge，为了方便，将名字也命名为docker0，这样就不用给docker engine增加-b启动参数. 
    <ul>
      <li><code>/etc/sysconfig/network-scripts</code>，目录下创建一个文件ifcfg-docker0，然后增加一下内容</li>
    </ul>
  </li>
</ul>

<p><code>
DEVICE=docker0
TYPE=bridge
BOOTPROTO=static
IPADDR=192.168.1.26
NETMASK=255.255.255.0
GATEWAY=192.168.1.1
DNS1=144.114.114.114
ONBOOT=yes
DELAY=0
</code>   </p>

<ul>
  <li>修改对应的网卡配置， <code>/etc/sysconfig/network-scripts</code>，目录下ifcfg-enp0s3（名字可能有所不同），将自身的IP对应的设置注释掉，同时增加一个行：<code>BRIDGE=docker0</code></li>
  <li>重启机器，然后通过<code>ip a</code>可以参看到多了个虚拟网卡docker0，并且ip被配置在这个虚拟网卡上，原来的网卡如enp0s3已经没有了ip地址，并且通过<code>brctl show</code>可以看到docker0被指向了enp0s3的接口</li>
  <li>
    <p>修改docker引擎启动参数，在文件<code>/usr/lib/systemd/system/docker.service</code>增加<code>--fixed-cidr=192.168.1.96/27 --default-gateway=192.168.1.1</code> ，然后重启引擎</p>
  </li>
  <li>
    <p>这里有个坑：如果enp0s3启动比docker0慢的话，则docker0启动失败，变通的办法是在<code>/etc/rc.local</code>文件中增加一行<code>ifup docker0</code> （似乎是用virtualbox会这样），并确保改文件是可执行的</p>
  </li>
  <li>另外一个坑：如果是MAC OSX下使用Virtualbox起的主机的话，则容器无法联通到外面，不知道是MAC限制的原因，还是说我的wifi路由器无法支持的原因</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何获取docker动态分配的port]]></title>
    <link href="http://duffqiu.github.io/blog/2015/08/14/docker-public-port/"/>
    <updated>2015-08-14T14:31:12+08:00</updated>
    <id>http://duffqiu.github.io/blog/2015/08/14/docker-public-port</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<hr />
<p>当在一个集群环境中，我们需要用到docker启动一个服务的时候，如果总是指定固定的公开端口给docker运行的服务，那么将极大的限制了服务部署的灵活性和可维护行。那么有没有办法在服务启动后去容易获得docker动态分配的端口呢？</p>

<h3 id="section-1">解决办法</h3>
<hr />

<p>Docker提供了port的子命令，具体使用如下：</p>

<p><code>
docker port &lt;container-name&gt; |cut -d':' -f2
</code></p>

<h4 id="section-2">后续问题</h4>

<p>目前这种方式只适合外服务外做服务注册的场景。
如果服务注册是在服务程序中完成的（如上报到zookeeper等），那么目前是没有办法的。有个<a href="https://github.com/docker/docker/issues/3778">issue3778</a>在跟，不知道docker什么时候提供</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Mac下使用docker]]></title>
    <link href="http://duffqiu.github.io/blog/2015/07/18/user-docker-mac/"/>
    <updated>2015-07-18T18:29:43+08:00</updated>
    <id>http://duffqiu.github.io/blog/2015/07/18/user-docker-mac</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<hr />
<p>Docker是基于Linux Kernel的容器管理器，但是如果想在Mac上使用就必须安装Linux的虚拟机。当然如果是自己安装一个Linux到virtualbox或者vmare也是没有问题的。我自己就是这样用CoreOS的。但是如果只是想试用或学习docker，这样的方式有些重了，因为每次都要启动虚拟机，登录虚拟机再使用。为了解决这个docker有了<a href="http://docs.docker.com/installation/mac/">boot2docker</a>。但是boot2docker还是需要比较繁琐的安装。所以最好的方式是直接使用<a href="https://kitematic.com">kitematic</a>，kitematic还同时支持windows。但是切记不要将kitematic用在生产环境。</p>

<h3 id="section-1">解决办法</h3>
<hr />

<ul>
  <li>直接下载kitematic，然后得到一个kitematic.app</li>
  <li>将它放到application中，直接运行就好</li>
  <li>在菜单中将docker命令行安装到系统，需要管理员权限，这样就可以通过命令行使用docker了(不过命令行启动需要在kitematic点击<code>DOCKER CLI</code>)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[技术杂谈1]]></title>
    <link href="http://duffqiu.github.io/blog/2014/02/09/ji-zhu-za-tan-1/"/>
    <updated>2014-02-09T18:15:58+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/02/09/ji-zhu-za-tan-1</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<hr />

<p>这个类别主要是想记录以下跑题中看到的一些“新”技术，或者是一些有意思的技术内容，但是不会详细展开，如有时间和必要会有专门的blog来描述某个内容或话题</p>

<h3 id="section-1">今天的内容有</h3>
<hr />

<ol>
  <li>
    <p>云上的Jenkins，由<a href="http://www.cloudbees.com">Cloudbees公司</a>提供，提供免费的有限的使用，但是需要用到的地方，其实都有免费的软件／服务，如Jenkins的程序，Github管理代码等，唯一的好处是不用自己来搭建、维护服务器。我找到它的原因是看到它的Jenkins能自动部署到Goolge App Engine上，而 Jenkins还没有提供类似的Plugin，或许直接用shell命令就能做到，后面有机会用到再展开这个。</p>
  </li>
  <li>
    <p>开源的类似Google App Engine的Paas的平台<a href="https://github.com/AppScale/appscale">AppScale</a>，<a href="http://www.youtube.com/user/AppScaleSystems">youtube的AppScale介绍</a>（不过需要代理才可以看，我前面由介绍如何搭建代理服务）。建议开发Google App Engine应用的开发者都自己搭建一套，<a href="http://www.appscale.com/features">好处</a>是：</p>

    <ul>
      <li>便于直接本地测试、部署和运行</li>
      <li>需要部署私有云（特别是大型企业）</li>
      <li>需要使用其它Google App Engine不支持的APIs</li>
      <li>Google App Engine全APIs兼容</li>
      <li>可用于生产环境的平台（Google App Engine不适合生产环境？）</li>
      <li>
        <p>不再依赖于Google，可以部署在多个云平台如Amazon和虚拟机等</p>

        <div style="text-decoration:underline; font-size: 16px; color: red" onclick="showdiv('app')"> AppScale架构图 </div>
      </li>
    </ul>

    <div style="display:none" class="prev" id="app" onclick="hidediv('app')">
	
 <img src="http://www.appscale.com/assets/img/appscale_stack.png" title="点击关闭" />
	
 </div>
  </li>
  <li>
    <p><a href="http://www.docker.io">docker</a>，轻量级的应用容器，不过还没成熟和商业化，值得关注。我还没有升入去看，只能提一下而已</p>
  </li>
</ol>

]]></content>
  </entry>
  
</feed>
