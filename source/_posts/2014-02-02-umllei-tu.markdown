---
layout: post
title: "UML类图"
date: 2014-02-02 20:44:44 +0800
comments: true
categories: UML
---

### UML工具
推荐大家用[astah](http://members.change-vision.com/files/astah_community "官网")，Community版本就够了

###类图的描述

1. 类名：正体字为实例化类， 斜体字是抽象类，接口类有interface标识(也可以是个圆形，不过建议在类图中还是使用长方形的图形标识)2. 属性：***+***表示puiblic， ***-***表示private， ***#***表示protected3. 方法：***+***表示puiblic， ***-***表示private， ***#***表示protected, 有下划线表示      <font style="border-bottom:1px solid #000;">静态方法</font>

![类图和继承与实现](/images/ClassDiagram.png)

###类图中类与类的关系

####继承与实现

1. 继承关系，用带实线的闭合空心箭头

   <div style='font-size: 36px'> ⇾ </div> 
   
   表示，Java语言中**extends**体现
   
2. 接口实现关系，用虚线带的闭合空心箭头
   
   <div style='font-size: 36px'> ­­­­⁃⁃⇾ </div>
   
   表示，Java语言中**implements**体现


####关联关系(体现类与类的实例变量的关系)   

提示： 实践中，要将所有的关联关系都要画清楚

1. 类与类的关联关系：(association)，体现类与类的实例变量的关系，可以是单向关联（单箭头），也可以是双向关联（双箭头/无箭头，不鼓励有这种关系）。关联关系还可以有个基数，表明这一端的类有几个该类型的实例（0..1, 0..\*, 1, 1..\*），使用实线开放式箭头表示
   
   <div style='font-size: 36px'> ➔ </div>
   
2. 聚合关系（aggregation），关联关系的一种，是强的关联关系，是整体和个体间的关系(个体可以单独存在)，也是通过实例变量体现。Java语法是无法区分聚合和关联关系的。如果不是太确定，可以设置为关联关系。同样具有基数。实例类用空的菱形表示  

   <div style='font-size: 36px'> ◇⟶ </div>

3. 合成关系(Composition)，关联关系的一种，是比聚合关系**强**的关联关系。该关系和聚合关系的区别是，代表整体的部分负责代表部分的对象的生命周期，即部分对象不会独立于整体存在，且不能共享。实例类用实心的菱形表示，也是通过实例变量体现。如果不是太确定则用聚合/关联关系表示
  
   <div style='font-size: 36px'> ◆⟶ </div>
  
####依赖关系(体现为局部变量、方法参数，以及对静态方法的调用)

提示： 这些表示在astah中都可以容易使用，要做到的事情时清楚其具体含义 
  
 1. 依赖关系(dependency)，依赖总是单向。Java中体现为局部变量、方法参数，以及对静态方法的调用，图形通过虚线开放箭头表示
 
    <div style='font-size: 36px'> ⤑ </div>
    
    实践中没有必要将所有的依赖都画出来，只画出重要部分
    
#####类的关联关系和依赖关系在astah中的表示如下：

![类的关联关系和依赖关系](/images/ClassRelationship.png)   

尽管前面讲了使用UML不要太教条，试用就好，但是图的表示含义还是要准确的好
本章节的astah的文件：[类的UML说明](/assets/ClassDiagram.asta)

###小插曲

今天在家下载astah很慢，就用baidu的离线下载（普通下载方式），先交由baidu下载到网盘上，然后再到网盘上下载下来，速度很快，比直接下载好多了