<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Duff Qiu's Blog]]></title>
  <link href="http://duffqiu.github.io/atom.xml" rel="self"/>
  <link href="http://duffqiu.github.io/"/>
  <updated>2014-02-02T16:37:01+08:00</updated>
  <id>http://duffqiu.github.io/</id>
  <author>
    <name><![CDATA[Duff Qiu]]></name>
    <email><![CDATA[duffqiu@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[OO的一些设计原则]]></title>
    <link href="http://duffqiu.github.io/blog/2014/02/02/oode-%5B%3F%5D-xie-she-ji-yuan-ze/"/>
    <updated>2014-02-02T16:05:09+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/02/02/oode-[?]-xie-she-ji-yuan-ze</id>
    <content type="html"><![CDATA[<h3 id="oo">OO设计原则</h3>

<ol>
  <li>
    <p>“开-闭”原则 (Open-Closed Principle, OCP)</p>

    <ul>
      <li>对扩展开放，对修改关闭 (如不要去覆盖一个父类的行为，但是可以在一个新的类的行为中使用父类／关联类的行为)</li>
      <li>不允许更改系统的抽象层，是允许扩展系统的实现层  </li>
    </ul>
  </li>
  <li>
    <p>抽象类(Abstract Class)</p>

    <ul>
      <li>具体类不是用来继承的。继承要从抽象类开始，一般以abstract命名开头</li>
      <li>如果遇到具体类的继承，最有可能的重构方式是构造一个抽象类，这两个类成为这个抽象类的子类</li>
      <li>抽象类应当尽可能有多的共同代码</li>
      <li>抽象类应当尽可能少的数据</li>
      <li>针对抽象编程</li>
      <li>正确使用继承，不要从工具类继承</li>
    </ul>
  </li>
  <li>里氏代换原则(LSP)
    <ul>
      <li>如果程序调用适用于基类，则必定适用于其子类</li>
      <li>反过来的代价不成立</li>
    </ul>
  </li>
  <li>
    <p>依赖倒转原则（DIP）</p>

    <ul>
      <li>要依赖于抽象，不要依赖于具体实现</li>
      <li>三种耦合关系：
  a. 零耦合(Nil Coupling)，两个类没有耦合关系<br />
  b. 具体耦合(Concrete Coupling)，具体型耦合发生在两个具体类之间，有一个类对另一个具体类的直接引用造成（非继承）<br />
  c. 抽象耦合(Abstract Coupling)，耦合关系发生在一个具体类和抽象类（或接口）之间  </li>
      <li>DIP要求客户端依赖于抽象耦合</li>
      <li>抽象不应当依赖于细节，细节应当依赖于抽象</li>
      <li>针对接口编程，不针对实现编程。即使用接口和抽象类进行变量的类型声明、函数参数的类型声明、方法的返回值类型声明，以及数据类型的转换。</li>
      <li>联合使用Java接口和抽象类</li>
      <li>对于已经很稳定的类，客户端是可以依赖于这个具体类型的，而不用再发明抽象类型</li>
    </ul>
  </li>
  <li>接口隔离原则(ISP)
    <ul>
      <li>使用多个专门的接口比使用单一接口要好 </li>
      <li>一个类对于另外一个类的依赖应当建立在最小的接口上</li>
      <li>定制服务：如果客户端仅需要某些方法，那么就应但只提供这些需要的方法，而不提供不需要的方法</li>
    </ul>
  </li>
  <li>合成/聚合复用原则（CARP）  <br />
    <ul>
      <li>在一个新的对象中使用一些已有的对象，新的对象通过向这些旧的对象委派达到复用已有功能的目的</li>
      <li>尽量使用合成/聚合，尽量不要使用继承</li>
    </ul>
  </li>
  <li>迪米特法则(LoD)<br />
又叫做最少知识原则(Least Knowledge Principle LKP)
    <ul>
      <li>只与你直接的朋友通信</li>
      <li>不要和“陌生人”说话</li>
      <li>朋友确定的原则：
        <ul>
          <li>当前对象本身（this）</li>
          <li>以参数形式传入到当前对象方法的对象</li>
          <li>当前对象的实例变量直接引用的对象</li>
          <li>当前对象的实例变量如果是一个聚集，则聚集中的元素都是朋友</li>
          <li>当前对象所创建的对象</li>
        </ul>
      </li>
      <li>使用抽象陌生人重构来调用陌生对象，避免过多的原子调用转发</li>
    </ul>
  </li>
  <li>
    <p>广义迪米特法则在类上的设计</p>

    <ul>
      <li>优先考虑将一个类设置成不变类</li>
      <li>尽量降低一个类的访问权限（package-private是默认权限，无需标示private关键字）</li>
      <li>谨慎使用Serializable</li>
      <li>尽量降低类成员(属性、方法、嵌套类、嵌套接口)的访问权限
        <ul>
          <li>private，只能类内部使用 </li>
          <li>package-private,只能被当前包的类访问，默认权限，无需任何关键字标示</li>
          <li>protected，但前包的类和它的子类可以访问</li>
          <li>public,任何类都可以访问</li>
        </ul>
      </li>
      <li>限制局域变量的有效访问</li>
    </ul>
  </li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式开篇]]></title>
    <link href="http://duffqiu.github.io/blog/2014/02/02/she-ji-mo-shi-kai-pian/"/>
    <updated>2014-02-02T15:31:04+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/02/02/she-ji-mo-shi-kai-pian</id>
    <content type="html"><![CDATA[<h3 id="section">参考</h3>
<p>从这里开始，主要是参考<a href="http://www.amazon.cn/漫谈设计模式-从面向对象开始-刘济华/dp/B006QQZE4Y/ref=sr_1_1?ie=UTF8&amp;qid=1391326331&amp;sr=8-1&amp;keywords=漫谈设计模式">漫谈设计模式</a></p>

<p>要去理解设计模式，必须是有以下基础</p>

<ol>
  <li>语言基础(Java, C++, Object-C…)，这里是以Java语言做介绍，如果需要初步学Java则可以看看<a href="https://www.udemy.com/java-tutorial/?couponCode=FREE">Udemy</a>上面的免费入门视频</li>
  <li>懂得OO的设计理念/原则，后面再抽个章节讲讲这个<a href="http://duffqiu.github.io/blog/2014/02/02/oode-%5B%3F%5D-xie-she-ji-yuan-ze/">OO的设计原则</a></li>
  <li>懂得UML的基础，入门可以先看看这本简单的<a href="http://www.amazon.cn/系统分析师UML项目实战-邱郁惠/dp/B00DSQZ9IQ/ref=sr_1_1?ie=UTF8&amp;qid=1391326582&amp;sr=8-1&amp;keywords=系统分析师UML项目实战">系统分析师UML项目实战</a>，个人也不太建议UML在工作做过于教条化。之前曾经有1年多都是在画UML图，然后开发依据UML图去做开发，结果效果并不是很好。但是一些基础的比较实际的用法还是值得去做的。</li>
</ol>

<h3 id="gof-23">经典的GoF 23个设计模式，这只是个基础</h3>
<p>GoF的23个设计模式只是一个经典的总结，但是不代表只有23个，其实在工作中很多问题的共性解决方案都有可能编程设计模式，只要复合以下4个基本的设计模式要素</p>

<ol>
  <li>模式名称（Pattern Name）</li>
  <li>问题描述（Problem）</li>
  <li>解决方案（Solution）</li>
  <li>效果／结果（consequence）</li>
</ol>

<h3 id="section-1">模式的套用</h3>
<p>不是说能套上设计模式就是好的设计，好的设计需要多个方面的积累，AOP、BDD、TDD。。。<br />
模式更像是独孤九剑，最后是忘记模式而自然而然的使用模式(好像有些玄乎？)<br />
设计模式的基础还是OO，只有用好OO才能更好的理解和用好设计模式</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress添加bing网站分析]]></title>
    <link href="http://duffqiu.github.io/blog/2014/02/02/octopresstian-jia-bingwang-zhan-fen-xi/"/>
    <updated>2014-02-02T11:30:01+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/02/02/octopresstian-jia-bingwang-zhan-fen-xi</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<p>Google提供了相应的Analytics网站分析工具，同样Bing也提供了类似的工具：<a href="http://www.bing.com/toolbox/webmaster/" title="官网">Bing网站管理员</a>，同样可以给你的Octopress很快速的添加该分析工具</p>

<h3 id="section-1">配置</h3>

<ol>
  <li>在Bing网站管理员注册，并填写必要的信息</li>
  <li>添加一个新网站，填写相应的信息</li>
  <li>
    <p>根据认证所有权网页配置Octopress，具体如下</p>

    <ul>
      <li>下载你的BingSiteAuth.xml到octopres的source目录下</li>
      <li>
        <p>配置_config_yml文件，设置bing analytics开关，在文件最后加入，如果以后不用bing analytics，则可以将开关设置为false就可以，不用到处改文件</p>

        <pre><code># Bing Analytics  
bing_analytics: true
</code></pre>
      </li>
      <li>
        <p>修改octopres/source/_include目录下的head.html文件，在&lt;head&gt;下面增加以下内容，记得替换&lt;…&gt;bing给你的blog的标识</p>

        <pre><code>{% if site.bing_analytics %}
&lt;meta name="msvalidate.01" content="&lt;...&gt;" /&gt;
{% endif %}
</code></pre>
      </li>
      <li>
        <p>然后重新生成并部署就可以了      </p>

        <pre><code>&gt;rake generate
&gt;rake deploy
</code></pre>
      </li>
    </ul>
  </li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Port Tips: 软件版本选择]]></title>
    <link href="http://duffqiu.github.io/blog/2014/02/01/port-tips-ruan-jian-ban-ben-xuan-ze/"/>
    <updated>2014-02-01T23:30:20+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/02/01/port-tips-ruan-jian-ban-ben-xuan-ze</id>
    <content type="html"><![CDATA[<h3 id="port">port查看本地已安装的文件</h3>

<pre><code>&gt;port installed
</code></pre>

<h3 id="port-1">port查看同一个软件的不同版本</h3>

<pre><code>&gt;port select --list python    #这里查看的已经安装了的python的版本
</code></pre>

<p>我的机器情况是：    </p>

<p><img src="http://duffqiu.github.io/images/Snip20140201_1.png" alt="image" />    </p>

<p>显示为none指的是系统自带的版本</p>

<h3 id="section">激活某个版本</h3>

<pre><code>&gt;sudo port select --set python python2.7
</code></pre>

<p><strong>注意：</strong> 只有那些有对应的select软件包的软件才可以设置版本    </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[加速Octopress的装载]]></title>
    <link href="http://duffqiu.github.io/blog/2014/02/01/jia-su-octopressde-zhuang-zai/"/>
    <updated>2014-02-01T14:23:15+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/02/01/jia-su-octopressde-zhuang-zai</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<p>加速网页的存取有多种方式，其中之一就是减少一个页面的http的请求数量，因为浏览器同时发送http请求的数量是有限的，而对于很多页面而言，通常定义了很多css和js文件的链接，这样就会造成浏览器需要多次请求后才能完整的展示页面，所以最好的方式将多个css和js文件合并，如果需要还可以将合并后的文件压缩再传输，从而达到加速的目的。</p>

<h3 id="gem">Gem插件安装</h3>
<p>Octopress的<a href="https://github.com/matthodan/jekyll-asset-pipeline">jekyll-asset-pipeline</a>就是一个这样机制的开源插件<br />
简单的可以通过以下命令安装</p>

<pre><code>&gt;sudo gem install jekyll-asset-pipeline
</code></pre>

<p><strong>注意：</strong> 有可能安装完成后，需要更新bundle，这行命令</p>

<pre><code>&gt;sudo bunlde update  
</code></pre>

<p>压缩需要用到插件YUI Compressor，可以简单通过以下命令安装</p>

<pre><code>&gt;sudo gem install yui-compressor
</code></pre>

<p>另外一个选择是使用Google的<a href="https://developers.google.com/closure/?hl=zh-cn">Closure</a>，可以通过简单通过以下命令安装</p>

<pre><code>&gt;sudo gem install Closure          
</code></pre>

<h3 id="octopress">配置Octopress</h3>
<ol>
  <li>
    <p>配置octopress目录下的Gemfile文件，在:development中，增加以下两行</p>

    <pre><code>gem "jekyll-asset-pipeline"
gem "yui-compressor
</code></pre>
  </li>
  <li>
    <p>在 Octopress的plugins目录中，创建一个名为“jekyll_asset_pipeline.rb”的文件，内容如下：可以用注释那行代替上面那行就是使用Google的closure来压缩js文件</p>

    <pre><code> require 'jekyll_asset_pipeline'

 module JekyllAssetPipeline
	
   class CssCompressor &lt; JekyllAssetPipeline::Compressor
     require 'yui/compressor'
	
     def self.filetype
       '.css'
     end
	
     def compress
       return YUI::CssCompressor.new.compress(@content)
     end
   end
	
   class JavaScriptCompressor &lt; JekyllAssetPipeline::Compressor
     require 'yui/compressor'
     #require 'closure-compiler'
	
     def self.filetype
       '.js'
     end
	
     def compress
       return YUI::JavaScriptCompressor.new(munge: true).compress(@content)
       #return Closure::Compiler.new.compile(@content)
     end
   end
	
 end
</code></pre>
  </li>
  <li>
    <p>修改Octopress的配置文件_config.yml，在文件最后增加以下配置</p>

    <pre><code>asset_pipeline:
   bundle: true            # Default = true
   compress: true          # Default = true
   #output_path: assets     # Default = assets
   #display_path: nil       # Default = nil
   gzip: false             # Default = false
</code></pre>
  </li>
  <li>
    <p>修改相应的html文件，激活js/css文件的合并压缩。不同的Octopress的template，对应的文件或有不同，我这里用的是Octopress默认的官方template，因该适合大多数人</p>

    <ul>
      <li>
        <p>修改source/_include目录下的head.html文件，注释掉带有js/css的几行</p>

        <pre><code> &lt;!-- &lt;link href="{{ root_url }}/stylesheets/screen.css" media="screen, projection" rel="stylesheet" type="text/css"&gt; --&gt;
	 
 &lt;!-- &lt;script src="{{ root_url }}/javascripts/modernizr-2.0.js"&gt;&lt;/script&gt; --&gt;
 &lt;!-- &lt;script src="http://duffqiu.github.io//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"&gt;&lt;/script&gt; --&gt;
 &lt;!-- &lt;script&gt;!window.jQuery &amp;&amp; document.write(unescape('%3Cscript src="./javascripts/libs/jquery.min.js"%3E%3C/script%3E'))&lt;/script&gt; --&gt;
 &lt;!-- &lt;script src="{{ root_url }}/javascripts/octopress.js" type="text/javascript"&gt;&lt;/script&gt; --&gt;
</code></pre>
      </li>
      <li>
        <p>增加以下内容</p>

        <pre><code>{% css_asset_tag global %}
 - /stylesheets/screen.css
{% endcss_asset_tag %}
	
{% javascript_asset_tag global %}
- /javascripts/octopress.js
- /javascripts/modernizr-2.0.js
- /javascripts/libs/jquery.min.js
- /javascripts/libs/swfobject-dynamic.js
- /javascripts/libs/jXHR.js
{% endjavascript_asset_tag %}
</code></pre>
      </li>
      <li>
        <p>同理修改source/_includes/custom目录下的head.html文件，注释掉里面的内容，增加上面的内容就可   </p>
      </li>
    </ul>
  </li>
  <li>
    <p>到底有多css和js文件需要加入到需要增加的内容中呢？在octopress/source目录中搜索一下</p>

    <pre><code>find . -name '*.css'
find . -name '*.js'
</code></pre>

    <p>然后将必要的文件加入到上面的文件列表中</p>
  </li>
</ol>

<h3 id="vi">Vi小提示</h3>

<ol>
  <li>跳到文件头用 “:0”</li>
  <li>跳到行头在非编辑状态下直接收入”0”</li>
  <li>跳到行尾在非编辑状态下直接收入”$”      </li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress通知搜索引擎]]></title>
    <link href="http://duffqiu.github.io/blog/2014/02/01/octopresstong-zhi-sou-suo-yin-qing/"/>
    <updated>2014-02-01T13:21:02+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/02/01/octopresstong-zhi-sou-suo-yin-qing</id>
    <content type="html"><![CDATA[<h3 id="section">目的</h3>
<p>每次更新blog后，总希望搜索引擎可以尽快收录到，最好是多个搜索引擎都能收入到<br />
怎么做到呢？</p>

<h3 id="rake">配置搜索引擎rake任务</h3>
<p>首先感谢原作者的介绍<a href="http://blog.eavatar.com/post/2013/06/octopress-ping-search-engines/">1</a></p>

<ol>
  <li>
    <p>编辑octopress目录的Rakefile文件，在最后增加搜索引擎任务</p>

    <pre><code>＃Google search engine
desc 'Notify Google of the new sitemap'
 task :sitemapgoogle do
  begin
    require 'net/http'
    require 'uri'
    puts '* Pinging Google about our sitemap'
    Net::HTTP.get('www.google.com', '/webmasters/tools/ping?sitemap=' + URI.escape('http://duffqiu.github.io/sitemap.xml'))
  rescue LoadError
    puts '! Could not ping Google about our sitemap, because Net::HTTP or URI could not be found.'
  end
 end

#Baidu search engine       
desc 'Ping Baidu'
 task :pingbaidu do
   begin
     require 'xmlrpc/client'
     puts '* Pinging Baidu search engine'
     XMLRPC::Client.new('ping.baidu.com', '/ping/RPC2').call('weblogUpdates.extendedPing', 'duffqiu.github.io' , 'http://duffqiu.github.io', 'http://duffqiu.github.io', 'http://duffqiu.github.io/rss.xml')
   rescue LoadError
     puts '! Could not ping Baidu, because XMLRPC::Client could not be found.'
   end
 end
	
#Bing search engine
desc 'Notify Bing of the new sitemap'
 task :sitemapbing do
   begin
     require 'net/http'
     require 'uri'
     puts '* Pinging Bing about our sitemap'
     Net::HTTP.get('www.bing.com', '/webmaster/ping.aspx?siteMap=' + URI.escape('http://duffqiu.github.io/sitemap.xml'))
   rescue LoadError
     puts '! Could not ping Bing about our sitemap, because Net::HTTP or URI could not be found.'
   end
 end	
</code></pre>

    <p>将”duffqiu.github.io”换成你的blog域名字即可</p>
  </li>
  <li>
    <p>增加一个批量任务同时执行三个通知</p>

    <pre><code>desc "Notify various services about new content"
task :notify =&gt; [:sitemapgoogle, :sitemapbing, :pingbaidu] do
end
</code></pre>
  </li>
  <li>
    <p>每次部署后执行命令</p>

    <pre><code>rake notify
</code></pre>
  </li>
</ol>

<h3 id="vi">vi小技巧</h3>
<p>今天有用到一个vi的命令，跳转到文件最后用”:$”        </p>

<h3 id="section-1">小插曲</h3>
<p>今天发现用Mac OSX10.9可以直接投射屏幕到小米盒子(v1.3.20)了</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress Gem插件gsl安装]]></title>
    <link href="http://duffqiu.github.io/blog/2014/01/30/octopress-gemcha-jian-gslan-zhuang/"/>
    <updated>2014-01-30T20:00:10+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/01/30/octopress-gemcha-jian-gslan-zhuang</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<p>Octopress用rake generate的时候会提示使用GSL将会加速文件的生成，速度是原来的的10+倍，但是需要安装<a href="http://rb-gsl.rubyforge.org/">Ruby GSL</a>插件。</p>

<h3 id="section-1">安装</h3>
<p>当使用命令安装Ruby GSL的时候确发现了问题 </p>

<pre><code>gem install gsl
</code></pre>

<p>原因是缺少了<a href="http://www.gnu.org/software/gsl/" title="GSL Library官网">GSL的C的开发库</a>    </p>

<p>然后在GSL Library官网下载了最新的GSL1.16，然后编译安装，然后再重新安装Ruby GSL，但是还是出现错误，后来搜索<a href="stackoverflow.com">stackoverflow</a>找到一个说明，说是GSL和Ruby GSL配合的版本只能用1.14的。所以再次下载GSL1.14编译、安装然后再安装Ruby GSL就可以了</p>

<h3 id="section-2">使用</h3>

<pre><code>rake notify
</code></pre>

<p>目前看除了rake generate没有那个提示，好像速度没有看出来，或许是文章的数目不多体现不出来 </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress的内部blog间关联]]></title>
    <link href="http://duffqiu.github.io/blog/2014/01/30/octopressde-nei-bu-blogjian-guan-lian/"/>
    <updated>2014-01-30T18:28:34+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/01/30/octopressde-nei-bu-blogjian-guan-lian</id>
    <content type="html"><![CDATA[<h3 id="section">首先鸣谢参考资料的作者</h3>

<p>参考资料来自与 <a href="http://blog.eavatar.com/post/2013/06/use-post-url-internal-link-octopress/">1</a></p>

<h3 id="octopress">完善Octopress的配置</h3>

<ol>
  <li>
    <p>获取内部关联的<a href="https://raw.github.com/michael-groble/jekyll/fix_post_url/lib/jekyll/tags/post_url.rb">post url plugin</a>，然后将其放入到plugin目录中    </p>
  </li>
  <li>
    <p>确保已经安装了kramdown，如果没有，用以下命令安装</p>

    <pre><code>&gt;sudo gem install kramdown
</code></pre>
  </li>
  <li>
    <p>编辑配置文件_configy.yml，注释掉markdown: rdiscount，然后增加</p>

    <pre><code>#markdown: rdiscount
markdown: kramdown
</code></pre>
  </li>
</ol>

<h3 id="blog">在blog中使用关联，语法如下</h3>

<pre><code>[&lt;链接名字&gt;]({% post_url &lt;blog的文件名字，不要带目录和文件后缀&gt; %}) 
</code></pre>

<p>然后重新生成和部署就可以了</p>

<pre><code>&gt;rake generate
&gt;rake deploy
</code></pre>

<h3 id="section-1">一个小插曲</h3>
<p>今天在生成地8个blog后，rake generate就出错了，报在matrix.rb文件中反馈出”Not Regular Matrix”错误，但是就是死活找不到问题所在，只要将刚生成的文件删除就好了，而文件还没写东西。后来经历反复的从头再来，终于发现了问题所在，结论是之前参照网上配置关联blog的配置，在_configy.yml中增加了以下配置：</p>

<pre><code>lsi: true    
</code></pre>

<p>只要将这个选项关闭或删除就可，好像octopress已经没有用了</p>

<h3 id="octopress-1">Octopress经验总结</h3>

<p>尽管使用上就是用markdown的方式写文章，但是使用octopress这个平台，就像使用开发工具一样，总会出现这样那样的错误，而且还很难定位，最好的办法就是像编程一样，今早“编译”－》“试运行”－》“改错”－》“再运行”，不然当你写了很多后一次行生成出现错误就无从下手去解决问题了，只能一个一个做减法然后再试。</p>

<p>最好的方式是</p>

<ol>
  <li>写一部分，就立马rake generate  </li>
  <li>rake new_post[“<文章名>&#8221;]，不写任何东西，立马rake generate</文章名></li>
  <li>只要用到 {%  %}这些内嵌语法，立马rake generate</li>
  <li>更改一项_config.yml配置，立马rake generate</li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac Tips: 给用户增加用户组]]></title>
    <link href="http://duffqiu.github.io/blog/2014/01/30/mac-tips-gei-yong-hu-zeng-jia-yong-hu-zu/"/>
    <updated>2014-01-30T18:06:43+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/01/30/mac-tips-gei-yong-hu-zeng-jia-yong-hu-zu</id>
    <content type="html"><![CDATA[<h3 id="section">查看用户所在用户组</h3>

<pre><code>&gt;groups
</code></pre>

<h3 id="section-1">查看当前有那些用户</h3>

<pre><code>&gt;uers
</code></pre>

<h3 id="section-2">给用户增加用户组</h3>
<p>通过用户管理创建的用户，如果赋予管理员权限，则用户在admin组，当时有时候需要将用户增加到wheel组，但是OSX没有像相关的命令，似乎apple就不想普通用户像linux那样操作OSX。不过对于技术人员，apple提供了个dscl(Directory Service command line utility)目录服务命令工具完成的，具体操作如下</p>

<ol>
  <li>
    <p>现进入dscl</p>

    <pre><code>&gt;dscl localhost
</code></pre>
  </li>
  <li>
    <p>进入组目录，使用ls 你就可以看到Mac所有的group（同理，在/Local/Default/Users可以到所有的用户）</p>

    <pre><code>&gt;cd /Local/Default/Groups
&gt;ls
</code></pre>
  </li>
  <li>
    <p>添加用户到用户组，&lt;groupname&gt;为组名，&lt;username&gt;为用户名</p>

    <pre><code>&gt;append &lt;groupname&gt; GroupMembership &lt;username&gt;
</code></pre>
  </li>
  <li>
    <p>将用户从用户组中移除</p>

    <pre><code>&gt;delete &lt;groupname&gt; GroupMembership &lt;username&gt;
</code></pre>
  </li>
  <li>
    <p>查看用户组信息，同理可以查看用户信息</p>

    <pre><code>&gt;read  &lt;groupname&gt;
</code></pre>
  </li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac Tips: 管理后台自动运行的服务]]></title>
    <link href="http://duffqiu.github.io/blog/2014/01/30/mac-tips-guan-li-hou-tai-zi-dong-yun-xing-de-fu-wu/"/>
    <updated>2014-01-30T13:29:43+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/01/30/mac-tips-guan-li-hou-tai-zi-dong-yun-xing-de-fu-wu</id>
    <content type="html"><![CDATA[<h3 id="osx">OSX系统后台服务简介</h3>
<ol>
  <li>
    <p>系统级别的服务配置在 /Library/LaunchDaemons/ 目录里面。这里有个注意点，必须确保文件的拥有者是root用户，如果不是，则需要用chown命令改过来</p>

    <pre><code>&gt; sudo chmod root [文件名]
</code></pre>
  </li>
  <li>
    <p>用户级别的服务配置，即在用户登录后才会运行的服务，配置文件在 ~/Library/LaunchAgents/ 目录里面。</p>
  </li>
  <li>
    <p>如果需要自己定义后台服务，可以copy一个已有的文件，然后做一定的更改就可以。</p>
  </li>
  <li>
    <p>编辑工具，xcode是其默认的编辑工具，简要处理的方式是在shell中执行</p>

    <pre><code> &gt; open [文件名]
</code></pre>

    <p>然后系统会自动用xcode打开。  </p>

    <div style="color:#F00">  注意：</div>

    <p>如果需要用xocode编辑首先要安装xcode（好像是废话）。如果是修改系统的服务，就必须将当前用户加入到wheel组，并更改 /Library/LaunchDaemons/目录权限为771，还要将被更改的plist文件的权限改为664，这样才可以用xcode处理文件。是不是很烦？所以还是直接用vi的方式好。编辑完后，还需要将目录权限更改过来</p>

    <ul>
      <li>添加当前用户到wheel组。 </li>
    </ul>

    <div style="color:#F00">  注意：</div>

    <p>OSX没有像Linux那样操作用户组的命令，似乎OSX给用户日常使用是不用管理用户组的。但是对于开发人员，则必须清楚。具体方式是通过dscl(Directory Service command line utility)目录服务命令工具完成的。后面再写个介绍这个。<a href="http://duffqiu.github.io/blog/2014/01/30/mac-tips-gei-yong-hu-zeng-jia-yong-hu-zu/">Mac tips: 给用户添加用户组</a></p>

    <ul>
      <li>
        <p>更改目录权限  </p>

        <pre><code>  sudo chmod 771 /Library/LaunchDaemons/
</code></pre>
      </li>
      <li>
        <p>更改文件权限</p>

        <pre><code>  sudo chmod 664 [plist 文件名]
</code></pre>
      </li>
      <li>
        <p>编辑完了记得再改回来</p>
      </li>
    </ul>
  </li>
</ol>

<h3 id="section">服务的启动和停止</h3>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac Tips: Path路径的查找顺序和设置]]></title>
    <link href="http://duffqiu.github.io/blog/2014/01/30/mac-tips-pathlu-jing-de-cha-zhao-shun-xu-he-she-zhi/"/>
    <updated>2014-01-30T13:14:17+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/01/30/mac-tips-pathlu-jing-de-cha-zhao-shun-xu-he-she-zhi</id>
    <content type="html"><![CDATA[<h3 id="osxpath">OSX系统的PATH设置</h3>

<ol>
  <li>
    <p>系统读取path配置的顺序为<br />
1). /etc/paths wenjian <br />
2). /etc/paths.d/目录下的所有设置文件<br />
3). /etc/profile 文件 
4). 用户目录下的shell配置文件，如zsh的.zshrc文件</p>
  </li>
  <li>
    <p>获取当前path的值的方式<br />
1). echo $PATH<br />
2). /usr/libexec/path_helper  </p>
  </li>
  <li>
    <p>用户设置path的建议<br />
1). 只针对用户自己的设置配知道shell的配置文件中，如.zshrc
2). 针对系统的文件，可以在/etc/paths.d/路径中生成一个对应的配置文件</p>
  </li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress管理附件]]></title>
    <link href="http://duffqiu.github.io/blog/2014/01/28/octopressguan-li-fu-jian/"/>
    <updated>2014-01-28T12:10:51+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/01/28/octopressguan-li-fu-jian</id>
    <content type="html"><![CDATA[<h4 id="octopress">如何在Octopress使用附件</h4>

<ol>
  <li>在octopress目录中，将对应的附件放到/source/assets目录里面</li>
  <li>
    <p>然后重新生成和部署</p>

    <pre><code>rake gengerate
rake deploy
</code></pre>
  </li>
  <li>
    <p>然后在对应的blog中，使用http的链接方式指定文件就可如</p>

    <pre><code>[附件](/assets/&lt;附件名&gt;)
</code></pre>
  </li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac上用google-app-engine搭建proxy]]></title>
    <link href="http://duffqiu.github.io/blog/2014/01/28/macshang-yong-google-app-engineda-jian-proxy/"/>
    <updated>2014-01-28T11:20:35+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/01/28/macshang-yong-google-app-engineda-jian-proxy</id>
    <content type="html"><![CDATA[<h4 id="section">原由</h4>
<p>在家访问Google时总时不时就无法访问，而技术类问题的搜索在百度的结果总是与期望相差太远，要不就是国外的网站无法访问，所以最好的就是使用国外的代理，作为技术人员最好的办法就是自己搭建一个。</p>

<h4 id="section-1">平台选择</h4>
<p>目前有多中选择，但是看了下攻略，最简单的方式就是用google app engine。而且有开源的proxy服务器软件Goagent以及有Mac上好用的GoagentX客户端，那么就它了。</p>

<h4 id="goagent">安装Goagent</h4>
<p>访问<a href="https://code.google.com/p/goagent/" title="官网">Goagent</a><br />
但是在没有代理的时候，访问code.google.com总是很慢，这里附上一个<a href="http://duffqiu.github.io/assets/goagent-goagent-v3.1.5.zip">Goagent 3.1.5</a><br />
具体教程可以参考Goagent的官网
在Mac上的简单操作就是</p>

<ol>
  <li>到<a href="https://appengine.google.com/">Google App Engine</a>创建一个App</li>
  <li>解开Goagent下载下来的软件，到server/gae目录，编写gae.py文件配置密码（避免有人偷用你的流量）</li>
  <li>
    <p>使用命令上传goagent并部署</p>

    <pre><code> python upload.zip 然后按照提示操作就可（就是输入两次google account和密码）
</code></pre>
  </li>
  <li>注意：如果提示等待x秒后尝试看看部署是否成功，等待一会就好，如果不行取消当前操作(ctrol+c)重复之前的操作直到成功为止。估计又是Great Wall的问题</li>
</ol>

<h4 id="goagentx">安装GoagentX</h4>
<p>访问<a href="http://goagentx.com">GoagentX</a>，获得一个App，打开就可
然后就是简单配置GoagentX</p>

<ol>
  <li>设置AppId</li>
  <li>设置服务密码，就是在gae.py上设置的密码</li>
  <li>然后启动就可</li>
  <li>启动成功后，Mac会被自动设置了代理</li>
  <li>接着就能够访问了(如果你能看到youtube／facebook就证明OK了)</li>
  <li>如需在局域网共享，则将启动Goagent的地方勾上局域网选项，然后在代理设置里面也勾上代理选项（记得重启代理）</li>
  <li>在其它机器上配置代理服务器就可以了</li>
</ol>

<h4 id="section-2">免费增加流量</h4>
<p>Google App Engine目前是提供28个小时的前端应用免费流量，如果需要增加则再多创建一个或多个这样的应用就可。  </p>

<p>Google App Engine允许一个账户最多创建10个应用</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress插入代码块的问题]]></title>
    <link href="http://duffqiu.github.io/blog/2014/01/27/octopresscha-ru-dai-ma-kuai-de-wen-ti/"/>
    <updated>2014-01-27T18:20:21+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/01/27/octopresscha-ru-dai-ma-kuai-de-wen-ti</id>
    <content type="html"><![CDATA[<h4 id="blogoctopress">在blog中插入Octopress代码块的问题</h4>

<p>Octopress的说明文档中有多种插入代码块的方式，但是当初入markdown代码的时候就出现问题，尝试了多种方式后无果，最后查看别人的blog的源码发现使用</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="o">{</span>% raw %<span class="o">}</span>
</span><span class="line">   <span class="c"># 必须有空行</span>
</span><span class="line">   <span class="c">#代码块  </span>
</span><span class="line">   <span class="c"># 必须有空行</span>
</span><span class="line"><span class="o">{</span>% endraw %<span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>的方式将代码块再扩起来解决的。</p>

<p>如果有序列(如1., 2…)，则需要缩进代码快和raw..endraw指令</p>

<p>出个小题，这里是怎么写出raw…endraw的?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[开始写第一篇blog]]></title>
    <link href="http://duffqiu.github.io/blog/2014/01/26/kai-shi-xie-di-%5B%3F%5D-pian-blog/"/>
    <updated>2014-01-26T23:36:24+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/01/26/kai-shi-xie-di-[?]-pian-blog</id>
    <content type="html"><![CDATA[<h4 id="section">要简单，你必须有利器</h4>
<p>要简单用好Octepress，首先要看看markdown语法（链接我前面有提到），基本很简单，半个小时就能看懂，剩下实操就可。</p>

<p>然后就是需要有个工具，下载了个<a href="http://moustand.com">Mou</a>，完全免费，到目前为止感觉很好用</p>

<h4 id="blog">开始写第一篇blog</h4>
<p>首先通过命令生成第一篇文章</p>

<pre><code> rake new_post\["&lt;文章标题&gt;"\] #&lt;文章标题&gt;替换成你的文章标题，可以是中文，最后生成的文件名自动转为拼音，这里用\是使用zsh shell自动生成的
</code></pre>

<p>然后通过mou打开生成好的文件用markdown语法进行编辑 
当你第一次打开文件的时候，你会发现这个文件有文件头     </p>

<p><img class="left" src="http://duffqiu.github.io/images/Snip20140126_1.png" width="400" height="1000" title="Head of post" alt="headfile" />          </p>

<p>注意几个内容：   </p>

<ul>
  <li>如果不需要comments，可以设置为false。后面有介绍如何配置comments </li>
  <li>为分类写分类名，后面会将如何配置分类的plugin。这个例子我用了Octopress做分类名 </li>
</ul>

<p>然后就是按照markdown的方式写内容了。 
写完了以后，则需要运行以下命令进行部署 </p>

<pre><code>rake generate
rake deploy
</code></pre>

<p>以后就是重复上面的步骤就可以。</p>

<h4 id="octopress">配置Octopress，更本地化</h4>

<h5 id="about-me">用微博配置About me</h5>

<p>通常在主页的侧边栏说明一下自己是谁，最简单的方式或许是直接连接自己的微博。具体步骤如下</p>

<ol>
  <li>
    <p>激活About me。</p>

    <p>Octopress已经准备了一个aboutme的侧边栏文件，在对应的Octopresss目录的/source/_includes/custom/asides子目录下的about.html文件
编辑octopress的配置文件_config.yml，修改default_asides项，增加内容:</p>

    <pre><code>custom/asides/about.html
</code></pre>
  </li>
  <li>
    <p>加入微博内容</p>

    <p>微博的插入代码可以到<a href="http://app.weibo.com/tool/weiboshow?sudaref=open.weibo.com" title="微博秀">微博的开放平台</a>获取（不要copy搜索出来，很可能旧了）</p>

    <p>然后将代码放入到about.html文件
 如我的about.html文件内容</p>
  </li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="text"><span class="line">    &lt;section&gt;
</span><span class="line">     &lt;h1&gt;About Me&lt;/h1&gt;
</span><span class="line">     &lt;iframe width=&quot;100%&quot; height=&quot;550&quot; class=&quot;share_self&quot;  frameborder=&quot;0&quot; scrolling=&quot;no&quot; src=&quot;http://widget.weibo.com/weiboshow/index.php?language=&amp;width=0&amp;height=550&amp;fansRow=2&amp;ptype=1&amp;speed=300&amp;skin=1&amp;isTitle=0&amp;noborder=0&amp;isWeibo=1&amp;isFans=0&amp;uid=1872168377&amp;verifier=1cd3a528&amp;dpc=1&quot;&gt;&lt;/iframe&gt;
</span><span class="line">    &lt;/section&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ol>
  <li>
    <p>重修部署</p>

    <pre><code>rake generate
rake deploy
</code></pre>
  </li>
</ol>

<p>这个时候主页和每个页面都会出现你的微博了。如果只想出现在主页上，后面介绍如何配置post页的配置，配置完后就只有主页出现了。</p>

<h5 id="comment">配置comment</h5>
<p>octopress已经集成了<a href="http://www.disqus.com disqus官网">disqus</a>系统，据说不是太好用，没有去试，只是感觉纯老外的东西，被中国用的很少，所以试着配置国内的<a href="http://dev.duoshuo.com 多说官网">多说</a></p>

<ol>
  <li>
    <p>用微博／百度账户开通多说，并配置一个应用指向你的blog，获得这个应用的short name</p>
  </li>
  <li>
    <p>在octopress的配置文件中增加以下内容 </p>

    <pre><code> #duoshuo comments
 duoshuo_comments: true
 duoshuo_short_name: &lt;你的多说的应用名&gt;  
</code></pre>
  </li>
  <li>
    <p>修改source/_includes/article.html文件，在disqus配置后面 </p>

    <pre><code>{% if site.disqus_short_name and page.comments != false and post.comments != false and site.disqus_show_comment_count == true %}
 | &lt;a href="{% if index %}{{ root_url }}{{ post.url }}{% endif %}#disqus_thread"
 data-disqus-identifier="{% if post.meta.disqus_id %}{{ post.meta.disqus_id }}{% else %}{{ site.url }}{{ post.url }}
 {% endif %}"&gt;Comments&lt;/a&gt; 
 {% endif %}
</code></pre>

    <p>增加多说的配置 </p>

    <pre><code> {% if site.duoshuo_short_name and page.comments != false and post.comments != false and site.duoshuo_comments == true %}
 | &lt;a href="{% if index %}{{ root_url }}{{ post.url }}{% endif %}#comments"&gt;Comments&lt;/a&gt;
 {% endif %}
</code></pre>
  </li>
  <li>
    <p>在source/_includes/post/目录里面增加一个duoshuo.html模块文件，然后从多说的应用对应的工具里面获取通用代码(不要用网上搜索到的代码)放入这个文件中 </p>
  </li>
  <li>
    <p>在source/_layouts/post.html 中的 disqus代码下</p>

    <pre><code> {% if site.disqus_short_name and page.comments == true %}
   &lt;section&gt;
     &lt;h1&gt;Comments&lt;/h1&gt;
     &lt;div id="disqus_thread" aria-live="polite"&gt;{% include post/disqus_thread.html %}&lt;/div&gt;
   &lt;/section&gt;
 {% endif %}    
</code></pre>

    <p>增加多说模块</p>

    <pre><code> {% if site.duoshuo_short_name and site.duoshuo_comments == true and page.comments == true %}
   &lt;section&gt;
     &lt;h1&gt;Comments&lt;/h1&gt;
     &lt;div id="comments" aria-live="polite"&gt;{% include post/duoshuo.html %}&lt;/div&gt;
   &lt;/section&gt;
 {% endif %}        
</code></pre>
  </li>
  <li>
    <p>取消disqus</p>

    <p>编辑_config.yml文件，将配置项disqus_show_comment_count设置为false就可以</p>
  </li>
  <li>
    <p>然后就是重新部署</p>

    <pre><code> rake generate
 rake deploy
</code></pre>
  </li>
</ol>

<p><strong>到目前为止，一个octopress在github上的配置就基本完成了</strong>
Octopress还有不少功能，后面用到再补充了</p>

<h4 id="blog-1">监控你的blog</h4>
<p>最简单的方法是使用<a href="https://www.google.com/analytics/">google analytics</a>，octopress已经集成了它，需要做的事情是</p>

<ol>
  <li>先在google analytics上开设一个web的app，获得tracking_id</li>
  <li>然后修改_config.yml，找到google_analytics_tracking_id，填上你的tracking_id。</li>
  <li>重新部署就可以了</li>
</ol>

<p>注意： _config.yml文件的配置要每个选项”:”后面需要有一个空格</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress在github上建blog的准备工作]]></title>
    <link href="http://duffqiu.github.io/blog/2014/01/25/octopresszai-githubshang-jian-blogde-zhun-bei-gong-zuo/"/>
    <updated>2014-01-25T23:03:42+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/01/25/octopresszai-githubshang-jian-blogde-zhun-bei-gong-zuo</id>
    <content type="html"><![CDATA[<h3 id="section">需要一堆的软件</h3>
<p>我都是在Mac上安装的，windows真的没有兴趣再试多一次了</p>

<h4 id="mac">Mac系统的准备工作</h4>
<p>这个部分或许和安装<a href="http://octopress.org" title="Octopress官网">Octopress</a>没什么关系，但是用Mac系统的话最好都装上，通常都用的上</p>

<ul>
  <li>
    <p>安装<a href="http://www.macports.org/index.php">MacPorts</a>，官网有比较详细的介绍，可以下pkg安装；也可以源文件安装，但是前提是必须安装xcode的command line工具，运行一下命令安装。</p>

    <pre><code> sudo xcode-select --install
</code></pre>

    <p>之前也是用pkg方式安装的，但是用</p>

    <pre><code>  sudo port -v selfupgrad
</code></pre>

    <p>的时候出现了错误，所以还是安装上xcode的command line工具就好了，好像是OSX Mavericks版本才有？这个问题是通过stackover上的帖子<a href="http://stackoverflow.com/questions/19622337/cant-update-macports-with-mac-os-x-mavericks">cant-update-macports-with-mac-os-x-mavericks</a>的解答获得的。port工具可以帮助安装所需要软件以及其依赖的软件，省去了很多找软件的麻烦，另外一个和macports差不多的软件管理工具是<a href="http://brew.sh" title="Brew官网">HomeBrew</a></p>
  </li>
  <li>安装<a href="http://git-scm.com/">Git</a>工具，如何使用Git还是看官方文档吧，这里就不讲了</li>
  <li>
    <p>安装ruby，OSX已经自带了</p>
  </li>
  <li>
    <p>用MacPorts安装rbenv</p>

    <pre><code>  sudo port install rbenv 安装octopress需要，但是具体什么用没有细研究
</code></pre>
  </li>
  <li>配置zsh shell，建议用zsh shell，具体如何配置可以参考Mactalk，如果后面讲书的内容写到blog里，是否有侵权？</li>
</ul>

<h4 id="octopress">获取Octopress并安装相应的包</h4>
<ol>
  <li>在机器上建立一个本地的git repo，并进入这个目录</li>
  <li>
    <p>获取Octopress源码</p>

    <pre><code>git clone git://github.com/imathis/octopress.git octopress
</code></pre>
  </li>
  <li>
    <p>安装依赖工具</p>

    <pre><code>cd octopress
gem install bundler
rbenv rehash #还是不太明白这个具体做什么用
bundle install
</code></pre>
  </li>
  <li>
    <p>安装Octopress默认的Theme</p>

    <pre><code>rake install
</code></pre>
  </li>
</ol>

<h4 id="github">配置Github</h4>
<p>生成一个名为<your github="" name="">.github.io的repository，注意这里<your github="" name="">是你的github的账户名，要用.io不是.com</your></your></p>

<h4 id="octopressgithub">初始化octopress并部署到Github</h4>
<ol>
  <li>
    <p>关联octopress和github</p>

    <pre><code>rake setup_github_pages 根据提示输入&lt;your github name&gt;.github.io的repository对应的地址
</code></pre>
  </li>
  <li>
    <p>部署octpress到Github</p>

    <pre><code>rake generate #生成静态文件
rake deploy #部署静态文件到github
</code></pre>
  </li>
  <li>
    <p>Push原文件到Github的source branch上，如果不做这步，github将只有生成好的文件</p>

    <pre><code>git add .
git commit -m &lt;'your message'&gt;
git push origin source
</code></pre>
  </li>
</ol>

<p>到这一步，基本上就将Octopress基本配置好了，后面将讲讲如何写blogger和配置Octopress</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Time to Setup Octopress in Github]]></title>
    <link href="http://duffqiu.github.io/blog/2014/01/25/first-time-to-setup-octopress-in-github/"/>
    <updated>2014-01-25T16:33:01+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/01/25/first-time-to-setup-octopress-in-github</id>
    <content type="html"><![CDATA[<h3 id="section">为什么要建这个博客呢？</h3>
<p>最近小孩放假在家，总爱写些短文，但是写完了就没了，所以想想是不是建个blog来记录一下。前两天看见<a href="http://weibo.com/acette" title="Leo's Weibo">Leo</a>同学在Github上用<a href="http://www.octopress.org" title="Octopress">Octopress</a>开的blog看得挺简单，直接用接近文本的<a href="http://wowubuntu.com/markdown/" title="markdown中文">markdown</a>语法写，所以今天下午baidu＋google的方式在自己的<a href="http://github.com/duffqiu" title="Duff's Github">Github</a>上试验一下，然后再打算给小孩开一个。</p>

<p>谁知道弄了一半才发现果然是只能给程序猿的东东，每次建个post都要用命令生成静态代码，然后再部署。。。这些果然不是一般人能用的。就如同它号称的“给黑客的blog框架”</p>

<p>另外从学习安装、试用的过程看，octopress真的不太适合用windows的童鞋，最好是用Apple Mac，简单很多。这两天刚看完<a href="http://www.amazon.cn/MacTalk·人生元编程-池建强-著/dp/B00FF5G3GK/ref=sr_1_1?ie=UTF8&amp;qid=1390661141&amp;sr=8-1&amp;keywords=mactalk">Mactalk</a>，感觉真的是不错，后面再来补这个的学习笔记，这也是我买的第一本收费的电子书，尽管只有¥2.99。</p>

<p>建议有Mac的童鞋都读读，里面提到了不少工具的用法。</p>

<p>不过弄完了一个下午，只有一个结论，那就是不适合小孩用，看来还要再花时间给小孩找个合适的，难道是个机会？儿童blog平台？只有iPad／android版就可以了，无需电脑版。</p>
]]></content>
  </entry>
  
</feed>
