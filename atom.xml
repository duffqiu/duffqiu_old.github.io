<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Duff Qiu's Blog]]></title>
  <link href="http://duffqiu.github.io/atom.xml" rel="self"/>
  <link href="http://duffqiu.github.io/"/>
  <updated>2014-03-01T11:57:10+08:00</updated>
  <id>http://duffqiu.github.io/</id>
  <author>
    <name><![CDATA[Duff Qiu]]></name>
    <email><![CDATA[duffqiu@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[设计模式：代理模式]]></title>
    <link href="http://duffqiu.github.io/blog/2014/02/23/she-ji-mo-shi-%3Adai-li-mo-shi/"/>
    <updated>2014-02-23T17:05:45+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/02/23/she-ji-mo-shi-:dai-li-mo-shi</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<hr />

<p>在编程中我们往往会使用到大对象，而对这些大对象的访问总是比较耗时，但是大对象又不是每次都需要使用到。例如从数据库读取出来的对象，或者从远程服务读取的对象。</p>

<h3 id="section-1">解决办法</h3>
<hr />
<p>使用一个代理对象，实现原有对象的接口，并由这个代理对象来负责大对象的创建、缓存等优化操作。
最常用的例子是数据的储存，我们希望将一个大对象很快的存到数据库中，但是又不希望等待以及做很多异常的处理，以为对于使用端而言并不关系存储方式和异常处理。所以可以通过Proxy对象来隔离这些特殊的处理，并通过多线程等异步手段提高性能。</p>

<h3 id="uml">UML图</h3>

<center><img src="http://duffqiu.github.io/images/plantuml/98d572a73413b32c676af3704f3fa8e2.png" /></center>

<h3 id="proxydecorate">Proxy与Decorate的区别</h3>

<p>－ Decorate的目的是给已有的类增加业务功能，而Proxy就像名义一样目的是为了某种而外目的给已有的类增加非业务功能</p>

<ul>
  <li>
    <p>从UML图可以看出，Proxy是图钉针对某个某个固定对象的，而Decorate是针对接口的，并且Proxy是负责对应的对象的生命周期的，让Decorate只是使用对应的对象。同时Proxy和对应的对象的数量关系并不确定，可以是1-*，也可以是1-1。而Decorate只能是1-1</p>
  </li>
  <li>
    <p>Decorate可以通过递归的方式叠加使用，而Proxy不作此用途</p>
  </li>
  <li>
    <p>当然既然类似，就可能可以混用。没有必要教条的说一定要明确Proxy或Decorate。</p>
  </li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Guice入门2]]></title>
    <link href="http://duffqiu.github.io/blog/2014/02/23/google-guiceru-men-2/"/>
    <updated>2014-02-23T14:26:45+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/02/23/google-guiceru-men-2</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<hr />
<p>在使用Guice做依赖注入的时候，很可能会发生在一个依赖模块（Module）中有多个同类型的接口需要注入，但是又需要根据不同的使用类注入不同的具体对象。如果只是简单的申明为接口注入对象，则会使用同一个对象。如：<code>bind(IDescription.class).to(ConnectionDescription.class);</code></p>

<h3 id="section-1">解决办法</h3>
<hr />
<p>使用<code>@Named("&lt;xxxx&gt;")</code>来命名需要注入的接口，然后在注入的时候指定名称来特定注入，如： </p>

<p>顶层使用类中：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="nd">@Inject</span>
</span><span class="line"><span class="nd">@Named</span><span class="o">(</span><span class="s">&quot;SendMsgWithAuditDesc&quot;</span><span class="o">)</span>
</span><span class="line"><span class="kd">private</span> <span class="n">IDescription</span> <span class="n">desc</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Module configure方法中</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="c1">//为什么的注入</span>
</span><span class="line"><span class="n">bind</span><span class="o">(</span><span class="n">IDescription</span><span class="o">.</span><span class="na">class</span><span class="o">).</span><span class="na">to</span><span class="o">(</span><span class="n">ConnectionDescription</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class="line">
</span><span class="line"><span class="c1">//指定名称的注入</span>
</span><span class="line"><span class="n">bind</span><span class="o">(</span><span class="n">IDescription</span><span class="o">.</span><span class="na">class</span><span class="o">).</span><span class="na">annotatedWith</span><span class="o">(</span>
</span><span class="line">	        <span class="n">Names</span><span class="o">.</span><span class="na">named</span><span class="o">(</span><span class="s">&quot;SendMsgWithAuditDesc&quot;</span><span class="o">)).</span><span class="na">toProvider</span><span class="o">(</span>
</span><span class="line">	        <span class="n">SendMessageWithAuditDescriptionProvider</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这里用了prvoider是因为需要使用参数的构造函数。Provider类如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SendMessageWithAuditDescriptionProvider</span> <span class="kd">implements</span>
</span><span class="line">        <span class="n">Provider</span><span class="o">&lt;</span><span class="n">ConnectionDescription</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@Override</span>
</span><span class="line">    <span class="kd">public</span> <span class="kd">final</span> <span class="n">ConnectionDescription</span> <span class="nf">get</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">	<span class="k">return</span> <span class="k">new</span> <span class="nf">ConnectionDescription</span><span class="o">(</span><span class="s">&quot;Audit with SMPP&quot;</span><span class="o">,</span>
</span><span class="line">	        <span class="s">&quot;Send Msg with audit via SMPP&quot;</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>代码可以参考<a href="https://github.com/duffqiu/DesignPatternDemo">DesignPatternDemo的Decorator部分</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Guice入门1]]></title>
    <link href="http://duffqiu.github.io/blog/2014/02/22/google-guiceru-men-1/"/>
    <updated>2014-02-22T20:26:34+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/02/22/google-guiceru-men-1</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<hr />
<p>在一个系统中，多个模块总是通过各种关系关联在一起的。但是一般的编程方式总是讲如何组装各种模块与处理业务逻辑混合在一块，造成代码的维护比较困看，也容易造成代码的行数很大。</p>

<h3 id="section-1">解决办法</h3>
<hr />

<p>在前面我们已经介绍过<a href="http://duffqiu.github.io/blog/2014/02/19/she-ji-mo-shi-%3Aioche-yi-lai-zhu-ru/">IoC</a>。可以通过自己创建单独的模块来维护类间的依赖。但是现在已经有成熟的框架帮助我们完成这个。主要有Spring和<a href="https://code.google.com/p/google-guice/">Google Guice</a>。这里主要讲一下如何使用Google Guice，这是一个基本的入门使用，后面如果用到高级的地方再讲。</p>

<h3 id="guice">Guice的使用</h3>

<h4 id="section-2">简介</h4>

<p>Google Guice是通过代码的方式来简单维护类间的依赖关系，不象Spring通过XML或annotation然后通过autoscan的方式来维护依赖。个人感觉好的地方是，对于程序员而言，代码方式更加贴近，也更容易理解。</p>

<h4 id="maven">使用方式(基于maven)</h4>
<ul>
  <li>在maven项目中增加Guice的jar包。注意，这里我们没有用AOP，所以特地讲AOP去掉，从而减少了对AOP的依赖</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">&lt;dependency&gt;
</span><span class="line">	&lt;groupId&gt;com.google.inject&lt;/groupId&gt;
</span><span class="line">	&lt;artifactId&gt;guice&lt;/artifactId&gt;
</span><span class="line">	&lt;version&gt;3.0&lt;/version&gt;
</span><span class="line">	&lt;classifier&gt;no_aop&lt;/classifier&gt;
</span><span class="line">&lt;/dependency&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>
    <p>在依赖的顶层被使用的类上指明要注入的类</p>

    <p>注入方式有：  </p>

    <ul>
      <li>
        <p>属性注入：在对应的属性上使用<code>@inject</code>的annotation，前提是要有默认的public的无參构造函数，建议这种方式</p>
      </li>
      <li>
        <p>构造函数注入：在对应的构造函数上使用<code>@inject</code>的annotation，前提是该构造函数带有需要被注入的参数。</p>
      </li>
    </ul>
  </li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SendMessageImpl</span> <span class="kd">implements</span> <span class="n">ISendMessage</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@Inject</span>
</span><span class="line">    <span class="kd">private</span> <span class="n">SmppSendMsg</span> <span class="n">smpp</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@Inject</span>
</span><span class="line">    <span class="kd">private</span> <span class="n">IDescription</span> <span class="n">desc</span><span class="o">;</span>
</span><span class="line">    <span class="o">...</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>
    <p>生成绑定关系的类，该类必须是继承于AbstractModule，然后在重载<code>configure</code>方法，在该方法中指定绑定关系。Best Practice：该类的命名后缀建议为BindingModule。如果注入的为具体的类，则无需在<code>configure</code>方法中指定绑定关系，如果为接口，则需要绑定到具体的类如：<code>bind(&lt;Interface&gt;.class).to(&lt;ConcreteClass&gt;.class)</code>。注意就算<code>configure</code>方法为空，都要生成一个Module类。Best Practise：尽量使用接口而不是具体的类，以便于以后更改类的实现而不用更改业务类的代码，因为注入都是在这个Module类完成。</p>
  </li>
  <li>
    <p>如果注入的类必须使用带参数的构造函数，则必须手工完成类的实例的生成。但是都必须在module类中指定。</p>

    <p>主要有两种方式手工完成类的实例的生成：</p>

    <ul>
      <li>
        <p>使用<code>@provider</code> annotation指定类的生成方法，该方法必须是返回一个该类的实例，但是这种方式无法让Guice自动完成Singleton。</p>
      </li>
      <li>
        <p>给需要手工生成实例的类创建一个provider类，该类实现 <code>Provider&lt;T&gt;</code>接口，然后在<code>configure</code>方法中使用<code>bind(xxx.class).toProvider(yyy.class)</code>指定手工生成实例的类。如果需要Singleton则在后面增加指定如<code>bind(xxx.class).toProvider(yyy.class).in(
        Singleton.class)</code>。Best Practice：该类的命名后缀建议为Provider。</p>
      </li>
    </ul>
  </li>
  <li>
    <p>客户端的使用方式 </p>

    <p>使用生成的BindingModule获取一个Inject实例，然后使用该实例创建需要的对象。如： </p>
  </li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">Injector</span> <span class="n">injector</span> <span class="o">=</span> <span class="n">Guice</span><span class="o">.</span><span class="na">createInjector</span><span class="o">(</span><span class="k">new</span> <span class="n">SendMessageBindingModule</span><span class="o">());</span>
</span><span class="line"><span class="n">ISendMessage</span> <span class="n">sender</span> <span class="o">=</span> <span class="n">injector</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="n">SendMessageImpl</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class="line"><span class="n">sender</span><span class="o">.</span><span class="na">xxx</span><span class="o">();</span>
</span><span class="line"><span class="o">...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-3">小插曲</h3>
<p>这是在写Decorator设计模式的时候分心出来写的，代码可以参考<a href="https://github.com/duffqiu/DesignPatternDemo">DesignPatternDemo的Decorator部分</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PlantUML小技巧]]></title>
    <link href="http://duffqiu.github.io/blog/2014/02/22/plantumlxiao-ji-qiao/"/>
    <updated>2014-02-22T15:10:21+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/02/22/plantumlxiao-ji-qiao</id>
    <content type="html"><![CDATA[<h3 id="plantuml">PlantUML画模块图/组件图的问题</h3>

<p>在使用PlantUML的时候，如果模块中嵌套模块然后将关联关系定义在子模块中，则很容易造成模块的混沦。</p>

<h3 id="section">解决办法</h3>
<p>我个人一个比较好的practice是这样一个模式，PlantUML代码如下<br />
同时最好的方式是在纸上先用笔画好初稿</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
</pre></td><td class="code"><pre><code class=""><span class="line">@startuml
</span><span class="line">title "组件图Best Practice"
</span><span class="line">
</span><span class="line">'全局的component
</span><span class="line">component [global 1]
</span><span class="line">component [global 2]
</span><span class="line">interface "inferface 1" as if1
</span><span class="line">interface "inferface 2" as if2
</span><span class="line">...
</span><span class="line">
</span><span class="line">'模块定义
</span><span class="line">package "Parent1" {
</span><span class="line">	package "Children1-1" {
</span><span class="line">		'只定义component，不定义关心
</span><span class="line">		component [1-1-1]
</span><span class="line">		component [1-1-2]
</span><span class="line">		...
</span><span class="line">	}
</span><span class="line">	package "Children1-2" {
</span><span class="line">		component [1-2-1]
</span><span class="line">		component [1-2-2]
</span><span class="line">		...
</span><span class="line">	}
</span><span class="line">	
</span><span class="line">}
</span><span class="line">
</span><span class="line">package "Parent2" {
</span><span class="line">	package "Children2-1" {
</span><span class="line">		'只定义component，不定义关心
</span><span class="line">		component [2-1-1]
</span><span class="line">		component [2-1-2]
</span><span class="line">		...
</span><span class="line">	}
</span><span class="line">	package "Children2-2" {
</span><span class="line">		component [2-2-1]
</span><span class="line">		component [2-2-2]
</span><span class="line">		...
</span><span class="line">	}
</span><span class="line">	
</span><span class="line">}
</span><span class="line">
</span><span class="line">'完成component定义后再定义关系不要再component中定义关系，容易造成有些component还未必定义就被使用
</span><span class="line">
</span><span class="line">'定义全局和子模块的关系
</span><span class="line">[global 1]..&gt;[global 2]
</span><span class="line">[global 1] - if1
</span><span class="line">[global 2] - if2
</span><span class="line">[global 1] ..&gt; [1-1-1]
</span><span class="line">
</span><span class="line">'定义Parent1和children间的关系已经与其它Parent或children的关系
</span><span class="line">[1-1-1]..&gt;[1-1-2]
</span><span class="line">[1-1-1]..&gt;[1-2-1]
</span><span class="line">[1-2-1]..&gt;[1-2-2]
</span><span class="line">[1-1-1]..&gt;[2-1-1]
</span><span class="line">
</span><span class="line">'定义Parent2和children间的关系已经与其它Parent或children的关系
</span><span class="line">[2-1-1]..&gt;[2-1-2]
</span><span class="line">[2-1-1]..&gt;[2-2-1]
</span><span class="line">[2-1-1]..&gt;[2-2-2]
</span><span class="line">
</span><span class="line">@enduml</span></code></pre></td></tr></table></div></figure></notextile></div>

<div style="text-decoration:underline; font-size: 16px; color: red" onclick="showdiv('componentuml')"> 最后的UML图如下： </div>

<div style="display:none" class="prev" id="componentuml" onclick="hidediv('componentuml')" title="点击关闭">



<center><img src="http://duffqiu.github.io/images/plantuml/0fc7dd179febc49855cadf23e3f82408.png" /></center>

</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式：装饰器模式]]></title>
    <link href="http://duffqiu.github.io/blog/2014/02/22/she-ji-mo-shi-%3Azhuang-shi-qi-mo-shi/"/>
    <updated>2014-02-22T15:09:29+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/02/22/she-ji-mo-shi-:zhuang-shi-qi-mo-shi</id>
    <content type="html"><![CDATA[<h3 id="section">装饰器模式原理</h3>
<hr />
<ol>
  <li>模式名称：装饰器模式 (Decorator Pattern)，另外一个别名是包装器模式(Wrapper)</li>
  <li>问题：在开发过程，当一个比较大的类实现并测试后，将逐渐被稳定下来。但是这个时候有了新的需求，需要增强原由的功能，一般的做法是直接修改原由的类，但是会影响到原有类的稳定性，所有的测试都要回归，并且新增代码会对已有功能的稳定性带来影响，而且违背OO的开放－封闭原则。另外一个做法是继承原有的类然后扩展功，但是会造成代码重复，而且扩展性不高，同时如果类已经是final的则无法通过这种方式达到目的。</li>
  <li>解决方案：提供一个与原来相同接口的类，但是原来的实现累作为新累的一个部分。这样对于客户端而言并没有改变，但是实际行为变成了除原有的功能外，新增了功能。同时可以由多个新增功能的类叠加来处理。简单讲就是<code>Interface i = new A();</code>变成了<code>Interface i = new B(new A)</code></li>
  <li>结论：无需静态继承，可以灵活扩展。可以作为AOP的简单实现。缺点是产生很多类似的类，容易引起歧异。</li>
</ol>

<h3 id="section-1">案例说明</h3>
<hr />
<p>这里提供一个简单的业务需求来完成这个例子。
需求的简单说明如下 ：系统一个模块给系统的其它部分用以发送用户通知。原本已经实现好了SMPP发送的功能，但是现在为了统计方便，需要在每次发送时记录到内存中/文件中，以便审计，但是这个对于客户端使用必须是透明的</p>

<h4 id="uml">UML图</h4>

<center><img src="http://duffqiu.github.io/images/plantuml/b80dc54557db601615cc3bb69ca1ba28.png" /></center>

<h3 id="section-2">模式要点</h3>

<p>一个类A实现接口I，同时拥有一个同样实现接口I的对象。客户端调用的时候，可以实例化多个实现接口I的对象，然后叠加在一起后给客户端使用。客户端只是看到I提供的功能描述，并不知道具体的实现叠加了多少。
这个模式的最大目的就是能够动态的给类增加功能。</p>

<p>使用中可以通过I i = new A(new B(new C))的方式使用，可以通过Guice等通过Inject的方式组装。在<a href="https://github.com/duffqiu/DesignPatternDemo">DesignPatternDemo的Decorator部分</a>例子中同时提供了这两种方式的代码。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Openstack上安装AppScale]]></title>
    <link href="http://duffqiu.github.io/blog/2014/02/19/openstackshang-an-zhuang-appscale/"/>
    <updated>2014-02-19T21:44:13+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/02/19/openstackshang-an-zhuang-appscale</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<hr />
<p>之前用Mac安装了virtual box的Appscale，因为是Appscale的一个安装好的Image，配置一下启动就能用。但是如果真要安装到虚拟主机上，就不是这个方式了。所以找了个Openstack的Unbuntu的虚拟主机尝试安装，结果血泪不少，需要配置proxy是最啃爹的部分。估计官方没有试过在用proxy的情况下安装。</p>

<h3 id="section-1">解决办法</h3>
<hr />
<p>因为官网的文档在openstack上安装只是简单的介绍，所以中间的问题都需要自己解决了。</p>

<ul>
  <li>
    <p>安装unbuntu VM
在Openstack中生成一个instance，我这里选用了unbuntu server 12.04，估计redhat也可以，不过我没有试，配置至少要3-4G RAM，20G的硬盘，2个virtual CPU，然后启动该VM，并看看该VM最后的IP地址</p>
  </li>
  <li>
    <p>设置SSH配置
 如果用openstack安装VM后，需要用private key才可以登录(<code>ssh root@service_IP</code>)，则必须先修改SSH的配置，然密码可登录，具体方式是更改<code>/etc/ssh/sshd_conf</code>文件，将<code>PasswordAuthentication</code>参数设置为<code>true</code>，然后更改root密码用命令<code>passwd</code>，最后重启SSH，用命令<code>/etc/init.d/ssh restart</code></p>
  </li>
  <li>
    <p>设置各种应用的代理</p>
    <ul>
      <li>首先设置apt-get的代理，新增一个<code>/etc/apt/apt.conf</code>配置文件，内容为</li>
    </ul>
  </li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">   Acquire::http::proxy "http://&lt;username&gt;:&lt;password&gt;@&lt;proxy&gt;:&lt;port&gt;/";
</span><span class="line">   Acquire::ftp::proxy "ftp://&lt;username&gt;:&lt;password&gt;@&lt;proxy&gt;:&lt;port&gt;/";
</span><span class="line">   Acquire::https::proxy "https://&lt;username&gt;:&lt;password&gt;@&lt;proxy&gt;:&lt;port&gt;/";</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>将proxy改为对应的代理地址，port为代理端口，如果需要认证，则设置用户名和密码，不然就去掉用户名和密码</p>

<p>－ 设置ruby的gem的代理，在root的home目录下，创建.gemrc文件</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">http_proxy: http://&lt;username&gt;:&lt;password&gt;@&lt;proxy&gt;:&lt;port&gt;
</span><span class="line">https_proxy: http://&lt;username&gt;:&lt;password&gt;@&lt;proxy&gt;:&lt;port&gt;
</span><span class="line">ftp_proxy: http://&lt;username&gt;:&lt;password&gt;@&lt;proxy&gt;:&lt;port&gt;</span></code></pre></td></tr></table></div></figure></notextile></div>
<ul>
  <li>设置wget以及其它代理，在对应的shell文件中(如bash的.bashrc)，增加代理变量设置，然后激活<code>source .bashrc</code></li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">export http_proxy=http://&lt;username&gt;:&lt;password&gt;@&lt;proxy&gt;:&lt;port&gt;
</span><span class="line">export https_proxy=http://&lt;username&gt;:&lt;password&gt;@&lt;proxy&gt;:&lt;port&gt;
</span><span class="line">export ftp_proxy=http://&lt;username&gt;:&lt;password&gt;@&lt;proxy&gt;:&lt;port&gt;
</span><span class="line">export HTTP_PROXY=http://&lt;username&gt;:&lt;password&gt;@&lt;proxy&gt;:&lt;port&gt;
</span><span class="line">export HTTPS_PROXY=http://&lt;username&gt;:&lt;password&gt;@&lt;proxy&gt;:&lt;port&gt;
</span><span class="line">export FTP_PROXY=http://&lt;username&gt;:&lt;password&gt;@&lt;proxy&gt;:&lt;port&gt;</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>设置java代理，因为安装的中间会用到java的下载等，在对应的shell文件中(如bash的.bashrc)，增加代理变量设置</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">export _JAVA_OPTIONS='-Dhttp.proxyHost=&lt;proxy&gt; -Dhttp.proxyPort=&lt;port&gt;'</span></code></pre></td></tr></table></div></figure></notextile></div>
<ul>
  <li>增加git代理（针对git协议），因为要用到apt-get，所以apt-get的代理设置要先安装好
 先用apt-get安装socat
 <code>sudo apt-get install socat</code>，
 然后配置git代理文件，先<code>sudo touch /usr/bin/gitproxy</code>，然后编辑该文件的内容为</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">PROXY</span><span class="o">=</span>&lt;proxy&gt;
</span><span class="line"><span class="nv">PROXYPORT</span><span class="o">=</span>&lt;port&gt;
</span><span class="line"><span class="nv">PROXYAUTH</span><span class="o">=</span>&lt;username:password&gt;
</span><span class="line"><span class="nb">exec </span>socat STDIO PROXY:<span class="nv">$PROXY</span>:<span class="nv">$1</span>:<span class="nv">$2</span>,proxyport<span class="o">=</span><span class="nv">$PROXYPORT</span>,proxyauth<span class="o">=</span><span class="nv">$PROXYAUTH</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然后更改gitproxy的权限为可执行<code>sudo  chmod +x /usr/bin/gitproxy</code>，最后是更改git的配置，用命令<code>git config --global core.gitproxy gitproxy</code>
   这里有点啃爹，因为这个时候你还没有安装git，根本就没有git命令，所以只能先用 apt-get安装git，尽管Appscale的脚本有自动安装git。或者等到安装过程中git无发clone appscale的时候再配这一步</p>

<ul>
  <li>更新Python的pip工具
 这个是最坑爹的，因为pip依赖与Python，而如果VM没有带Python，只能等到安装到pip这一步出错了再来配置它，因为Appscale依赖的python的版本的问题，自行先安装Python似乎不是太好。这里需要更新pip是因为Appscale安装的是1.0版本，这个版本太低，无法用代理的方式（似乎是没有读取系统代理变量），所以需要更新到新的版本。执行一下命令：</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">sudo apt-get purge python-pip
</span><span class="line">curl https://raw.github.com/pypa/pip/master/contrib/get-pip.py | sudo python
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>
    <p>设置path</p>

    <p>增加<code>/usr/local/bin</code> (因为pip安装在这个目录中)，并在home目录激活shell配置<code>source .bashrc</code></p>
  </li>
  <li>安装AppScale
    <ol>
      <li>可以用密码登录SSH了和apt-get以及wget的代理已经配置好</li>
      <li>执行命令：<code>export HOME=/root</code> 和<code>wget -O - http://bootstrap.appscale.com | sh</code></li>
      <li>如果错误提示是git，则安装git代理，重新这行2的命令</li>
      <li>如果错误提示是pip，则无需重新执行2的命令，因为appscale目录已经存在，只需要到<code>appscale/debian</code>目录下执行<code>appscale_build.sh</code>就可</li>
      <li>如果错误提示是java，则安装JAVA代理，然后执行4</li>
    </ol>
  </li>
  <li>安装AppScale-Tool
到<code>appscale-tools/debian</code>目录下执行<code>appscale_build.sh</code>，然后确保一下内容已经配置到shell文件(.bashrc)中</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nb">export </span><span class="nv">TOOLS_PATH</span><span class="o">=</span>/usr/local/appscale-tools
</span><span class="line"><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="k">${</span><span class="nv">PATH</span><span class="k">}</span>:<span class="k">${</span><span class="nv">TOOLS_PATH</span><span class="k">}</span>/bin
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>配置Appscale</li>
</ul>

<p>执行<code>appscale init cluster</code>，然后更改AppScalefile，将<code>ips_layout</code>里的IP地址都改为VM的地址</p>

<ul>
  <li>运行AppScale</li>
</ul>

<p>执行<code>appscale up</code>
中间会要求输入admin的管理员的email和密码</p>

<ul>
  <li>查看安装后状态</li>
</ul>

<p>如果正常启动，则可以通过<code>http://&lt;vm ip&gt;:1080/status</code>查看当前状态。如果只是这页全现实勾也是不行的，需要用启动时配置的email登录，然后点击Monit Dashboard(这个默认用户名和密码是admin/monit)，所有的process都应该时Running的状态</p>

<p>如果正常启动，则可以通过<code>http://&lt;vm ip&gt;:1080/status</code>查看当前状态。点击TaskQueue Monitor(这个默认用户名和密码是appscale/appscale)，则应该现实有两个工作的Workers，一个是apichecker一个是appscaledashboard</p>

<p>到此，真个Appscale的手工安装就结束了，然后就是可以部署应用。Googel App Engine的开发如何做，我还没有去看，后面有机会再写这个部分</p>

<p><strong>个人感叹：Open source真个给我们带来了很多的便利和选择，但是这的有很多坑是这些创始者没有遇到过。真的是需要有个个方面的能力才能去在生产环境中到它。</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式：IoC和依赖注入]]></title>
    <link href="http://duffqiu.github.io/blog/2014/02/19/she-ji-mo-shi-%3Aioche-yi-lai-zhu-ru/"/>
    <updated>2014-02-19T20:40:33+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/02/19/she-ji-mo-shi-:ioche-yi-lai-zhu-ru</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<p>在生成对象的时候，我们通常会用到工厂方法模式，但是这会造成factory类过多不好维护的问题，也不好测试的问题。</p>

<h3 id="section-1">解决办法</h3>
<p>为了减少factory类，现在流行的做法是使用IoC(控制反转)。这个严格上不是个模式。IoC的实现方式通常有两种：</p>

<ol>
  <li>Service Locator，服务定位器</li>
  <li>Dependency Injection，依赖注入</li>
</ol>

<p>因为服务定位器的做法侵入代码比较严重，同时比较难测试，一般很少用。</p>

<p>依赖注入比较流行，主要是因为开源框架的支持。有两大框架，一个是Spring，一个是<a href="https://code.google.com/p/google-guice/">Google Guice</a>。因为Spring还有别的功能（如template的方式我比较喜欢，很多东西都简化很多），不能整体对比，只能对比DI的功能。网上有不少的对比，但是对与一般的开发而言没有太大的参考价值，主要习惯性问题。我个人觉得需要考虑只是整体上除了DI还有没有别的需要，如果有就用Spring，没有就用Guice，毕竟Guice小而且依赖少（就两个Jar包），据说Guice速度块。（但是由速度决定开发包的选择的需求基本很少）。后面抽时间我打算好好看一遍Guice真么使用。</p>

<p>注入的方式分为一下几种：
1. Setter
2. Constructor
3. Annotation
4. Interface
5. Parameter
6. Propagating (传播)
7. 其它</p>

<p>对于注入个人觉得需要仔细分辨具体是否需要，不要什么都通过注入完成。一些简单的对象如log对象，完全没有必要注入。</p>

<h3 id="section-2">小插曲</h3>
<p>今天和同事谈到这个注入框架的问题，顺便提到了<a href="https://code.google.com/p/guava-libraries/wiki/GuavaExplained">google guava开发库</a>，这个值得研究研究细节。尽然Google都在用，那么日常中需要封装的一些工具、通用结构等都应该涵盖了。这个开发的年代，自己再创造工具已经没有太大必要了。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式：原型模式]]></title>
    <link href="http://duffqiu.github.io/blog/2014/02/17/she-ji-mo-shi-%3Ayuan-xing-mo-shi/"/>
    <updated>2014-02-17T23:23:31+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/02/17/she-ji-mo-shi-:yuan-xing-mo-shi</id>
    <content type="html"><![CDATA[<h3 id="section">原型模式原理</h3>
<hr />
<ol>
  <li>模式名称：原型模式 (Prototype Pattern)</li>
  <li>问题：在创建大的聚合对象的时候，如果从每个层次的自对象开始创建，则比较麻烦，同时带来中间过程的错误风险。而往往需要的新的对象只是某个现有对象的基础上改变一小部分的内容</li>
  <li>解决方案：利用Java对象的clone的方式，根据实际情况对已有对象进行软复制或者硬复制（通过序列化的方式）</li>
  <li>结论：以一个已有的对象做原型，通过最小的操作得到需要的新的对象</li>
</ol>

<h3 id="uml">UML图例</h3>
<hr />

<center><img src="http://duffqiu.github.io/images/plantuml/ec53b9f24e24cb7d469c33b648a3925f.png" /></center>

<h3 id="section-1">模式讲解</h3>

<ol>
  <li>Java的最顶的类Object本身就提供clone方法，但是是protected的。</li>
  <li>如果子类需要实现clone方法，还不许继承cloneable接口，然后重载这个方法，根据需要将该方法改为public的。</li>
  <li>Object的clone方法的实现是采用逐字节的方式从内存中复制数据。如果类中引用了别的对象，则复制的是对象的应用（即对象地址），而不是复制应用对象的内容，所以这种方式是浅复制。</li>
  <li>要实现深复制，则可以利用序列化反序列化这个工程等到一个值copy的对象。但是前提是类以及它应用的对象都必须实现serializable接口，可被序列化。</li>
  <li>Apache的common lang提供了SerializationUtils工具类，改类的clone方法完成通过序列化的clone</li>
</ol>

<h3 id="section-2">代码以及测试参考</h3>
<p>参见我的github代码：<a href="https://github.com/duffqiu/DesignPatternDemo">DesignPatternDemo</a>，注意改代码是通过gitflow的管理的，请参考develop branch</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式：工厂方法模式]]></title>
    <link href="http://duffqiu.github.io/blog/2014/02/15/she-ji-mo-shi-%3Agong-han-fang-fa-mo-shi/"/>
    <updated>2014-02-15T22:15:00+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/02/15/she-ji-mo-shi-:gong-han-fang-fa-mo-shi</id>
    <content type="html"><![CDATA[<h3 id="section">工厂方法模式原理</h3>
<hr />
<ol>
  <li>模式名称：工厂方法模式 (Facotory Method)</li>
  <li>
    <p>问题：</p>

    <ul>
      <li>对象的创建比较复杂，需要关联其它对象／资源（如配置文件，数据库等）</li>
      <li>需要写一堆if-else的方式来决定使用那个对象的具体类</li>
      <li>希望隐藏创建过程的细节，降低偶和度</li>
      <li>优化性能，在创建过程中缓存对象等 </li>
      <li>使用者只关心接口，而不关心具体的类，因为用new的方式总是要和具体的类偶和 </li>
    </ul>
  </li>
  <li>解决方案：使用一个类来帮助创建需要的对象，而该类有外部传入使用方，使用方只是对创建类的接口依赖（写到这里的时候，发现漫谈设计模式的书的UML的图我的理解不同，应该是client依赖与工厂接口，而不是关联工厂对象）</li>
  <li>结论：提高对象的封装，减少了使用方的依赖</li>
</ol>

<h3 id="uml">UML图例</h3>
<hr />

<center><img src="http://duffqiu.github.io/images/plantuml/197a8f4ca8d157f5be99c4f58d0aafb9.png" /></center>

<h3 id="section-1">示例代码</h3>
<hr />
<p>这个比较简单就不用代码举例了，看看上面的UML图就能写出代码了。关键是在合适的场景下要想起来用到它</p>

<h3 id="section-2">静态工厂方法</h3>
<p>原来就是避免了过多的产生工厂类，而将自身设计为工厂，并提供静态工厂方法来创建对象。劣势是失去类面向对象的特征，无法继承、动态多态等。注意：静态方法是无法被覆盖的。</p>

<center><img src="http://duffqiu.github.io/images/plantuml/12638a4e83f0df76baccacef5388039e.png" /></center>

<h3 id="section-3">书籍纠正</h3>
<ol>
  <li>在《漫谈设计模式》的P50页的setCurrentConnection方法没有必要提供</li>
  <li>在《漫谈设计模式》的P51页的closeConnect方法，没有必要提供函数参数</li>
</ol>

<h3 id="threadlocal">小插曲：ThreadLocal的并发性</h3>
<p>在工厂方法模式中，可以利用ThreadLocal来做对象的缓冲池。但是里面有个比较可爹的问题，如果在线程中被加入到ThreadLocal中，但是在线程结束前不将这个对象手动的移除出ThreadLocal，则ThreadLocal会被另外一个线程使用到。具体可以看我的Github上的<a href="https://github.com/duffqiu/DesignPatternDemo">DesignPatternDemo的代码</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Maven工程中加入PlantUML]]></title>
    <link href="http://duffqiu.github.io/blog/2014/02/13/mavengong-cheng-zhong-jia-ru-plantuml/"/>
    <updated>2014-02-13T23:37:47+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/02/13/mavengong-cheng-zhong-jia-ru-plantuml</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<p>设计于编码的最好实践是设计文档与代码文档放在最近的地方，便于同时修改和更新。最好都放入到一个代码工程中</p>

<h3 id="section-1">解决办法</h3>
<p>PlantUML的Mavin Plugin是最好的解决办法。在Maven工程中建一个目录存放PlantUML的设计文件，txt文件就可以。如：<code>src/main/plantuml</code></p>

<ol>
  <li>
    <p>然后确保已经安装好了graphvizDot。</p>
  </li>
  <li>
    <p>然后就可以写plantuml的文本</p>
  </li>
  <li>
    <p>修改maven的工程的pom.xml文件，增加<a href="https://github.com/duffqiu/maven-plantuml-plugin">PlantUML的Maven Plugin</a>，注意用的版本，我用时maven plugin最新的版本为7954，plantuml版本是7991，代码如下</p>
  </li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">    &lt;plugin&gt;
</span><span class="line">      &lt;groupId&gt;com.github.jeluard&lt;/groupId&gt;
</span><span class="line">      &lt;artifactId&gt;plantuml-maven-plugin&lt;/artifactId&gt;
</span><span class="line">      &lt;version&gt;7954&lt;/version&gt;
</span><span class="line">      &lt;configuration&gt;
</span><span class="line">        &lt;graphvizDot&gt;/opt/local/bin/dot&lt;/graphvizDot&gt;
</span><span class="line">        &lt;sourceFiles&gt;
</span><span class="line">          &lt;directory&gt;<span class="k">${</span><span class="nv">basedir</span><span class="k">}</span>&lt;/directory&gt;
</span><span class="line">          &lt;includes&gt;
</span><span class="line">            &lt;include&gt;src/main/plantuml/*.txt&lt;/include&gt;
</span><span class="line">          &lt;/includes&gt;
</span><span class="line">        &lt;/sourceFiles&gt;
</span><span class="line">      &lt;/configuration&gt;
</span><span class="line">      &lt;dependencies&gt;
</span><span class="line">        &lt;dependency&gt;
</span><span class="line">          &lt;groupId&gt;net.sourceforge.plantuml&lt;/groupId&gt;
</span><span class="line">          &lt;artifactId&gt;plantuml&lt;/artifactId&gt;
</span><span class="line">          &lt;version&gt;7991&lt;/version&gt;
</span><span class="line">        &lt;/dependency&gt;
</span><span class="line">      &lt;/dependencies&gt;
</span><span class="line">    &lt;/plugin&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>因为用port安装的graphvizDot目录不在<code>/usr/bin</code>下，所以需要特定指定改目录</p>

<p>然后用maven的build的target：<code>com.github.jeluard:plantuml-maven-plugin:generate</code>就可以将plantuml下的文件转成UML图形了。图形文件放在<code>target/plantuml</code>目录下</p>

<p>如果用Eclipse，则可以安装对应的<a href="http://plantuml.sourceforge.net/updatesitejuno/">eclipse插件，安装地址 </a>，这样在写plantuml文本的时候就可以同时看到图形了。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress中使用plantuml]]></title>
    <link href="http://duffqiu.github.io/blog/2014/02/12/octopresszhong-shi-yong-plantuml/"/>
    <updated>2014-02-12T22:36:09+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/02/12/octopresszhong-shi-yong-plantuml</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<hr />
<p>一直想便利的在Octopress使用UML，之前没有太好的办法，只能在astah画好后存为图片文件，然后再用链接的方式使用</p>

<h3 id="section-1">解决办法</h3>
<hr />
<p>现在经Leo同学推荐，使用文本的UML语言的方式可以写出UML图，他就是<a href="http://plantuml.sourceforge.net">Plant UML</a>，同时在github上有个octopress的插件可以直接支持在Markdown中使用Plant UML，它是<a href="https://github.com/yjpark/jekyll-plantuml">jekyll-plantuml</a></p>

<h4 id="section-2">安装办法</h4>
<ol>
  <li>在octopress上建一个<code>_lib</code>的目录</li>
  <li>下载<a href="http://plantuml.sourceforge.net/download.html">plantuml.jar</a>到上面建的<code>_lib</code>的目录</li>
  <li>下载<a href="https://github.com/yjpark/jekyll-plantuml/raw/master/plantuml.rb">plantuml.rb</a>插件到<code>plugin</code>目录</li>
  <li>
    <p>修改<code>_config.yml</code>文件，增加platuml的配置如下</p>

    <pre><code># PlantUML
plantuml_jar: _lib/plantuml.jar
plantuml_background_color: "#f8f8f8"
</code></pre>
  </li>
  <li>然后用</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="o">{</span>% plantuml %<span class="o">}</span>
</span><span class="line">...
</span><span class="line"><span class="o">{</span>% endplantuml %<span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>括上platuml的代码就可以了，下面是一个简单的示例</p>

<p>源码如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="o">{</span>% plantuml %<span class="o">}</span>
</span><span class="line">Alice -&gt; Bob: Authentication Request
</span><span class="line">Bob --&gt; Alice: Authentication Response
</span><span class="line">Alice -&gt; Bob: Another authentication Request
</span><span class="line">Alice &lt;-- Bob: another authentication Response
</span><span class="line"><span class="o">{</span>% endplantuml %<span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>图片展示如下： </p>

<center><img src="http://duffqiu.github.io/images/plantuml/4c4dec90e6118bd5d1038e47f33555a2.png" /></center>

<p>类的表示方式如下：</p>

<center><img src="http://duffqiu.github.io/images/plantuml/63b8e6e8e68b6b0ce2ae56a4f53eb096.png" /></center>

<h3 id="section-3">小插曲</h3>
<p>默认情况下，plantuml只能支持sequence图的生成，如果要生成其它图，则需要用到Graphiz。<br />
在Mac上用<code>port</code>命令安装Graphiz，安装完成后<code>dot</code>命令是安装到了<code>/opt/local/bin/dot</code>目录下，而plantuml默认是要用<code>/usr/bin/dot</code>，这样plantuml.rb的plugin还是无法生成其它类型的图，但是platuml.jar是支持指定dot的路径的，所以手工改造一下plantuml.rb，具体方式如下：</p>

<ol>
  <li>
    <p>在<code>_config.yml</code>文件中增加一个plantuml的配置项并设定dot的路径：<code>lantuml_dotpath: /opt/local/bin/dot</code></p>
  </li>
  <li>
    <p>在plantuml.rb文件中的<code>filename = Digest::MD5.hexdigest(code) + ".png"</code>语句上面增加dot的配置的读取</p>
  </li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line">  <span class="n">dotpath</span> <span class="o">=</span> <span class="n">site</span><span class="o">.</span><span class="n">config</span><span class="o">[</span><span class="s1">&#39;plantuml_dotpath&#39;</span><span class="o">]</span>
</span><span class="line">  <span class="nb">puts</span> <span class="s2">&quot;using dot at: &quot;</span> <span class="o">+</span> <span class="n">dotpath</span> <span class="o">+</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class="line">  <span class="k">if</span> <span class="no">File</span><span class="o">.</span><span class="n">exist?</span><span class="p">(</span><span class="n">dotpath</span><span class="p">)</span>
</span><span class="line">    <span class="nb">puts</span> <span class="s2">&quot;PlantUML set dot path:&quot;</span> <span class="o">+</span> <span class="n">dotpath</span> <span class="o">+</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class="line">    <span class="n">dotcmd</span> <span class="o">=</span> <span class="s2">&quot; -graphvizdot &quot;</span> <span class="o">+</span> <span class="n">dotpath</span>
</span><span class="line">  <span class="k">else</span>
</span><span class="line">    <span class="n">dotcmd</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class="line">  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然后修改<code>cmd = "java -jar " + plantuml_jar + " -pipe &gt; " + filepath</code>在最后增加<code> + dotcmd</code>，完整如下 </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">cmd</span> <span class="o">=</span> <span class="s2">&quot;java -jar &quot;</span> <span class="o">+</span> <span class="n">plantuml_jar</span> <span class="o">+</span> <span class="s2">&quot; -pipe &gt; &quot;</span> <span class="o">+</span> <span class="n">filepath</span> <span class="o">+</span> <span class="n">dotcmd</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>因为之前发生过错误，所以需要手工清除<code>octopress/public/images/plantuml/</code>这个目录</p>

<p>这个我的第一个github pull request，纪念一下</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Appscale安装]]></title>
    <link href="http://duffqiu.github.io/blog/2014/02/11/appscalean-zhuang/"/>
    <updated>2014-02-11T21:49:00+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/02/11/appscalean-zhuang</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<hr />
<p>之前看了下Appscale的介绍，觉得还是不错的，这两天自己装一个玩玩。</p>

<h3 id="section-1">安装过程</h3>
<hr />

<h4 id="section-2">准备工作</h4>
<ol>
  <li>下载并安装<a href="https://www.virtualbox.org">virtual box</a></li>
  <li>
    <p>下载并安装<a href="https://github.com/mitchellh/vagrant">vagrant</a>，不过好像中国下载有问题，这里有个baidu pan的copy，版本<a href="http://pan.baidu.com/s/1dDtaIul">vagrant 1.4.3</a></p>
  </li>
  <li>下载并安装<a href="https://github.com/AppScale/appscale-tools">appscale-tools</a>，帮助安装配置appscale的，可以参照<a href="https://github.com/AppScale/appscale-tools/wiki/Installing-the-AppScale-Tools-on-Mac-OS-X">官方的安装说明</a>使用<code>brew</code>安装，</li>
  <li>下载<a href="http://download.appscale.com/apps/AppScale%201.13.0%20VirtualBox%20Image">Appscale for mac的virtual box的image</a>，因为很大，直接下载会有问题，这里分享一个已经下好的在百度云盘的copy，版本为<a href="http://pan.baidu.com/s/1i3p4NsT">AppScale 1.13.0</a> </li>
</ol>

<h4 id="vm">安装VM过程</h4>
<ol>
  <li>创建一个appscale的目录</li>
  <li>获取一个<a href="https://s3.amazonaws.com/appscale_CDN/files/Vagrantfile">Vagrant的配置文件</a>，也可以通过命令<code>vagrant init</code>获得  </li>
  <li>打开Vagrantfile，将<code>config.vm.box_url</code>配置为你下载好的Appscale for mac的virtual box的image  </li>
  <li>将<code>config.vm.network</code>配置成你的网络地址，但是不要用host机器的IP</li>
  <li>
    <p>启动vm</p>

    <pre><code>vagrant up
vagrant ssh     # now you're in the VM as the "vagrant" user
sudo -s passwd  # change the root password
</code></pre>
  </li>
</ol>

<h4 id="appscale">部署AppScale</h4>

<ol>
  <li>初始化一个配置文件AppScalefile，需要执行<code>appscale init cluster</code></li>
  <li>
    <p>修改AppScalefile中的<code>ips_layout</code>，将IP都设置为你刚才配置的VM IP，然后启动Appscale，命令：<code>appscale up</code>      </p>

    <pre><code>ips_layout:
  master : 192.168.33.10
  appengine: 192.168.33.10
  database: 192.168.33.10
  zookeeper: 192.168.33.10
</code></pre>
  </li>
</ol>

<h4 id="section-3">部署应用</h4>

<p>用命令：<code>appscale deploy &lt;app path&gt;</code>         </p>

<h4 id="section-4">关闭</h4>
<ol>
  <li>关闭appscale，用命令<code>appscale down</code></li>
  <li>关闭VM，用命令<code>vagrant halt</code></li>
</ol>

<h4 id="appscale-tools">Appscale tools安装过程(官方介绍复制)</h4>

<p>安装命令：</p>

<pre><code>brew install wget
brew install ssh-copy-id
brew install swig
wget https://github.com/AppScale/appscale-tools/archive/1.13.0.tar.gz -O appscale-tools-1.13.0.tar.gz
tar xvf appscale-tools-1.13.0.tar.gz

sudo ./appscale-tools-1.13.0/osx/appscale_install.sh
</code></pre>

<p>将<code>/usr/local/share/python:/usr/local/appscale-tools/bin</code>放入到path中就可以了</p>

<p>小提示：
1. 官网说用euca-version检查安装是否成功，但是根本就没有这个命令。这个好像是给EC2和S3用的python工具，可以用<code>port search 'euca'</code>查到
2. Vagrant有对应的oh-my-zsh的plugins，配置进.zshrc文件中就可以了</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress使用页面标签]]></title>
    <link href="http://duffqiu.github.io/blog/2014/02/09/octopressshi-yong-ye-mian-biao-qian/"/>
    <updated>2014-02-09T21:57:59+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/02/09/octopressshi-yong-ye-mian-biao-qian</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<hr />
<p>当一篇blog太长的时候，总是希望有个按钮能回到某个章节上，或者是文件的开头</p>

<h3 id="section-1">解决办法</h3>
<hr />
<p>因为Markdown语法没有提供这个支持，只用用Div的方式来支持了，具体方式如下</p>

<ul>
  <li>定义标签</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">
</span><span class="line">   &lt;a <span class="nv">name</span><span class="o">=</span><span class="s2">&quot;标签名&quot;</span>&gt;&lt;/a&gt;
</span><span class="line">
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>定义跳转链接</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">
</span><span class="line">   &lt;div <span class="nv">style</span><span class="o">=</span><span class="s2">&quot;text-decoration:underline; font-size: 16px; color: red&quot;</span> <span class="nv">onclick</span><span class="o">=</span><span class="s2">&quot;self.location.href=&#39;#标签名&#39;&quot;</span>&gt;跳转&lt;/div&gt;
</span><span class="line">
</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[技术杂谈1]]></title>
    <link href="http://duffqiu.github.io/blog/2014/02/09/ji-zhu-za-tan-1/"/>
    <updated>2014-02-09T18:15:58+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/02/09/ji-zhu-za-tan-1</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<hr />

<p>这个类别主要是想记录以下跑题中看到的一些“新”技术，或者是一些有意思的技术内容，但是不会详细展开，如有时间和必要会有专门的blog来描述某个内容或话题</p>

<h3 id="section-1">今天的内容有</h3>
<hr />

<ol>
  <li>
    <p>云上的Jenkins，由<a href="http://www.cloudbees.com">Cloudbees公司</a>提供，提供免费的有限的使用，但是需要用到的地方，其实都有免费的软件／服务，如Jenkins的程序，Github管理代码等，唯一的好处是不用自己来搭建、维护服务器。我找到它的原因是看到它的Jenkins能自动部署到Goolge App Engine上，而 Jenkins还没有提供类似的Plugin，或许直接用shell命令就能做到，后面有机会用到再展开这个。</p>
  </li>
  <li>
    <p>开源的类似Google App Engine的Paas的平台<a href="https://github.com/AppScale/appscale">AppScale</a>，<a href="http://www.youtube.com/user/AppScaleSystems">youtube的AppScale介绍</a>（不过需要代理才可以看，我前面由介绍如何搭建代理服务）。建议开发Google App Engine应用的开发者都自己搭建一套，<a href="http://www.appscale.com/features">好处</a>是：</p>

    <ul>
      <li>便于直接本地测试、部署和运行</li>
      <li>需要部署私有云（特别是大型企业）</li>
      <li>需要使用其它Google App Engine不支持的APIs</li>
      <li>Google App Engine全APIs兼容</li>
      <li>可用于生产环境的平台（Google App Engine不适合生产环境？）</li>
      <li>
        <p>不再依赖于Google，可以部署在多个云平台如Amazon和虚拟机等</p>

        <div style="text-decoration:underline; font-size: 16px; color: red" onclick="showdiv('app')"> AppScale架构图 </div>
      </li>
    </ul>

    <div style="display:none" class="prev" id="app" onclick="hidediv('app')">
	
 <img src="http://www.appscale.com/assets/img/appscale_stack.png" title="点击关闭" />
	
 </div>
  </li>
  <li>
    <p><a href="http://www.docker.io">docker</a>，轻量级的应用容器，不过还没成熟和商业化，值得关注。我还没有升入去看，只能提一下而已</p>
  </li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Maven Tips: Artifact查找顺序]]></title>
    <link href="http://duffqiu.github.io/blog/2014/02/08/maven-tips-artifactcha-zhao-shun-xu/"/>
    <updated>2014-02-08T14:36:17+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/02/08/maven-tips-artifactcha-zhao-shun-xu</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>

<p>因为要用到一个maven plugin的snapshot版本，所以需要增加一个专门的snapshot repository，但是增加了后总是不起左右</p>

<h3 id="section-1">解决办法</h3>

<p>尝试了多次以后，发现是maven的settings.xml的配置上问题，因为我增加了一个mirror从而造成了新增的repository不起作用。<br />
解决的方式去掉mirror的配置，增加repository到profile中，并激活
提示：maven下载artifactor的顺序为pom.xml上的repository配置，然后是settings.xml的mirror配置，然后才是profiles中的repository配置</p>

<p><a name="rep-seq"></a></p>

<div style="text-decoration:underline; font-size: 16px; color: red" onclick="showdiv('pic')"> Maven下载artifactor的顺序</div>

<div style="display:none" class="prev" id="pic" onclick="hidediv('pic');self.location.href='#rep-seq'">

<img src="http://maven.apache.org/repository/maven-repositories.png" title="点击关闭" />

</div>

<h3 id="repository">比较好用的repository</h3>

<p><a name="rep"></a></p>

<div style="text-decoration:underline; font-size: 16px; color: red" onclick="showdiv('rep-code')" title="点击打开">repository配置</div>

<div style="display:none" class="prev" id="rep-code" onclick="hidediv('rep-code');self.location.href='#rep'" title="点击关闭">


<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line">			<span class="nt">&lt;repository&gt;</span>
</span><span class="line">			   <span class="nt">&lt;id&gt;</span>Codehaus Snapshots<span class="nt">&lt;/id&gt;</span>
</span><span class="line">			   <span class="nt">&lt;url&gt;</span>http://nexus.codehaus.org/snapshots/<span class="nt">&lt;/url&gt;</span>
</span><span class="line">			   <span class="nt">&lt;snapshots&gt;</span>
</span><span class="line">			       <span class="nt">&lt;enabled&gt;</span>true<span class="nt">&lt;/enabled&gt;</span>
</span><span class="line">			   <span class="nt">&lt;/snapshots&gt;</span>
</span><span class="line">			   <span class="nt">&lt;releases&gt;</span>
</span><span class="line">			       <span class="nt">&lt;enabled&gt;</span>false<span class="nt">&lt;/enabled&gt;</span>
</span><span class="line">			   <span class="nt">&lt;/releases&gt;</span>
</span><span class="line">			<span class="nt">&lt;/repository&gt;</span>
</span><span class="line">			
</span><span class="line">			<span class="nt">&lt;repository&gt;</span>
</span><span class="line">			    <span class="nt">&lt;id&gt;</span>MavenCentral<span class="nt">&lt;/id&gt;</span>
</span><span class="line">			    <span class="nt">&lt;name&gt;</span>Maven repository<span class="nt">&lt;/name&gt;</span>
</span><span class="line">			    <span class="nt">&lt;url&gt;</span>http://repo1.maven.org/maven2<span class="nt">&lt;/url&gt;</span>
</span><span class="line">			    <span class="nt">&lt;releases&gt;</span>
</span><span class="line">			        <span class="nt">&lt;enabled&gt;</span>true<span class="nt">&lt;/enabled&gt;</span>
</span><span class="line">			    <span class="nt">&lt;/releases&gt;</span>
</span><span class="line">			    <span class="nt">&lt;snapshots&gt;</span>
</span><span class="line">			        <span class="nt">&lt;enabled&gt;</span>false<span class="nt">&lt;/enabled&gt;</span>
</span><span class="line">			    <span class="nt">&lt;/snapshots&gt;</span>
</span><span class="line">			<span class="nt">&lt;/repository&gt;</span>
</span><span class="line">			
</span><span class="line">			<span class="nt">&lt;repository&gt;</span>
</span><span class="line">			    <span class="nt">&lt;id&gt;</span>objectweb<span class="nt">&lt;/id&gt;</span>
</span><span class="line">			    <span class="nt">&lt;name&gt;</span>Objectweb repository<span class="nt">&lt;/name&gt;</span>
</span><span class="line">			    <span class="nt">&lt;url&gt;</span>http://maven.objectweb.org/maven2<span class="nt">&lt;/url&gt;</span>
</span><span class="line">			    <span class="nt">&lt;releases&gt;</span>
</span><span class="line">			        <span class="nt">&lt;enabled&gt;</span>true<span class="nt">&lt;/enabled&gt;</span>
</span><span class="line">			    <span class="nt">&lt;/releases&gt;</span>
</span><span class="line">			    <span class="nt">&lt;snapshots&gt;</span>
</span><span class="line">			        <span class="nt">&lt;enabled&gt;</span>false<span class="nt">&lt;/enabled&gt;</span>
</span><span class="line">			    <span class="nt">&lt;/snapshots&gt;</span>
</span><span class="line">			<span class="nt">&lt;/repository&gt;</span>
</span><span class="line">			
</span><span class="line">			<span class="nt">&lt;repository&gt;</span>
</span><span class="line">			    <span class="nt">&lt;id&gt;</span>jboss<span class="nt">&lt;/id&gt;</span>
</span><span class="line">			    <span class="nt">&lt;name&gt;</span>JBoss Maven2 repository<span class="nt">&lt;/name&gt;</span>
</span><span class="line">			    <span class="nt">&lt;url&gt;</span>http://repository.jboss.com/maven2/<span class="nt">&lt;/url&gt;</span>
</span><span class="line">			    <span class="nt">&lt;snapshots&gt;</span>
</span><span class="line">			        <span class="nt">&lt;enabled&gt;</span>false<span class="nt">&lt;/enabled&gt;</span>
</span><span class="line">			    <span class="nt">&lt;/snapshots&gt;</span>
</span><span class="line">			    <span class="nt">&lt;releases&gt;</span>
</span><span class="line">			        <span class="nt">&lt;enabled&gt;</span>true<span class="nt">&lt;/enabled&gt;</span>
</span><span class="line">			    <span class="nt">&lt;/releases&gt;</span>
</span><span class="line">			<span class="nt">&lt;/repository&gt;</span>
</span><span class="line">			
</span><span class="line">			<span class="nt">&lt;repository&gt;</span>
</span><span class="line">			    <span class="nt">&lt;id&gt;</span>apache.snapshots<span class="nt">&lt;/id&gt;</span>
</span><span class="line">			    <span class="nt">&lt;name&gt;</span>Apache Snapshot Repository<span class="nt">&lt;/name&gt;</span>
</span><span class="line">			    <span class="nt">&lt;url&gt;</span>
</span><span class="line">			        http://people.apache.org/repo/m2-snapshot-repository
</span><span class="line">			    <span class="nt">&lt;/url&gt;</span>
</span><span class="line">			    <span class="nt">&lt;releases&gt;</span>
</span><span class="line">			        <span class="nt">&lt;enabled&gt;</span>false<span class="nt">&lt;/enabled&gt;</span>
</span><span class="line">			    <span class="nt">&lt;/releases&gt;</span>
</span><span class="line">			    <span class="nt">&lt;snapshots&gt;</span>
</span><span class="line">			        <span class="nt">&lt;enabled&gt;</span>true<span class="nt">&lt;/enabled&gt;</span>
</span><span class="line">			    <span class="nt">&lt;/snapshots&gt;</span>
</span><span class="line">			<span class="nt">&lt;/repository&gt;</span>
</span><span class="line">			
</span><span class="line">			<span class="nt">&lt;repository&gt;</span>
</span><span class="line">			    <span class="nt">&lt;id&gt;</span>ops4j.repository<span class="nt">&lt;/id&gt;</span>
</span><span class="line">			    <span class="nt">&lt;name&gt;</span>OPS4J Repository<span class="nt">&lt;/name&gt;</span>
</span><span class="line">			    <span class="nt">&lt;url&gt;</span>http://repository.ops4j.org/maven2<span class="nt">&lt;/url&gt;</span>
</span><span class="line">			    <span class="nt">&lt;releases&gt;</span>
</span><span class="line">			        <span class="nt">&lt;enabled&gt;</span>true<span class="nt">&lt;/enabled&gt;</span>
</span><span class="line">			    <span class="nt">&lt;/releases&gt;</span>
</span><span class="line">			    <span class="nt">&lt;snapshots&gt;</span>
</span><span class="line">			        <span class="nt">&lt;enabled&gt;</span>false<span class="nt">&lt;/enabled&gt;</span>
</span><span class="line">			    <span class="nt">&lt;/snapshots&gt;</span>
</span><span class="line">			<span class="nt">&lt;/repository&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>


</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Jenkins中使用Findbugs]]></title>
    <link href="http://duffqiu.github.io/blog/2014/02/08/zai-jenkinszhong-shi-yong-findbugs/"/>
    <updated>2014-02-08T13:02:06+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/02/08/zai-jenkinszhong-shi-yong-findbugs</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<p>看了看Sonar的介绍，的确很专业，但是是否每个功能都用的上？而且Sonar也是集成了PMD, Findbugs, Checkstyle等插件的功能来帮助完成相关的任务的。<br />
但是Jenkins也同样直接支持这些插件，是否只用Jenkins加上这些插件就可以了？</p>

<p>前面介绍Jenkins的时候已经用了不少插件，这里再加一个Findbugs</p>

<h3 id="section-1">配置</h3>

<ul>
  <li>在对应的maven项目中加入maven的Findbugs插件，配置示例如下：</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">&lt;plugin&gt;
</span><span class="line">  &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
</span><span class="line">  &lt;artifactId&gt;findbugs-maven-plugin&lt;/artifactId&gt;
</span><span class="line">  &lt;version&gt;2.5.4-SNAPSHOT&lt;/version&gt;
</span><span class="line">  &lt;configuration&gt;
</span><span class="line">    &lt;xmlOutput&gt;true&lt;/xmlOutput&gt;
</span><span class="line">  &lt;/configuration&gt;
</span><span class="line">&lt;/plugin&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div>
<ul>
  <li>在Jenkins中安装对应的Findbugs插件“FindBugs Plug-in”  </li>
  <li>然后在Jenkins的项目配置中激活Findbugs，也就是打个勾。  </li>
  <li>给Maven的运行加入新的goald：“findbugs:findbugs”  </li>
  <li>重新构建项目就可以得到了</li>
</ul>

<h4 id="section-2">小插曲：</h4>
<p>在Eclpse中使用的时候没有发现问题，但是到了Jenkins后，从后台的build输出确发现了一个异常的warning: “Failed to notify spy hudson.maven.Maven3Builder$JenkinsEventSpy: Failed to load edu.umd.cs.findbugs.detect.TestASM”，从而没能在Jenkins上看到Findbugs的报告。后来查了半天，尽然是Jenkins的Bug，临时的解决办法尽然是将Maven换成<code>3.0.5</code>的版本，不要使用3.1或3.1.1</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress动态展示图片]]></title>
    <link href="http://duffqiu.github.io/blog/2014/02/07/octopressdong-tai-zhan-shi-tu-pian/"/>
    <updated>2014-02-07T20:39:21+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/02/07/octopressdong-tai-zhan-shi-tu-pian</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<p>在Octopress中如果展示图片太大，这回占用屏幕很大的篇幅，最好的办法是先隐藏起来，需要的时候点击展开 </p>

<h3 id="section-1">解决办法</h3>
<p>利用div的display的设置的方式实现</p>

<p>具体的实现方式是  </p>

<ul>
  <li>增加两个javascript的方法，一个展示图片，一个隐藏图片，简单的方式可以直接将他们放入到source/javascripts/octopress.js文件的最开头  </li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="js"><span class="line">
</span><span class="line">
</span><span class="line"><span class="kd">function</span> <span class="nx">showdiv</span><span class="p">(</span><span class="nx">elemid</span><span class="p">){</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">fd</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="nx">elemid</span><span class="p">);</span>
</span><span class="line"><span class="nx">fd</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">left</span> <span class="o">=</span> <span class="nx">event</span><span class="p">.</span><span class="nx">clientX</span><span class="p">;</span>
</span><span class="line"><span class="nx">fd</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">top</span> <span class="o">=</span> <span class="nx">event</span><span class="p">.</span><span class="nx">clientY</span><span class="p">;</span>
</span><span class="line"><span class="nx">fd</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">display</span> <span class="o">=</span> <span class="s2">&quot;inline&quot;</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">function</span> <span class="nx">hidediv</span><span class="p">(</span><span class="nx">elemid</span><span class="p">){</span>
</span><span class="line">
</span><span class="line"><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="nx">elemid</span><span class="p">).</span><span class="nx">style</span><span class="p">.</span><span class="nx">display</span> <span class="o">=</span> <span class="s2">&quot;none&quot;</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="p">}</span>	
</span><span class="line">	
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>在blog中增加使用图片的div的代码</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">	
</span><span class="line">&lt;div <span class="nv">style</span><span class="o">=</span><span class="s2">&quot;text-decoration:underline; font-size: 24px; color: red&quot;</span> <span class="nv">onclick</span><span class="o">=</span><span class="s2">&quot;showdiv(&#39;pic&#39;)&quot;</span>&gt; Picture Show Text &lt;/div&gt;
</span><span class="line">
</span><span class="line">&lt;div <span class="nv">style</span><span class="o">=</span><span class="s2">&quot;display:none&quot;</span> <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;prev&quot;</span> <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;pic&quot;</span>  <span class="nv">onclick</span><span class="o">=</span><span class="s2">&quot;hidediv(&#39;pic&#39;)&quot;</span>&gt;
</span><span class="line">
</span><span class="line">&lt;img <span class="nv">src</span><span class="o">=</span><span class="s2">&quot;xxx.png&quot;</span> <span class="nv">title</span><span class="o">=</span><span class="s2">&quot;点击关闭&quot;</span>&gt;
</span><span class="line">
</span><span class="line">&lt;/div&gt;
</span><span class="line">	
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>效果是点击图片文字展开图片，点击图片后隐藏。     </p>

<h3 id="section-2">小插曲</h3>
<p>整个2014春节假期就要过去了，回顾一下，整整写了24篇blog，有不少是跑题写出来。很多题目只是开了个头，也期待自己后面继续努力！   </p>

<p>在octopress的source/_post目录里用命令，实际就是将ls输出用wc工具再统计</p>

<pre><code>&gt;ls |wc -l
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress实时获取并展示github上其它repository的代码v2]]></title>
    <link href="http://duffqiu.github.io/blog/2014/02/07/octopressshi-shi-huo-qu-bing-zhan-shi-githubshang-qi-ta-repositoryde-dai-ma-v2/"/>
    <updated>2014-02-07T17:02:16+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/02/07/octopressshi-shi-huo-qu-bing-zhan-shi-githubshang-qi-ta-repositoryde-dai-ma-v2</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<p>之前做了个Octopress实时获取并展示github上其它repository的代码的rake任务，参见<a href="http://duffqiu.github.io/blog/2014/02/05/octopressshi-shi-huo-qu-bing-zhan-shi-githubshang-qi-ta-repositoryde-dai-ma/">1</a>，但是每次都要打开github来获取文件的连接，还是比较烦。如果需要更改github branch的名字就需要重新更改整个链接。</p>

<h3 id="section-1">解决方案</h3>
<p>github上的代码存放实际上是有规则的。格式如下“https://raw.github.com/&lt;your github account&gt;/&lt;repository name&gt;/&lt;branch name&gt;/&lt;file folder&gt;/&lt;java package name&gt;/&lt;file name&gt;”</p>

<p>根据这个规则，可以将https://raw.github.com/，&lt;your github account&gt;固定在Rakefile的变量中<br />
将&lt;repository name&gt;，&lt;branch name&gt;，&lt;file folder&gt;，&lt;java package name&gt;，&lt;file name&gt;配置到文件中  </p>

<p>这样的话后面如果需要更改分支名就不用先去查找github上的raw文件url了<br />
注意，如果用了<a href="http://nvie.com/posts/a-successful-git-branching-model/">git flow</a>，则分支名可能是feature/&lt;branch name&gt;</p>

<div style="text-decoration:underline; font-size: 24px; color: red" onclick="showdiv('gitflow')"> Git flow Picture </div>

<div style="display:none" class="prev" id="gitflow" onclick="hidediv('gitflow')">
  <img src="http://nvie.com/img/2009/12/Screen-shot-2009-12-24-at-11.32.03.png" title="点击关闭" />
</div>

<h3 id="section-2">代码实现</h3>

<p>首先增加变量配置到Rakefile中</p>

<pre><code># github code fetch config
github_code_url = "https://raw.github.com/"
github_account  = "duffqiu"
</code></pre>

<p>为了保留原由的实现，则在Rakefile上增加一个新的任务，起名为github_fetch，对应使用的配置文件为githubfetch.cf，示例如下：  </p>

<pre><code>DesignPatternDemo develop src/main/java org.duffqiu.patterndemo       LazySingleton.java

DesignPatternDemo develop src/test/java org.duffqiu.patterndemotest   LazySingletonTest.java

DesignPatternDemo develop src/main/java org.duffqiu.patterndemo       SerialibleSingleton.java

DesignPatternDemo develop src/test/java org.duffqiu.patterndemotest   SerialibleSingletonTest.java

DesignPatternDemo develop src/main/java org.duffqiu.patterndemo       EnumSingleton.java

DesignPatternDemo develop src/test/java org.duffqiu.patterndemotest   EnumSingletonTest.java
</code></pre>

<p>Rake中的任务代码为：</p>

<pre><code>desc "fetch source code file from github"
task :github_fetch do

  begin
    rm_rf "source/downloads"
    mkdir_p "source/downloads/code"
    if File.exist?("github_fetch.cf")
      IO.foreach("github_fetch.cf") do |line|
        if line.strip.empty? == false
            cd "source/downloads/code" do
            attr = line.split(' ')
            repo = attr[0].strip
            if repo.empty?
              abort("repo name is empty")
            end
            branch = attr[1].strip
            if branch.empty?
              abort("branch name is empty")
            end
            src_fold = attr[2].strip
            if src_fold.empty?
              abort("src fold is empty")
            end
            package = attr[3].strip
            if package.empty?
              abort("package name is empty")
            end
            file_name = attr[4].strip
            if file_name.empty?
              abort("file name is empty")
            end
            package_dir = package.gsub(/\./, '/')
            target_dir = repo + '/' + package_dir
            mkdir_p target_dir
            cd target_dir do
              system ("wget  " + "#{github_code_url}/#{github_account}/#{repo}/#{branch}/#{src_fold}/#{package_dir}/#{file_name}")
            end
          end
        end
      end
    else
      puts 'github_fetch.cf not found'
    end
  end
end    
</code></pre>

<h4 id="vi">Vi小提示</h4>

<ol>
  <li>Copy单前行到文件结尾：“yG”</li>
  <li>Delete单前行到文件结尾：“dG”</li>
  <li>回复上一次的操纵：“u”</li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用Jenkins搭建基于Github和JUnit的自动化测试]]></title>
    <link href="http://duffqiu.github.io/blog/2014/02/06/yong-jenkinsda-jian-ji-yu-githubhe-junitde-zi-dong-hua-ce-shi/"/>
    <updated>2014-02-06T20:23:53+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/02/06/yong-jenkinsda-jian-ji-yu-githubhe-junitde-zi-dong-hua-ce-shi</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<p>在用Github管理代码，同时用JUnit做单元测试，则是否有一种方式／工具帮助我们自动从Github提取最新的代码然后运行JUnit测试并报告结果呢？<br />
答案是：<a href="http://jenkins-ci.org/">Jenkins</a></p>

<h3 id="section-1">安装及启动配置</h3>
<p>安装配置都是在Mac OSX下</p>

<ol>
  <li>下载OSX的安装包，直接安装就可以了。安装完后，程序被放在了/Applications/Jenkins/jenkins.war</li>
  <li>启动是通过系统服务的方式启动的，启动配置文件在/Library/LaunchDaemons/org.jenkins-ci.plist，可以通过launchctl命令的方式启动／卸载服务，launchctl使用可以参见<a href="http://duffqiu.github.io/blog/2014/01/30/mac-tips-guan-li-hou-tai-zi-dong-yun-xing-de-fu-wu/">1</a></li>
  <li>
    <p>如果需要卸载这个Jenkins，可以运行</p>

    <pre><code> /Library/Application Support/Jenkins/Uninstall.command
</code></pre>
  </li>
  <li>
    <p>安装完成后，Jenkins会自动启动，打开本地8080端口，可以通过更改/Library/Application Support/Jenkins/jenkins-runner.sh启动脚本增加启动参数的方式更改，具体参数可以参考<a href="https://wiki.jenkins-ci.org/display/JENKINS/Starting+and+Accessing+Jenkins">2</a>。但是在Mac上可以用defaults工具来更改端口。具体命令如下</p>

    <pre><code> &gt;sudo defaults write  /Library/Preferences/org.jenkins-ci httpPort 9080       
</code></pre>

    <p>然后用launchctl命令重新启动Jenkins就可以了。Java的配置参数也可以通过这个方式更改</p>

    <p>小提示，可以用defaults命令查看已经配置的参数</p>

    <pre><code>defaults read &lt;file&gt;
</code></pre>
  </li>
  <li>默认安装后，Jenkins是用jenkins用户来运行的       </li>
</ol>

<h3 id="section-2">系统运行配置</h3>

<h4 id="section-3">前置安装</h4>
<ol>
  <li>安装<a href="http://maven.apache.org/download.cgi">Maven</a></li>
  <li>安装<a href="https://code.google.com/p/git-osx-installer/">Git</a></li>
  <li>安装Java1.7</li>
</ol>

<h4 id="jenkins">安装Jenkins插件</h4>

<ol>
  <li>
    <p>安装Git插件
Jenkins启动完成后，通过浏览器打开，默认是不用认证的。俺后点击“系统管理”-&gt;“管理插件”-&gt;“可选插件”<br />
然后在“Filter:”里输入“git”，然后选择安装“Jenkins GIT client plugin”和“Jenkins GIT plugin”</p>
  </li>
  <li>
    <p>安装Junit插件
同理搜索出Junit相关插件，然后安装“JUnit Attachments Plugin”和“multi-module-tests-publisher” </p>
  </li>
  <li>
    <p>安装performance插件
同理搜索出performance相关插件，然后安装“Performance plugin”  </p>
  </li>
  <li>
    <p>安装代码覆盖率报告检查插件
同理搜索出cover相关插件，然后安装“Jenkins Cobertura Plugin”   </p>
  </li>
  <li>
    <p>安装代码检查报告插件
同理搜索出“pmd”，然后安装“PMD Plug-in”   <br />
同理搜索出“checkstyple”，然后安装“Checkstyle Plug-in” </p>
  </li>
</ol>

<p>记得重启Jenkins激活插件     </p>

<p>小提示，插件中有Github的插件，但是个人觉得不是太好用，直接用Git插件就可以了</p>

<h4 id="section-4">系统配置</h4>
<p>Jenkins已经做了不少汉化的工作，界面还算友好
然后点击“系统管理”-&gt;“系统设置”，然后配置Git，Maven，Java以及Mail Notification就可以。（很奇怪，用QQ的STMP不行，用Google的STMP就可以。不过记得到Gmail去激活SMTP/POP3）</p>

<h4 id="section-5">启动安全</h4>
<p>最好还是激活安全配置
点击“系统管理”-&gt;“Configure Global Security”<br />
然后选择勾上“启用安全”，“Unix用户/组数据库”，“登录用户可以做任何事”<br />
这样只有Mac用户可以登录并使用了</p>

<h3 id="section-6">配置第一个自动测试例子</h3>
<p>系统配置好，我们就可以来配置一个测试例子了</p>

<h4 id="section-7">前置条件</h4>
<p>为了简单方便，Java工程要变成Maven工程，如果不是熟悉Maven的，可以先看看<a href="http://www.amazon.cn/Maven实战-许晓斌/dp/B004CLZ7BA/ref=sr_1_1?ie=UTF8&amp;qid=1391746077&amp;sr=8-1&amp;keywords=maven">Maven实战</a></p>

<p>如果需要cobertura覆盖率报告，<br />
必须要在maven工程中的build plugins中使用cobertura-maven-plugin，配置例子如下：</p>

<pre><code>  &lt;plugin&gt;
    &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
    &lt;artifactId&gt;cobertura-maven-plugin&lt;/artifactId&gt;
    &lt;version&gt;2.6&lt;/version&gt;
    &lt;configuration&gt;
      &lt;instrumentation&gt;
        &lt;excludes&gt;
          &lt;exclude&gt;*/*Test.class&lt;/exclude&gt;
        &lt;/excludes&gt;
      &lt;/instrumentation&gt;
      &lt;format&gt;xml&lt;/format&gt;
    &lt;/configuration&gt;
    &lt;executions&gt;
      &lt;execution&gt;
        &lt;goals&gt;
          &lt;goal&gt;clean&lt;/goal&gt;
        &lt;/goals&gt;
      &lt;/execution&gt;
    &lt;/executions&gt;
  &lt;/plugin&gt;   
</code></pre>

<p>如果需要检查代码的写法则需要在maven中引入maven-jxr-plugin，maven-pmd-plugin，maven-checkstyle-plugin，具体配置例子如下：</p>

<pre><code>  &lt;plugin&gt;
    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
    &lt;artifactId&gt;maven-jxr-plugin&lt;/artifactId&gt;
    &lt;version&gt;2.4&lt;/version&gt;
  &lt;/plugin&gt;

  &lt;plugin&gt;
    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
    &lt;artifactId&gt;maven-pmd-plugin&lt;/artifactId&gt;
    &lt;version&gt;3.0.1&lt;/version&gt;
    &lt;configuration&gt;
      &lt;format&gt;xml&lt;/format&gt;
    &lt;/configuration&gt;
  &lt;/plugin&gt;   

	&lt;plugin&gt;
	  &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
	  &lt;artifactId&gt;maven-checkstyle-plugin&lt;/artifactId&gt;
	  &lt;version&gt;2.11&lt;/version&gt;
      &lt;configuration&gt;
        &lt;configLocation&gt;config/checkstyle.xml&lt;/configLocation&gt;
        &lt;encoding&gt;UTF-8&lt;/encoding&gt;
        &lt;outputFileFormat&gt;xml&lt;/outputFileFormat&gt;
        &lt;consoleOutput&gt;true&lt;/consoleOutput&gt;
        &lt;failsOnError&gt;false&lt;/failsOnError&gt;
        &lt;linkXRef&gt;true&lt;/linkXRef&gt;
      &lt;/configuration&gt;
	&lt;/plugin&gt;
</code></pre>

<h4 id="section-8">新建一个自动测试任务</h4>
<p>点击“新建”选择“构建一个maven2/3项目”      </p>

<ol>
  <li>配置项目基本信息，描述等   </li>
  <li>配置Gihub的项目信息<br />
    <ul>
      <li>指定github repository地址如我的：https://github.com/duffqiu/DesignPatternDemo.git</li>
      <li>指定认证用户，我用ssh的方式连接</li>
      <li>指定代码分支，如我用“*/develop”来测试develop分支</li>
    </ul>
  </li>
  <li>构建触发器，选择“Build whenever a SNAPSHOT dependency is built”，和“Poll SCM”（内容指定为“H/5 * * * *”，即5分钟查询一次github）</li>
  <li>指定Maven Goals，我用“clean cobertura:cobertura”，这样可以生成覆盖率的报告</li>
  <li>增加“构建后操作”
    <ul>
      <li>配置覆盖率报告位置，默认为：“**/target/site/cobertura/coverage.xml” </li>
      <li>配置junit性能测试报告位置，默认为：“**/TEST-*.xml”  </li>
    </ul>
  </li>
  <li>使用pmd和checkstyle报告
    <ul>
      <li>勾上“Publish Checkstyle analysis results”</li>
      <li>勾上“Publish PMD analysis results”   </li>
      <li>同时还要修改Maven Goals为：“clean cobertura:cobertura jxr:jxr checkstyle:checkstyle pmd:pmd”  </li>
    </ul>
  </li>
</ol>

<p>提示jxr:jxr是用来绑定报告中的代码行号   </p>

<p>然后保存就可以用“立即构建”来测试了<br />
可以通过“查克·诺里斯说：控制台输出”来查看运行过程的log输出   </p>

<h3 id="section-9">小插曲</h3>
<p>我在安装完配置后，运行一个测试总是包无法找到Maven的错误，可是路径都是对的。后来发现Jenkins是用jenkins用户来运行的，而我将Maven安装在当前的用户的home路径下，造成了jenkins无法访问到。所以应该考虑将Maven安装到/usr/local下，或者copy一份到/Users/Shared/Jenkins/下（记得更改用户权限为jenkins用户）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress实时获取并展示github上其它repository的代码]]></title>
    <link href="http://duffqiu.github.io/blog/2014/02/05/octopressshi-shi-huo-qu-bing-zhan-shi-githubshang-qi-ta-repositoryde-dai-ma/"/>
    <updated>2014-02-05T01:45:57+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/02/05/octopressshi-shi-huo-qu-bing-zhan-shi-githubshang-qi-ta-repositoryde-dai-ma</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<p>在写blog的时候，想要直接关联github上的其它repository的代码，这样以后代码更新就不需要更新blog了。但是看octopress的文档，似乎<a href="https://gist.github.com">gist</a>可以达到该目的，但是它不是一个代码工程，无法像正常的代码工程那样去管理，编译，运行等。<br />
所以就想看看能否给Octopress加个plugin直接展示该代码</p>

<h3 id="section-1">办法</h3>
<p>原本想改一下plugins/include_code.rb，但是感觉还是太复杂，所以想个简单的方式
还是利用include_code这个插件，这个插件是可以将在source/downloads/code/目录下的文件展示出来的，这个目录原octopress代码没有生成，需要手工生成。<br />
思路就是想法将github上的代码在rake generate之前先用wget获取下来放到上面这个指定的目录中<br />
因为include_code.rb的复杂度，我选择了更改Rakefile文件，新增一个任务的方式来解决
具体步骤如下：</p>

<ol>
  <li>
    <p>在octopress目录下新增一个需要下载的文件的配置githubcode.cf，格式为<github repository="" name="">空格<java package="" name="">空格<java code="" file="" url="">。java的包名可以保留&#8217;.&#8217;的格式，这个插件会自动转成目录</java></java></github></p>

    <pre><code>DesignPatternDemo  org.duffqiu.patterndemo  https://raw.github.com/duffqiu/DesignPatternDemo/feature/LazySingletonDemo/src/org/duffqiu/patterndemo/LazySingleton.java
</code></pre>
  </li>
  <li>
    <p>确保已经安装好wget</p>

    <pre><code>sudo port install wget
</code></pre>
  </li>
  <li>
    <p>更改Rakefile文件，在最后增加一个任务</p>

    <pre><code> desc "get code file from github"
 task :github_code do
	
   begin
     require 'net/http'
     require 'uri'
     rm_rf "source/downloads"
     mkdir_p "source/downloads/code"
     if File.exist?("githubcode.cf")
       IO.foreach("githubcode.cf") do |line|
         if line.strip.empty? == false
             cd "source/downloads/code" do
             attr = line.split(' ')
             repo = attr[0].strip
             if repo.empty?
               abort("repo name is empty")
             end
             package = attr[1].strip
             file_url = attr[2].strip
             if file_url.empty?
               abort("file url is empty")
             end
             package_dir = package.gsub(/\./, '/')
             target_dir = repo + '/' + package_dir
             mkdir_p target_dir
             cd target_dir do
               system ("wget  " + file_url)
             end
           end
         end
       end
     else
       puts 'githubcode.cf not found'
     end
   end
 end        		
</code></pre>
  </li>
  <li>
    <p>在需要引用代码的地方使用以下方式</p>

    <pre><code>{% include_code lang:java &lt;repository name&gt;/&lt;package name&gt;/&lt;java file name&gt; %}
</code></pre>

    <p>注意：<repository name="">前面没有&#8217;/&#8217;，<pakcage name="">要将java的包名的&#8217;.&#8217;改为&#8217;/&#8217;</pakcage></repository></p>
  </li>
  <li>
    <p>每次有新增的github代码文件引入，则需要在rake generate前先调用</p>

    <pre><code>rake github_code
</code></pre>
  </li>
</ol>

<h3 id="section-2">小插曲</h3>
<p>####wget https访问问题</p>

<p>使用wget访问github的时候，因为github使用https，则会出现说github的“证书不可信”和“证书颁发者未知”的问题。
解决方式为</p>

<ol>
  <li>使用–no-check-certificate参数访问github，但是还是用warning，不够完美</li>
  <li>
    <p>决解证书问题  </p>

    <ul>
      <li>
        <p>安装curl-ca-bundle</p>

        <pre><code> sudo port install curl-ca-bundle
</code></pre>
      </li>
      <li>
        <p>配置wget</p>

        <pre><code> echo CA_CERTIFICATE=/opt/local/share/curl/curl-ca-bundle.crt &gt;&gt; ~/.wgetrc
</code></pre>
      </li>
    </ul>
  </li>
</ol>

<p>然后再运行wget就不会有问题了</p>
]]></content>
  </entry>
  
</feed>
