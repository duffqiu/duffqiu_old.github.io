<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Duff Qiu's Blog]]></title>
  <link href="http://duffqiu.github.io/atom.xml" rel="self"/>
  <link href="http://duffqiu.github.io/"/>
  <updated>2014-02-15T23:23:36+08:00</updated>
  <id>http://duffqiu.github.io/</id>
  <author>
    <name><![CDATA[Duff Qiu]]></name>
    <email><![CDATA[duffqiu@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[设计模式：工厂方法模式]]></title>
    <link href="http://duffqiu.github.io/blog/2014/02/15/she-ji-mo-shi-%3Agong-han-fang-fa-mo-shi/"/>
    <updated>2014-02-15T22:15:00+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/02/15/she-ji-mo-shi-:gong-han-fang-fa-mo-shi</id>
    <content type="html"><![CDATA[<h3 id="section">工厂方法模式原理</h3>
<hr />
<ol>
  <li>模式名称：工厂方法模式 (Facotory Method)</li>
  <li>
    <p>问题：</p>

    <ul>
      <li>对象的创建比较复杂，需要关联其它对象／资源（如配置文件，数据库等）</li>
      <li>需要写一堆if-else的方式来决定使用那个对象的具体类</li>
      <li>希望隐藏创建过程的细节，降低偶和度</li>
      <li>优化性能，在创建过程中缓存对象等 </li>
      <li>使用者只关心接口，而不关心具体的类，因为用new的方式总是要和具体的类偶和 </li>
    </ul>
  </li>
  <li>解决方案：使用一个类来帮助创建需要的对象，而该类有外部传入使用方，使用方只是对创建类的接口依赖（写到这里的时候，发现漫谈设计模式的书的UML的图我的理解不同，应该是client依赖与工厂接口，而不是关联工厂对象）</li>
  <li>结论：提高对象的封装，减少了使用方的依赖</li>
</ol>

<h3 id="uml">UML图例</h3>
<hr />

<center><img src="http://duffqiu.github.io/images/plantuml/197a8f4ca8d157f5be99c4f58d0aafb9.png" /></center>

<h3 id="section-1">示例代码</h3>
<hr />
<p>这个比较简单就不用代码举例了，看看上面的UML图就能写出代码了。关键是在合适的场景下要想起来用到它</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Maven工程中加入PlantUML]]></title>
    <link href="http://duffqiu.github.io/blog/2014/02/13/mavengong-cheng-zhong-jia-ru-plantuml/"/>
    <updated>2014-02-13T23:37:47+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/02/13/mavengong-cheng-zhong-jia-ru-plantuml</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<p>设计于编码的最好实践是设计文档与代码文档放在最近的地方，便于同时修改和更新。最好都放入到一个代码工程中</p>

<h3 id="section-1">解决办法</h3>
<p>PlantUML的Mavin Plugin是最好的解决办法。在Maven工程中建一个目录存放PlantUML的设计文件，txt文件就可以。如：<code>src/main/plantuml</code></p>

<ol>
  <li>
    <p>然后确保已经安装好了graphvizDot。</p>
  </li>
  <li>
    <p>然后就可以写plantuml的文本</p>
  </li>
  <li>
    <p>修改maven的工程的pom.xml文件，增加<a href="https://github.com/duffqiu/maven-plantuml-plugin">PlantUML的Maven Plugin</a>，注意用的版本，我用时maven plugin最新的版本为7954，plantuml版本是7991，代码如下</p>
  </li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">    &lt;plugin&gt;
</span><span class="line">      &lt;groupId&gt;com.github.jeluard&lt;/groupId&gt;
</span><span class="line">      &lt;artifactId&gt;plantuml-maven-plugin&lt;/artifactId&gt;
</span><span class="line">      &lt;version&gt;7954&lt;/version&gt;
</span><span class="line">      &lt;configuration&gt;
</span><span class="line">        &lt;graphvizDot&gt;/opt/local/bin/dot&lt;/graphvizDot&gt;
</span><span class="line">        &lt;sourceFiles&gt;
</span><span class="line">          &lt;directory&gt;<span class="k">${</span><span class="nv">basedir</span><span class="k">}</span>&lt;/directory&gt;
</span><span class="line">          &lt;includes&gt;
</span><span class="line">            &lt;include&gt;src/main/plantuml/*.txt&lt;/include&gt;
</span><span class="line">          &lt;/includes&gt;
</span><span class="line">        &lt;/sourceFiles&gt;
</span><span class="line">      &lt;/configuration&gt;
</span><span class="line">      &lt;dependencies&gt;
</span><span class="line">        &lt;dependency&gt;
</span><span class="line">          &lt;groupId&gt;net.sourceforge.plantuml&lt;/groupId&gt;
</span><span class="line">          &lt;artifactId&gt;plantuml&lt;/artifactId&gt;
</span><span class="line">          &lt;version&gt;7991&lt;/version&gt;
</span><span class="line">        &lt;/dependency&gt;
</span><span class="line">      &lt;/dependencies&gt;
</span><span class="line">    &lt;/plugin&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>因为用port安装的graphvizDot目录不在<code>/usr/bin</code>下，所以需要特定指定改目录</p>

<p>然后用maven的build的target：<code>com.github.jeluard:plantuml-maven-plugin:generate</code>就可以将plantuml下的文件转成UML图形了。图形文件放在<code>target/plantuml</code>目录下</p>

<p>如果用Eclipse，则可以安装对应的<a href="http://plantuml.sourceforge.net/updatesitejuno/">eclipse插件，安装地址 </a>，这样在写plantuml文本的时候就可以同时看到图形了。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress中使用plantuml]]></title>
    <link href="http://duffqiu.github.io/blog/2014/02/12/octopresszhong-shi-yong-plantuml/"/>
    <updated>2014-02-12T22:36:09+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/02/12/octopresszhong-shi-yong-plantuml</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<hr />
<p>一直想便利的在Octopress使用UML，之前没有太好的办法，只能在astah画好后存为图片文件，然后再用链接的方式使用</p>

<h3 id="section-1">解决办法</h3>
<hr />
<p>现在经Leo同学推荐，使用文本的UML语言的方式可以写出UML图，他就是<a href="http://plantuml.sourceforge.net">Plant UML</a>，同时在github上有个octopress的插件可以直接支持在Markdown中使用Plant UML，它是<a href="https://github.com/yjpark/jekyll-plantuml">jekyll-plantuml</a></p>

<h4 id="section-2">安装办法</h4>
<ol>
  <li>在octopress上建一个<code>_lib</code>的目录</li>
  <li>下载<a href="http://plantuml.sourceforge.net/download.html">plantuml.jar</a>到上面建的<code>_lib</code>的目录</li>
  <li>下载<a href="https://github.com/yjpark/jekyll-plantuml/raw/master/plantuml.rb">plantuml.rb</a>插件到<code>plugin</code>目录</li>
  <li>
    <p>修改<code>_config.yml</code>文件，增加platuml的配置如下</p>

    <pre><code># PlantUML
plantuml_jar: _lib/plantuml.jar
plantuml_background_color: "#f8f8f8"
</code></pre>
  </li>
  <li>然后用</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="o">{</span>% plantuml %<span class="o">}</span>
</span><span class="line">...
</span><span class="line"><span class="o">{</span>% endplantuml %<span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>括上platuml的代码就可以了，下面是一个简单的示例</p>

<p>源码如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="o">{</span>% plantuml %<span class="o">}</span>
</span><span class="line">Alice -&gt; Bob: Authentication Request
</span><span class="line">Bob --&gt; Alice: Authentication Response
</span><span class="line">Alice -&gt; Bob: Another authentication Request
</span><span class="line">Alice &lt;-- Bob: another authentication Response
</span><span class="line"><span class="o">{</span>% endplantuml %<span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>图片展示如下： </p>

<center><img src="http://duffqiu.github.io/images/plantuml/4c4dec90e6118bd5d1038e47f33555a2.png" /></center>

<p>类的表示方式如下：</p>

<center><img src="http://duffqiu.github.io/images/plantuml/63b8e6e8e68b6b0ce2ae56a4f53eb096.png" /></center>

<h3 id="section-3">小插曲</h3>
<p>默认情况下，plantuml只能支持sequence图的生成，如果要生成其它图，则需要用到Graphiz。<br />
在Mac上用<code>port</code>命令安装Graphiz，安装完成后<code>dot</code>命令是安装到了<code>/opt/local/bin/dot</code>目录下，而plantuml默认是要用<code>/usr/bin/dot</code>，这样plantuml.rb的plugin还是无法生成其它类型的图，但是platuml.jar是支持指定dot的路径的，所以手工改造一下plantuml.rb，具体方式如下：</p>

<ol>
  <li>
    <p>在<code>_config.yml</code>文件中增加一个plantuml的配置项并设定dot的路径：<code>lantuml_dotpath: /opt/local/bin/dot</code></p>
  </li>
  <li>
    <p>在plantuml.rb文件中的<code>filename = Digest::MD5.hexdigest(code) + ".png"</code>语句上面增加dot的配置的读取</p>
  </li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line">  <span class="n">dotpath</span> <span class="o">=</span> <span class="n">site</span><span class="o">.</span><span class="n">config</span><span class="o">[</span><span class="s1">&#39;plantuml_dotpath&#39;</span><span class="o">]</span>
</span><span class="line">  <span class="nb">puts</span> <span class="s2">&quot;using dot at: &quot;</span> <span class="o">+</span> <span class="n">dotpath</span> <span class="o">+</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class="line">  <span class="k">if</span> <span class="no">File</span><span class="o">.</span><span class="n">exist?</span><span class="p">(</span><span class="n">dotpath</span><span class="p">)</span>
</span><span class="line">    <span class="nb">puts</span> <span class="s2">&quot;PlantUML set dot path:&quot;</span> <span class="o">+</span> <span class="n">dotpath</span> <span class="o">+</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class="line">    <span class="n">dotcmd</span> <span class="o">=</span> <span class="s2">&quot; -graphvizdot &quot;</span> <span class="o">+</span> <span class="n">dotpath</span>
</span><span class="line">  <span class="k">else</span>
</span><span class="line">    <span class="n">dotcmd</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class="line">  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然后修改<code>cmd = "java -jar " + plantuml_jar + " -pipe &gt; " + filepath</code>在最后增加<code> + dotcmd</code>，完整如下 </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">cmd</span> <span class="o">=</span> <span class="s2">&quot;java -jar &quot;</span> <span class="o">+</span> <span class="n">plantuml_jar</span> <span class="o">+</span> <span class="s2">&quot; -pipe &gt; &quot;</span> <span class="o">+</span> <span class="n">filepath</span> <span class="o">+</span> <span class="n">dotcmd</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>因为之前发生过错误，所以需要手工清除<code>octopress/public/images/plantuml/</code>这个目录</p>

<p>这个我的第一个github pull request，纪念一下</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Appscale安装]]></title>
    <link href="http://duffqiu.github.io/blog/2014/02/11/appscalean-zhuang/"/>
    <updated>2014-02-11T21:49:00+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/02/11/appscalean-zhuang</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<hr />
<p>之前看了下Appscale的介绍，觉得还是不错的，这两天自己装一个玩玩。</p>

<h3 id="section-1">安装过程</h3>
<hr />

<h4 id="section-2">准备工作</h4>
<ol>
  <li>下载并安装<a href="https://www.virtualbox.org">virtual box</a></li>
  <li>
    <p>下载并安装<a href="https://github.com/mitchellh/vagrant">vagrant</a>，不过好像中国下载有问题，这里有个baidu pan的copy，版本<a href="http://pan.baidu.com/s/1dDtaIul">vagrant 1.4.3</a></p>
  </li>
  <li>下载并安装<a href="https://github.com/AppScale/appscale-tools">appscale-tools</a>，帮助安装配置appscale的，可以参照<a href="https://github.com/AppScale/appscale-tools/wiki/Installing-the-AppScale-Tools-on-Mac-OS-X">官方的安装说明</a>使用<code>brew</code>安装，</li>
  <li>下载<a href="http://download.appscale.com/apps/AppScale%201.13.0%20VirtualBox%20Image">Appscale for mac的virtual box的image</a>，因为很大，直接下载会有问题，这里分享一个已经下好的在百度云盘的copy，版本为<a href="http://pan.baidu.com/s/1i3p4NsT">AppScale 1.13.0</a> </li>
</ol>

<h4 id="vm">安装VM过程</h4>
<ol>
  <li>创建一个appscale的目录</li>
  <li>获取一个<a href="https://s3.amazonaws.com/appscale_CDN/files/Vagrantfile">Vagrant的配置文件</a>，也可以通过命令<code>vagrant init</code>获得  </li>
  <li>打开Vagrantfile，将<code>config.vm.box_url</code>配置为你下载好的Appscale for mac的virtual box的image  </li>
  <li>将<code>config.vm.network</code>配置成你的网络地址，但是不要用host机器的IP</li>
  <li>
    <p>启动vm</p>

    <pre><code>vagrant up
vagrant ssh     # now you're in the VM as the "vagrant" user
sudo -s passwd  # change the root password
</code></pre>
  </li>
</ol>

<h4 id="appscale">部署AppScale</h4>

<ol>
  <li>初始化一个配置文件AppScalefile，需要执行<code>appscale init cluster</code></li>
  <li>
    <p>修改AppScalefile中的<code>ips_layout</code>，将IP都设置为你刚才配置的VM IP，然后启动Appscale，命令：<code>appscale up</code>      </p>

    <pre><code>ips_layout:
  master : 192.168.33.10
  appengine: 192.168.33.10
  database: 192.168.33.10
  zookeeper: 192.168.33.10
</code></pre>
  </li>
</ol>

<h4 id="section-3">部署应用</h4>

<p>用命令：<code>appscale deploy &lt;app path&gt;</code>         </p>

<h4 id="section-4">关闭</h4>
<ol>
  <li>关闭appscale，用命令<code>appscale down</code></li>
  <li>关闭VM，用命令<code>vagrant halt</code></li>
</ol>

<h4 id="appscale-tools">Appscale tools安装过程(官方介绍复制)</h4>

<p>安装命令：</p>

<pre><code>brew install wget
brew install ssh-copy-id
brew install swig
wget https://github.com/AppScale/appscale-tools/archive/1.13.0.tar.gz -O appscale-tools-1.13.0.tar.gz
tar xvf appscale-tools-1.13.0.tar.gz

sudo ./appscale-tools-1.13.0/osx/appscale_install.sh
</code></pre>

<p>将<code>/usr/local/share/python:/usr/local/appscale-tools/bin</code>放入到path中就可以了</p>

<p>小提示：
1. 官网说用euca-version检查安装是否成功，但是根本就没有这个命令。这个好像是给EC2和S3用的python工具，可以用<code>port search 'euca'</code>查到
2. Vagrant有对应的oh-my-zsh的plugins，配置进.zshrc文件中就可以了</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress使用页面标签]]></title>
    <link href="http://duffqiu.github.io/blog/2014/02/09/octopressshi-yong-ye-mian-biao-qian/"/>
    <updated>2014-02-09T21:57:59+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/02/09/octopressshi-yong-ye-mian-biao-qian</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<hr />
<p>当一篇blog太长的时候，总是希望有个按钮能回到某个章节上，或者是文件的开头</p>

<h3 id="section-1">解决办法</h3>
<hr />
<p>因为Markdown语法没有提供这个支持，只用用Div的方式来支持了，具体方式如下</p>

<ul>
  <li>定义标签</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">
</span><span class="line">   &lt;a <span class="nv">name</span><span class="o">=</span><span class="s2">&quot;标签名&quot;</span>&gt;&lt;/a&gt;
</span><span class="line">
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>定义跳转链接</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">
</span><span class="line">   &lt;div <span class="nv">style</span><span class="o">=</span><span class="s2">&quot;text-decoration:underline; font-size: 16px; color: red&quot;</span> <span class="nv">onclick</span><span class="o">=</span><span class="s2">&quot;self.location.href=&#39;#标签名&#39;&quot;</span>&gt;跳转&lt;/div&gt;
</span><span class="line">
</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[技术杂谈1]]></title>
    <link href="http://duffqiu.github.io/blog/2014/02/09/ji-zhu-za-tan-1/"/>
    <updated>2014-02-09T18:15:58+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/02/09/ji-zhu-za-tan-1</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<hr />

<p>这个类别主要是想记录以下跑题中看到的一些“新”技术，或者是一些有意思的技术内容，但是不会详细展开，如有时间和必要会有专门的blog来描述某个内容或话题</p>

<h3 id="section-1">今天的内容有</h3>
<hr />

<ol>
  <li>
    <p>云上的Jenkins，由<a href="http://www.cloudbees.com">Cloudbees公司</a>提供，提供免费的有限的使用，但是需要用到的地方，其实都有免费的软件／服务，如Jenkins的程序，Github管理代码等，唯一的好处是不用自己来搭建、维护服务器。我找到它的原因是看到它的Jenkins能自动部署到Goolge App Engine上，而 Jenkins还没有提供类似的Plugin，或许直接用shell命令就能做到，后面有机会用到再展开这个。</p>
  </li>
  <li>
    <p>开源的类似Google App Engine的Paas的平台<a href="https://github.com/AppScale/appscale">AppScale</a>，<a href="http://www.youtube.com/user/AppScaleSystems">youtube的AppScale介绍</a>（不过需要代理才可以看，我前面由介绍如何搭建代理服务）。建议开发Google App Engine应用的开发者都自己搭建一套，<a href="http://www.appscale.com/features">好处</a>是：</p>

    <ul>
      <li>便于直接本地测试、部署和运行</li>
      <li>需要部署私有云（特别是大型企业）</li>
      <li>需要使用其它Google App Engine不支持的APIs</li>
      <li>Google App Engine全APIs兼容</li>
      <li>可用于生产环境的平台（Google App Engine不适合生产环境？）</li>
      <li>
        <p>不再依赖于Google，可以部署在多个云平台如Amazon和虚拟机等</p>

        <div style="text-decoration:underline; font-size: 16px; color: red" onclick="showdiv('app')"> AppScale架构图 </div>
      </li>
    </ul>

    <div style="display:none" class="prev" id="app" onclick="hidediv('app')">
	
 <img src="http://www.appscale.com/assets/img/appscale_stack.png" title="点击关闭" />
	
 </div>
  </li>
  <li>
    <p><a href="http://www.docker.io">docker</a>，轻量级的应用容器，不过还没成熟和商业化，值得关注。我还没有升入去看，只能提一下而已</p>
  </li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Maven Tips: Artifact查找顺序]]></title>
    <link href="http://duffqiu.github.io/blog/2014/02/08/maven-tips-artifactcha-zhao-shun-xu/"/>
    <updated>2014-02-08T14:36:17+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/02/08/maven-tips-artifactcha-zhao-shun-xu</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>

<p>因为要用到一个maven plugin的snapshot版本，所以需要增加一个专门的snapshot repository，但是增加了后总是不起左右</p>

<h3 id="section-1">解决办法</h3>

<p>尝试了多次以后，发现是maven的settings.xml的配置上问题，因为我增加了一个mirror从而造成了新增的repository不起作用。<br />
解决的方式去掉mirror的配置，增加repository到profile中，并激活
提示：maven下载artifactor的顺序为pom.xml上的repository配置，然后是settings.xml的mirror配置，然后才是profiles中的repository配置</p>

<p><a name="rep-seq"></a></p>

<div style="text-decoration:underline; font-size: 16px; color: red" onclick="showdiv('pic')"> Maven下载artifactor的顺序</div>

<div style="display:none" class="prev" id="pic" onclick="hidediv('pic');self.location.href='#rep-seq'">

<img src="http://maven.apache.org/repository/maven-repositories.png" title="点击关闭" />

</div>

<h3 id="repository">比较好用的repository</h3>

<p><a name="rep"></a></p>

<div style="text-decoration:underline; font-size: 16px; color: red" onclick="showdiv('rep-code')" title="点击打开">repository配置</div>

<div style="display:none" class="prev" id="rep-code" onclick="hidediv('rep-code');self.location.href='#rep'" title="点击关闭">


<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line">			<span class="nt">&lt;repository&gt;</span>
</span><span class="line">			   <span class="nt">&lt;id&gt;</span>Codehaus Snapshots<span class="nt">&lt;/id&gt;</span>
</span><span class="line">			   <span class="nt">&lt;url&gt;</span>http://nexus.codehaus.org/snapshots/<span class="nt">&lt;/url&gt;</span>
</span><span class="line">			   <span class="nt">&lt;snapshots&gt;</span>
</span><span class="line">			       <span class="nt">&lt;enabled&gt;</span>true<span class="nt">&lt;/enabled&gt;</span>
</span><span class="line">			   <span class="nt">&lt;/snapshots&gt;</span>
</span><span class="line">			   <span class="nt">&lt;releases&gt;</span>
</span><span class="line">			       <span class="nt">&lt;enabled&gt;</span>false<span class="nt">&lt;/enabled&gt;</span>
</span><span class="line">			   <span class="nt">&lt;/releases&gt;</span>
</span><span class="line">			<span class="nt">&lt;/repository&gt;</span>
</span><span class="line">			
</span><span class="line">			<span class="nt">&lt;repository&gt;</span>
</span><span class="line">			    <span class="nt">&lt;id&gt;</span>MavenCentral<span class="nt">&lt;/id&gt;</span>
</span><span class="line">			    <span class="nt">&lt;name&gt;</span>Maven repository<span class="nt">&lt;/name&gt;</span>
</span><span class="line">			    <span class="nt">&lt;url&gt;</span>http://repo1.maven.org/maven2<span class="nt">&lt;/url&gt;</span>
</span><span class="line">			    <span class="nt">&lt;releases&gt;</span>
</span><span class="line">			        <span class="nt">&lt;enabled&gt;</span>true<span class="nt">&lt;/enabled&gt;</span>
</span><span class="line">			    <span class="nt">&lt;/releases&gt;</span>
</span><span class="line">			    <span class="nt">&lt;snapshots&gt;</span>
</span><span class="line">			        <span class="nt">&lt;enabled&gt;</span>false<span class="nt">&lt;/enabled&gt;</span>
</span><span class="line">			    <span class="nt">&lt;/snapshots&gt;</span>
</span><span class="line">			<span class="nt">&lt;/repository&gt;</span>
</span><span class="line">			
</span><span class="line">			<span class="nt">&lt;repository&gt;</span>
</span><span class="line">			    <span class="nt">&lt;id&gt;</span>objectweb<span class="nt">&lt;/id&gt;</span>
</span><span class="line">			    <span class="nt">&lt;name&gt;</span>Objectweb repository<span class="nt">&lt;/name&gt;</span>
</span><span class="line">			    <span class="nt">&lt;url&gt;</span>http://maven.objectweb.org/maven2<span class="nt">&lt;/url&gt;</span>
</span><span class="line">			    <span class="nt">&lt;releases&gt;</span>
</span><span class="line">			        <span class="nt">&lt;enabled&gt;</span>true<span class="nt">&lt;/enabled&gt;</span>
</span><span class="line">			    <span class="nt">&lt;/releases&gt;</span>
</span><span class="line">			    <span class="nt">&lt;snapshots&gt;</span>
</span><span class="line">			        <span class="nt">&lt;enabled&gt;</span>false<span class="nt">&lt;/enabled&gt;</span>
</span><span class="line">			    <span class="nt">&lt;/snapshots&gt;</span>
</span><span class="line">			<span class="nt">&lt;/repository&gt;</span>
</span><span class="line">			
</span><span class="line">			<span class="nt">&lt;repository&gt;</span>
</span><span class="line">			    <span class="nt">&lt;id&gt;</span>jboss<span class="nt">&lt;/id&gt;</span>
</span><span class="line">			    <span class="nt">&lt;name&gt;</span>JBoss Maven2 repository<span class="nt">&lt;/name&gt;</span>
</span><span class="line">			    <span class="nt">&lt;url&gt;</span>http://repository.jboss.com/maven2/<span class="nt">&lt;/url&gt;</span>
</span><span class="line">			    <span class="nt">&lt;snapshots&gt;</span>
</span><span class="line">			        <span class="nt">&lt;enabled&gt;</span>false<span class="nt">&lt;/enabled&gt;</span>
</span><span class="line">			    <span class="nt">&lt;/snapshots&gt;</span>
</span><span class="line">			    <span class="nt">&lt;releases&gt;</span>
</span><span class="line">			        <span class="nt">&lt;enabled&gt;</span>true<span class="nt">&lt;/enabled&gt;</span>
</span><span class="line">			    <span class="nt">&lt;/releases&gt;</span>
</span><span class="line">			<span class="nt">&lt;/repository&gt;</span>
</span><span class="line">			
</span><span class="line">			<span class="nt">&lt;repository&gt;</span>
</span><span class="line">			    <span class="nt">&lt;id&gt;</span>apache.snapshots<span class="nt">&lt;/id&gt;</span>
</span><span class="line">			    <span class="nt">&lt;name&gt;</span>Apache Snapshot Repository<span class="nt">&lt;/name&gt;</span>
</span><span class="line">			    <span class="nt">&lt;url&gt;</span>
</span><span class="line">			        http://people.apache.org/repo/m2-snapshot-repository
</span><span class="line">			    <span class="nt">&lt;/url&gt;</span>
</span><span class="line">			    <span class="nt">&lt;releases&gt;</span>
</span><span class="line">			        <span class="nt">&lt;enabled&gt;</span>false<span class="nt">&lt;/enabled&gt;</span>
</span><span class="line">			    <span class="nt">&lt;/releases&gt;</span>
</span><span class="line">			    <span class="nt">&lt;snapshots&gt;</span>
</span><span class="line">			        <span class="nt">&lt;enabled&gt;</span>true<span class="nt">&lt;/enabled&gt;</span>
</span><span class="line">			    <span class="nt">&lt;/snapshots&gt;</span>
</span><span class="line">			<span class="nt">&lt;/repository&gt;</span>
</span><span class="line">			
</span><span class="line">			<span class="nt">&lt;repository&gt;</span>
</span><span class="line">			    <span class="nt">&lt;id&gt;</span>ops4j.repository<span class="nt">&lt;/id&gt;</span>
</span><span class="line">			    <span class="nt">&lt;name&gt;</span>OPS4J Repository<span class="nt">&lt;/name&gt;</span>
</span><span class="line">			    <span class="nt">&lt;url&gt;</span>http://repository.ops4j.org/maven2<span class="nt">&lt;/url&gt;</span>
</span><span class="line">			    <span class="nt">&lt;releases&gt;</span>
</span><span class="line">			        <span class="nt">&lt;enabled&gt;</span>true<span class="nt">&lt;/enabled&gt;</span>
</span><span class="line">			    <span class="nt">&lt;/releases&gt;</span>
</span><span class="line">			    <span class="nt">&lt;snapshots&gt;</span>
</span><span class="line">			        <span class="nt">&lt;enabled&gt;</span>false<span class="nt">&lt;/enabled&gt;</span>
</span><span class="line">			    <span class="nt">&lt;/snapshots&gt;</span>
</span><span class="line">			<span class="nt">&lt;/repository&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>


</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Jenkins中使用Findbugs]]></title>
    <link href="http://duffqiu.github.io/blog/2014/02/08/zai-jenkinszhong-shi-yong-findbugs/"/>
    <updated>2014-02-08T13:02:06+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/02/08/zai-jenkinszhong-shi-yong-findbugs</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<p>看了看Sonar的介绍，的确很专业，但是是否每个功能都用的上？而且Sonar也是集成了PMD, Findbugs, Checkstyle等插件的功能来帮助完成相关的任务的。<br />
但是Jenkins也同样直接支持这些插件，是否只用Jenkins加上这些插件就可以了？</p>

<p>前面介绍Jenkins的时候已经用了不少插件，这里再加一个Findbugs</p>

<h3 id="section-1">配置</h3>

<ul>
  <li>在对应的maven项目中加入maven的Findbugs插件，配置示例如下：</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">&lt;plugin&gt;
</span><span class="line">  &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
</span><span class="line">  &lt;artifactId&gt;findbugs-maven-plugin&lt;/artifactId&gt;
</span><span class="line">  &lt;version&gt;2.5.4-SNAPSHOT&lt;/version&gt;
</span><span class="line">  &lt;configuration&gt;
</span><span class="line">    &lt;xmlOutput&gt;true&lt;/xmlOutput&gt;
</span><span class="line">  &lt;/configuration&gt;
</span><span class="line">&lt;/plugin&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div>
<ul>
  <li>在Jenkins中安装对应的Findbugs插件“FindBugs Plug-in”  </li>
  <li>然后在Jenkins的项目配置中激活Findbugs，也就是打个勾。  </li>
  <li>给Maven的运行加入新的goald：“findbugs:findbugs”  </li>
  <li>重新构建项目就可以得到了</li>
</ul>

<h4 id="section-2">小插曲：</h4>
<p>在Eclpse中使用的时候没有发现问题，但是到了Jenkins后，从后台的build输出确发现了一个异常的warning: “Failed to notify spy hudson.maven.Maven3Builder$JenkinsEventSpy: Failed to load edu.umd.cs.findbugs.detect.TestASM”，从而没能在Jenkins上看到Findbugs的报告。后来查了半天，尽然是Jenkins的Bug，临时的解决办法尽然是将Maven换成<code>3.0.5</code>的版本，不要使用3.1或3.1.1</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress动态展示图片]]></title>
    <link href="http://duffqiu.github.io/blog/2014/02/07/octopressdong-tai-zhan-shi-tu-pian/"/>
    <updated>2014-02-07T20:39:21+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/02/07/octopressdong-tai-zhan-shi-tu-pian</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<p>在Octopress中如果展示图片太大，这回占用屏幕很大的篇幅，最好的办法是先隐藏起来，需要的时候点击展开 </p>

<h3 id="section-1">解决办法</h3>
<p>利用div的display的设置的方式实现</p>

<p>具体的实现方式是  </p>

<ul>
  <li>增加两个javascript的方法，一个展示图片，一个隐藏图片，简单的方式可以直接将他们放入到source/javascripts/octopress.js文件的最开头  </li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="js"><span class="line">
</span><span class="line">
</span><span class="line"><span class="kd">function</span> <span class="nx">showdiv</span><span class="p">(</span><span class="nx">elemid</span><span class="p">){</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">fd</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="nx">elemid</span><span class="p">);</span>
</span><span class="line"><span class="nx">fd</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">left</span> <span class="o">=</span> <span class="nx">event</span><span class="p">.</span><span class="nx">clientX</span><span class="p">;</span>
</span><span class="line"><span class="nx">fd</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">top</span> <span class="o">=</span> <span class="nx">event</span><span class="p">.</span><span class="nx">clientY</span><span class="p">;</span>
</span><span class="line"><span class="nx">fd</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">display</span> <span class="o">=</span> <span class="s2">&quot;inline&quot;</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">function</span> <span class="nx">hidediv</span><span class="p">(</span><span class="nx">elemid</span><span class="p">){</span>
</span><span class="line">
</span><span class="line"><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="nx">elemid</span><span class="p">).</span><span class="nx">style</span><span class="p">.</span><span class="nx">display</span> <span class="o">=</span> <span class="s2">&quot;none&quot;</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="p">}</span>	
</span><span class="line">	
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>在blog中增加使用图片的div的代码</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">	
</span><span class="line">&lt;div <span class="nv">style</span><span class="o">=</span><span class="s2">&quot;text-decoration:underline; font-size: 24px; color: red&quot;</span> <span class="nv">onclick</span><span class="o">=</span><span class="s2">&quot;showdiv(&#39;pic&#39;)&quot;</span>&gt; Picture Show Text &lt;/div&gt;
</span><span class="line">
</span><span class="line">&lt;div <span class="nv">style</span><span class="o">=</span><span class="s2">&quot;display:none&quot;</span> <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;prev&quot;</span> <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;pic&quot;</span>  <span class="nv">onclick</span><span class="o">=</span><span class="s2">&quot;hidediv(&#39;pic&#39;)&quot;</span>&gt;
</span><span class="line">
</span><span class="line">&lt;img <span class="nv">src</span><span class="o">=</span><span class="s2">&quot;xxx.png&quot;</span> <span class="nv">title</span><span class="o">=</span><span class="s2">&quot;点击关闭&quot;</span>&gt;
</span><span class="line">
</span><span class="line">&lt;/div&gt;
</span><span class="line">	
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>效果是点击图片文字展开图片，点击图片后隐藏。     </p>

<h3 id="section-2">小插曲</h3>
<p>整个2014春节假期就要过去了，回顾一下，整整写了24篇blog，有不少是跑题写出来。很多题目只是开了个头，也期待自己后面继续努力！   </p>

<p>在octopress的source/_post目录里用命令，实际就是将ls输出用wc工具再统计</p>

<pre><code>&gt;ls |wc -l
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress实时获取并展示github上其它repository的代码v2]]></title>
    <link href="http://duffqiu.github.io/blog/2014/02/07/octopressshi-shi-huo-qu-bing-zhan-shi-githubshang-qi-ta-repositoryde-dai-ma-v2/"/>
    <updated>2014-02-07T17:02:16+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/02/07/octopressshi-shi-huo-qu-bing-zhan-shi-githubshang-qi-ta-repositoryde-dai-ma-v2</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<p>之前做了个Octopress实时获取并展示github上其它repository的代码的rake任务，参见<a href="http://duffqiu.github.io/blog/2014/02/05/octopressshi-shi-huo-qu-bing-zhan-shi-githubshang-qi-ta-repositoryde-dai-ma/">1</a>，但是每次都要打开github来获取文件的连接，还是比较烦。如果需要更改github branch的名字就需要重新更改整个链接。</p>

<h3 id="section-1">解决方案</h3>
<p>github上的代码存放实际上是有规则的。格式如下“https://raw.github.com/&lt;your github account&gt;/&lt;repository name&gt;/&lt;branch name&gt;/&lt;file folder&gt;/&lt;java package name&gt;/&lt;file name&gt;”</p>

<p>根据这个规则，可以将https://raw.github.com/，&lt;your github account&gt;固定在Rakefile的变量中<br />
将&lt;repository name&gt;，&lt;branch name&gt;，&lt;file folder&gt;，&lt;java package name&gt;，&lt;file name&gt;配置到文件中  </p>

<p>这样的话后面如果需要更改分支名就不用先去查找github上的raw文件url了<br />
注意，如果用了<a href="http://nvie.com/posts/a-successful-git-branching-model/">git flow</a>，则分支名可能是feature/&lt;branch name&gt;</p>

<div style="text-decoration:underline; font-size: 24px; color: red" onclick="showdiv('gitflow')"> Git flow Picture </div>

<div style="display:none" class="prev" id="gitflow" onclick="hidediv('gitflow')">
  <img src="http://nvie.com/img/2009/12/Screen-shot-2009-12-24-at-11.32.03.png" title="点击关闭" />
</div>

<h3 id="section-2">代码实现</h3>

<p>首先增加变量配置到Rakefile中</p>

<pre><code># github code fetch config
github_code_url = "https://raw.github.com/"
github_account  = "duffqiu"
</code></pre>

<p>为了保留原由的实现，则在Rakefile上增加一个新的任务，起名为github_fetch，对应使用的配置文件为githubfetch.cf，示例如下：  </p>

<pre><code>DesignPatternDemo develop src/main/java org.duffqiu.patterndemo       LazySingleton.java

DesignPatternDemo develop src/test/java org.duffqiu.patterndemotest   LazySingletonTest.java

DesignPatternDemo develop src/main/java org.duffqiu.patterndemo       SerialibleSingleton.java

DesignPatternDemo develop src/test/java org.duffqiu.patterndemotest   SerialibleSingletonTest.java

DesignPatternDemo develop src/main/java org.duffqiu.patterndemo       EnumSingleton.java

DesignPatternDemo develop src/test/java org.duffqiu.patterndemotest   EnumSingletonTest.java
</code></pre>

<p>Rake中的任务代码为：</p>

<pre><code>desc "fetch source code file from github"
task :github_fetch do

  begin
    rm_rf "source/downloads"
    mkdir_p "source/downloads/code"
    if File.exist?("github_fetch.cf")
      IO.foreach("github_fetch.cf") do |line|
        if line.strip.empty? == false
            cd "source/downloads/code" do
            attr = line.split(' ')
            repo = attr[0].strip
            if repo.empty?
              abort("repo name is empty")
            end
            branch = attr[1].strip
            if branch.empty?
              abort("branch name is empty")
            end
            src_fold = attr[2].strip
            if src_fold.empty?
              abort("src fold is empty")
            end
            package = attr[3].strip
            if package.empty?
              abort("package name is empty")
            end
            file_name = attr[4].strip
            if file_name.empty?
              abort("file name is empty")
            end
            package_dir = package.gsub(/\./, '/')
            target_dir = repo + '/' + package_dir
            mkdir_p target_dir
            cd target_dir do
              system ("wget  " + "#{github_code_url}/#{github_account}/#{repo}/#{branch}/#{src_fold}/#{package_dir}/#{file_name}")
            end
          end
        end
      end
    else
      puts 'github_fetch.cf not found'
    end
  end
end    
</code></pre>

<h4 id="vi">Vi小提示</h4>

<ol>
  <li>Copy单前行到文件结尾：“yG”</li>
  <li>Delete单前行到文件结尾：“dG”</li>
  <li>回复上一次的操纵：“u”</li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用Jenkins搭建基于Github和JUnit的自动化测试]]></title>
    <link href="http://duffqiu.github.io/blog/2014/02/06/yong-jenkinsda-jian-ji-yu-githubhe-junitde-zi-dong-hua-ce-shi/"/>
    <updated>2014-02-06T20:23:53+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/02/06/yong-jenkinsda-jian-ji-yu-githubhe-junitde-zi-dong-hua-ce-shi</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<p>在用Github管理代码，同时用JUnit做单元测试，则是否有一种方式／工具帮助我们自动从Github提取最新的代码然后运行JUnit测试并报告结果呢？<br />
答案是：<a href="http://jenkins-ci.org/">Jenkins</a></p>

<h3 id="section-1">安装及启动配置</h3>
<p>安装配置都是在Mac OSX下</p>

<ol>
  <li>下载OSX的安装包，直接安装就可以了。安装完后，程序被放在了/Applications/Jenkins/jenkins.war</li>
  <li>启动是通过系统服务的方式启动的，启动配置文件在/Library/LaunchDaemons/org.jenkins-ci.plist，可以通过launchctl命令的方式启动／卸载服务，launchctl使用可以参见<a href="http://duffqiu.github.io/blog/2014/01/30/mac-tips-guan-li-hou-tai-zi-dong-yun-xing-de-fu-wu/">1</a></li>
  <li>
    <p>如果需要卸载这个Jenkins，可以运行</p>

    <pre><code> /Library/Application Support/Jenkins/Uninstall.command
</code></pre>
  </li>
  <li>
    <p>安装完成后，Jenkins会自动启动，打开本地8080端口，可以通过更改/Library/Application Support/Jenkins/jenkins-runner.sh启动脚本增加启动参数的方式更改，具体参数可以参考<a href="https://wiki.jenkins-ci.org/display/JENKINS/Starting+and+Accessing+Jenkins">2</a>。但是在Mac上可以用defaults工具来更改端口。具体命令如下</p>

    <pre><code> &gt;sudo defaults write  /Library/Preferences/org.jenkins-ci httpPort 9080       
</code></pre>

    <p>然后用launchctl命令重新启动Jenkins就可以了。Java的配置参数也可以通过这个方式更改</p>

    <p>小提示，可以用defaults命令查看已经配置的参数</p>

    <pre><code>defaults read &lt;file&gt;
</code></pre>
  </li>
  <li>默认安装后，Jenkins是用jenkins用户来运行的       </li>
</ol>

<h3 id="section-2">系统运行配置</h3>

<h4 id="section-3">前置安装</h4>
<ol>
  <li>安装<a href="http://maven.apache.org/download.cgi">Maven</a></li>
  <li>安装<a href="https://code.google.com/p/git-osx-installer/">Git</a></li>
  <li>安装Java1.7</li>
</ol>

<h4 id="jenkins">安装Jenkins插件</h4>

<ol>
  <li>
    <p>安装Git插件
Jenkins启动完成后，通过浏览器打开，默认是不用认证的。俺后点击“系统管理”-&gt;“管理插件”-&gt;“可选插件”<br />
然后在“Filter:”里输入“git”，然后选择安装“Jenkins GIT client plugin”和“Jenkins GIT plugin”</p>
  </li>
  <li>
    <p>安装Junit插件
同理搜索出Junit相关插件，然后安装“JUnit Attachments Plugin”和“multi-module-tests-publisher” </p>
  </li>
  <li>
    <p>安装performance插件
同理搜索出performance相关插件，然后安装“Performance plugin”  </p>
  </li>
  <li>
    <p>安装代码覆盖率报告检查插件
同理搜索出cover相关插件，然后安装“Jenkins Cobertura Plugin”   </p>
  </li>
  <li>
    <p>安装代码检查报告插件
同理搜索出“pmd”，然后安装“PMD Plug-in”   <br />
同理搜索出“checkstyple”，然后安装“Checkstyle Plug-in” </p>
  </li>
</ol>

<p>记得重启Jenkins激活插件     </p>

<p>小提示，插件中有Github的插件，但是个人觉得不是太好用，直接用Git插件就可以了</p>

<h4 id="section-4">系统配置</h4>
<p>Jenkins已经做了不少汉化的工作，界面还算友好
然后点击“系统管理”-&gt;“系统设置”，然后配置Git，Maven，Java以及Mail Notification就可以。（很奇怪，用QQ的STMP不行，用Google的STMP就可以。不过记得到Gmail去激活SMTP/POP3）</p>

<h4 id="section-5">启动安全</h4>
<p>最好还是激活安全配置
点击“系统管理”-&gt;“Configure Global Security”<br />
然后选择勾上“启用安全”，“Unix用户/组数据库”，“登录用户可以做任何事”<br />
这样只有Mac用户可以登录并使用了</p>

<h3 id="section-6">配置第一个自动测试例子</h3>
<p>系统配置好，我们就可以来配置一个测试例子了</p>

<h4 id="section-7">前置条件</h4>
<p>为了简单方便，Java工程要变成Maven工程，如果不是熟悉Maven的，可以先看看<a href="http://www.amazon.cn/Maven实战-许晓斌/dp/B004CLZ7BA/ref=sr_1_1?ie=UTF8&amp;qid=1391746077&amp;sr=8-1&amp;keywords=maven">Maven实战</a></p>

<p>如果需要cobertura覆盖率报告，<br />
必须要在maven工程中的build plugins中使用cobertura-maven-plugin，配置例子如下：</p>

<pre><code>  &lt;plugin&gt;
    &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
    &lt;artifactId&gt;cobertura-maven-plugin&lt;/artifactId&gt;
    &lt;version&gt;2.6&lt;/version&gt;
    &lt;configuration&gt;
      &lt;instrumentation&gt;
        &lt;excludes&gt;
          &lt;exclude&gt;*/*Test.class&lt;/exclude&gt;
        &lt;/excludes&gt;
      &lt;/instrumentation&gt;
      &lt;format&gt;xml&lt;/format&gt;
    &lt;/configuration&gt;
    &lt;executions&gt;
      &lt;execution&gt;
        &lt;goals&gt;
          &lt;goal&gt;clean&lt;/goal&gt;
        &lt;/goals&gt;
      &lt;/execution&gt;
    &lt;/executions&gt;
  &lt;/plugin&gt;   
</code></pre>

<p>如果需要检查代码的写法则需要在maven中引入maven-jxr-plugin，maven-pmd-plugin，maven-checkstyle-plugin，具体配置例子如下：</p>

<pre><code>  &lt;plugin&gt;
    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
    &lt;artifactId&gt;maven-jxr-plugin&lt;/artifactId&gt;
    &lt;version&gt;2.4&lt;/version&gt;
  &lt;/plugin&gt;

  &lt;plugin&gt;
    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
    &lt;artifactId&gt;maven-pmd-plugin&lt;/artifactId&gt;
    &lt;version&gt;3.0.1&lt;/version&gt;
    &lt;configuration&gt;
      &lt;format&gt;xml&lt;/format&gt;
    &lt;/configuration&gt;
  &lt;/plugin&gt;   

	&lt;plugin&gt;
	  &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
	  &lt;artifactId&gt;maven-checkstyle-plugin&lt;/artifactId&gt;
	  &lt;version&gt;2.11&lt;/version&gt;
      &lt;configuration&gt;
        &lt;configLocation&gt;config/checkstyle.xml&lt;/configLocation&gt;
        &lt;encoding&gt;UTF-8&lt;/encoding&gt;
        &lt;outputFileFormat&gt;xml&lt;/outputFileFormat&gt;
        &lt;consoleOutput&gt;true&lt;/consoleOutput&gt;
        &lt;failsOnError&gt;false&lt;/failsOnError&gt;
        &lt;linkXRef&gt;true&lt;/linkXRef&gt;
      &lt;/configuration&gt;
	&lt;/plugin&gt;
</code></pre>

<h4 id="section-8">新建一个自动测试任务</h4>
<p>点击“新建”选择“构建一个maven2/3项目”      </p>

<ol>
  <li>配置项目基本信息，描述等   </li>
  <li>配置Gihub的项目信息<br />
    <ul>
      <li>指定github repository地址如我的：https://github.com/duffqiu/DesignPatternDemo.git</li>
      <li>指定认证用户，我用ssh的方式连接</li>
      <li>指定代码分支，如我用“*/develop”来测试develop分支</li>
    </ul>
  </li>
  <li>构建触发器，选择“Build whenever a SNAPSHOT dependency is built”，和“Poll SCM”（内容指定为“H/5 * * * *”，即5分钟查询一次github）</li>
  <li>指定Maven Goals，我用“clean cobertura:cobertura”，这样可以生成覆盖率的报告</li>
  <li>增加“构建后操作”
    <ul>
      <li>配置覆盖率报告位置，默认为：“**/target/site/cobertura/coverage.xml” </li>
      <li>配置junit性能测试报告位置，默认为：“**/TEST-*.xml”  </li>
    </ul>
  </li>
  <li>使用pmd和checkstyle报告
    <ul>
      <li>勾上“Publish Checkstyle analysis results”</li>
      <li>勾上“Publish PMD analysis results”   </li>
      <li>同时还要修改Maven Goals为：“clean cobertura:cobertura jxr:jxr checkstyle:checkstyle pmd:pmd”  </li>
    </ul>
  </li>
</ol>

<p>提示jxr:jxr是用来绑定报告中的代码行号   </p>

<p>然后保存就可以用“立即构建”来测试了<br />
可以通过“查克·诺里斯说：控制台输出”来查看运行过程的log输出   </p>

<h3 id="section-9">小插曲</h3>
<p>我在安装完配置后，运行一个测试总是包无法找到Maven的错误，可是路径都是对的。后来发现Jenkins是用jenkins用户来运行的，而我将Maven安装在当前的用户的home路径下，造成了jenkins无法访问到。所以应该考虑将Maven安装到/usr/local下，或者copy一份到/Users/Shared/Jenkins/下（记得更改用户权限为jenkins用户）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress实时获取并展示github上其它repository的代码]]></title>
    <link href="http://duffqiu.github.io/blog/2014/02/05/octopressshi-shi-huo-qu-bing-zhan-shi-githubshang-qi-ta-repositoryde-dai-ma/"/>
    <updated>2014-02-05T01:45:57+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/02/05/octopressshi-shi-huo-qu-bing-zhan-shi-githubshang-qi-ta-repositoryde-dai-ma</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<p>在写blog的时候，想要直接关联github上的其它repository的代码，这样以后代码更新就不需要更新blog了。但是看octopress的文档，似乎<a href="https://gist.github.com">gist</a>可以达到该目的，但是它不是一个代码工程，无法像正常的代码工程那样去管理，编译，运行等。<br />
所以就想看看能否给Octopress加个plugin直接展示该代码</p>

<h3 id="section-1">办法</h3>
<p>原本想改一下plugins/include_code.rb，但是感觉还是太复杂，所以想个简单的方式
还是利用include_code这个插件，这个插件是可以将在source/downloads/code/目录下的文件展示出来的，这个目录原octopress代码没有生成，需要手工生成。<br />
思路就是想法将github上的代码在rake generate之前先用wget获取下来放到上面这个指定的目录中<br />
因为include_code.rb的复杂度，我选择了更改Rakefile文件，新增一个任务的方式来解决
具体步骤如下：</p>

<ol>
  <li>
    <p>在octopress目录下新增一个需要下载的文件的配置githubcode.cf，格式为<github repository="" name="">空格<java package="" name="">空格<java code="" file="" url="">。java的包名可以保留&#8217;.&#8217;的格式，这个插件会自动转成目录</java></java></github></p>

    <pre><code>DesignPatternDemo  org.duffqiu.patterndemo  https://raw.github.com/duffqiu/DesignPatternDemo/feature/LazySingletonDemo/src/org/duffqiu/patterndemo/LazySingleton.java
</code></pre>
  </li>
  <li>
    <p>确保已经安装好wget</p>

    <pre><code>sudo port install wget
</code></pre>
  </li>
  <li>
    <p>更改Rakefile文件，在最后增加一个任务</p>

    <pre><code> desc "get code file from github"
 task :github_code do
	
   begin
     require 'net/http'
     require 'uri'
     rm_rf "source/downloads"
     mkdir_p "source/downloads/code"
     if File.exist?("githubcode.cf")
       IO.foreach("githubcode.cf") do |line|
         if line.strip.empty? == false
             cd "source/downloads/code" do
             attr = line.split(' ')
             repo = attr[0].strip
             if repo.empty?
               abort("repo name is empty")
             end
             package = attr[1].strip
             file_url = attr[2].strip
             if file_url.empty?
               abort("file url is empty")
             end
             package_dir = package.gsub(/\./, '/')
             target_dir = repo + '/' + package_dir
             mkdir_p target_dir
             cd target_dir do
               system ("wget  " + file_url)
             end
           end
         end
       end
     else
       puts 'githubcode.cf not found'
     end
   end
 end        		
</code></pre>
  </li>
  <li>
    <p>在需要引用代码的地方使用以下方式</p>

    <pre><code>{% include_code lang:java &lt;repository name&gt;/&lt;package name&gt;/&lt;java file name&gt; %}
</code></pre>

    <p>注意：<repository name="">前面没有&#8217;/&#8217;，<pakcage name="">要将java的包名的&#8217;.&#8217;改为&#8217;/&#8217;</pakcage></repository></p>
  </li>
  <li>
    <p>每次有新增的github代码文件引入，则需要在rake generate前先调用</p>

    <pre><code>rake github_code
</code></pre>
  </li>
</ol>

<h3 id="section-2">小插曲</h3>
<p>####wget https访问问题</p>

<p>使用wget访问github的时候，因为github使用https，则会出现说github的“证书不可信”和“证书颁发者未知”的问题。
解决方式为</p>

<ol>
  <li>使用–no-check-certificate参数访问github，但是还是用warning，不够完美</li>
  <li>
    <p>决解证书问题  </p>

    <ul>
      <li>
        <p>安装curl-ca-bundle</p>

        <pre><code> sudo port install curl-ca-bundle
</code></pre>
      </li>
      <li>
        <p>配置wget</p>

        <pre><code> echo CA_CERTIFICATE=/opt/local/share/curl/curl-ca-bundle.crt &gt;&gt; ~/.wgetrc
</code></pre>
      </li>
    </ul>
  </li>
</ol>

<p>然后再运行wget就不会有问题了</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式: 单例模式]]></title>
    <link href="http://duffqiu.github.io/blog/2014/02/03/she-ji-mo-shi-dan-li-mo-shi/"/>
    <updated>2014-02-03T17:47:12+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/02/03/she-ji-mo-shi-dan-li-mo-shi</id>
    <content type="html"><![CDATA[<h3 id="section">单例模式原理</h3>

<ol>
  <li>模式名称：单例模式(Singleton Pattern)</li>
  <li>问题：需要确保系统中的某个类只能有一个实例存在。现实中如序号ID分配器，确保ID在系统中必须是唯一的。(当然也有很多方式生成唯一ID，这里只是个例子)</li>
  <li>解决方案：限制类被new出来，只能通过唯一的访问点（static方法）获得一个全局的自身的实例。这个访问点确保实例不会被多次创建</li>
  <li>结论：通过唯一访问点有效的控制实例的生成</li>
</ol>

<h3 id="singleton">简单的Singleton</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="java"><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kd">class</span> <span class="nc">Singleton</span> <span class="o">{</span>
</span><span class="line">    	<span class="kd">private</span> <span class="kd">static</span> <span class="n">Singleton</span> <span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Singleton</span><span class="o">();</span>
</span><span class="line">    	<span class="c1">//public staic Singleton INSTANCE = new Singleton(); //not suggest</span>
</span><span class="line">    	
</span><span class="line">
</span><span class="line">        <span class="c1">//must make the default create menthod private</span>
</span><span class="line">        <span class="kd">private</span> <span class="nf">Singleton</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="kd">public</span> <span class="n">staic</span> <span class="n">Singleton</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="c1">//....</span>
</span><span class="line">
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这里有几点注意：</p>

<ol>
  <li>默认的构造函数要设置为private，避免类被错误的new出来</li>
  <li>尽量用方法的方式获取类的实例    </li>
  <li>如果构造过程表负责，则需要用static{…}方式阔起来</li>
  <li>成员变量和单例控制函数都应该是static</li>
</ol>

<h3 id="section-1">延迟初始化</h3>

<p>根据<a href="">Effective Java</a>中的第55条，除非真的有必要，不然不用延迟初始化<br />
延迟初始化一定要考虑多线程安全的问题</p>

<p>使用<strong>Initialization on demand holder</strong>方式来控制延迟初始化</p>

<p>在单例中，变量是static的，使用Lazy Holder的方式根据需要创建这个静态变量，同时由JVM来保证线程并发问题。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span> (LazySingleton.java)</span> <a href="http://duffqiu.github.io/downloads/code/DesignPatternDemo/org/duffqiu/patterndemo/LazySingleton.java">download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="cm">/**</span>
</span><span class="line"><span class="cm"> * The file show the lazy holder</span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line"><span class="kn">package</span> <span class="n">org</span><span class="o">.</span><span class="na">duffqiu</span><span class="o">.</span><span class="na">patterndemo</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="cm">/**</span>
</span><span class="line"><span class="cm"> * @author macbook</span>
</span><span class="line"><span class="cm"> * </span>
</span><span class="line"><span class="cm"> *         2014年2月4日</span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line"><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">LazySingleton</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="nf">LazySingleton</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">LazyHolder</span> <span class="o">{</span>
</span><span class="line">	<span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">LazySingleton</span> <span class="n">INSTANCE</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LazySingleton</span><span class="o">();</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kd">static</span> <span class="n">LazySingleton</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">	<span class="k">return</span> <span class="n">LazyHolder</span><span class="o">.</span><span class="na">INSTANCE</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>小提示：对于非单例的类的延迟初始化要用double check的方式，具体可以参见Effective Java 第71条</p>

<p>提供两个JUnit test，一个是简单比对两次生成的singleton是否相同，一个是多线程（线程数比CPU大就可）的方式同时去获取singleton，然后比对第一个和其它的是否相同</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span> (LazySingletonTest.java)</span> <a href="http://duffqiu.github.io/downloads/code/DesignPatternDemo/org/duffqiu/patterndemotest/LazySingletonTest.java">download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="cm">/**</span>
</span><span class="line"><span class="cm"> * </span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line"><span class="kn">package</span> <span class="n">org</span><span class="o">.</span><span class="na">duffqiu</span><span class="o">.</span><span class="na">patterndemotest</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">assertj</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">api</span><span class="o">.</span><span class="na">Assertions</span><span class="o">.</span><span class="na">assertThat</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">java.util.Collection</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">java.util.Vector</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">java.util.concurrent.Callable</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">java.util.concurrent.ExecutorService</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">java.util.concurrent.Executors</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">java.util.concurrent.TimeUnit</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">org.duffqiu.patterndemo.LazySingleton</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="cm">/**</span>
</span><span class="line"><span class="cm"> * @author macbook</span>
</span><span class="line"><span class="cm"> * </span>
</span><span class="line"><span class="cm"> *         2014年2月4日</span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LazySingletonTest</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@Test</span>
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testEquals</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">	<span class="n">LazySingleton</span> <span class="n">a</span> <span class="o">=</span> <span class="n">LazySingleton</span><span class="o">.</span><span class="na">getInstance</span><span class="o">();</span>
</span><span class="line">	<span class="n">LazySingleton</span> <span class="n">b</span> <span class="o">=</span> <span class="n">LazySingleton</span><span class="o">.</span><span class="na">getInstance</span><span class="o">();</span>
</span><span class="line">
</span><span class="line">	<span class="n">assertThat</span><span class="o">(</span><span class="n">a</span><span class="o">).</span><span class="na">isSameAs</span><span class="o">(</span><span class="n">b</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@Test</span>
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testMultithread</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">InterruptedException</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">	<span class="kt">int</span> <span class="n">threadNum</span> <span class="o">=</span> <span class="n">Runtime</span><span class="o">.</span><span class="na">getRuntime</span><span class="o">().</span><span class="na">availableProcessors</span><span class="o">()</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">	<span class="kd">final</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">LazySingleton</span><span class="o">&gt;</span> <span class="n">litSingleton</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Vector</span><span class="o">&lt;&gt;();</span>
</span><span class="line">
</span><span class="line">	<span class="n">ExecutorService</span> <span class="n">manager</span> <span class="o">=</span> <span class="n">Executors</span><span class="o">.</span><span class="na">newScheduledThreadPool</span><span class="o">(</span><span class="n">threadNum</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">	<span class="n">Collection</span><span class="o">&lt;</span><span class="n">Callable</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;&gt;</span> <span class="n">tasks</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Vector</span><span class="o">&lt;</span><span class="n">Callable</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;&gt;();</span>
</span><span class="line">
</span><span class="line">	<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">threadNum</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class="line">	    <span class="n">tasks</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Callable</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">		<span class="nd">@Override</span>
</span><span class="line">		<span class="kd">public</span> <span class="n">Object</span> <span class="nf">call</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class="line">		    <span class="n">LazySingleton</span> <span class="n">a</span> <span class="o">=</span> <span class="n">LazySingleton</span><span class="o">.</span><span class="na">getInstance</span><span class="o">();</span>
</span><span class="line">		    <span class="n">litSingleton</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">a</span><span class="o">);</span>
</span><span class="line">		    <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line">		<span class="o">}</span>
</span><span class="line">
</span><span class="line">	    <span class="o">});</span>
</span><span class="line">	<span class="o">}</span>
</span><span class="line">
</span><span class="line">	<span class="n">manager</span><span class="o">.</span><span class="na">invokeAll</span><span class="o">(</span><span class="n">tasks</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">	<span class="n">manager</span><span class="o">.</span><span class="na">awaitTermination</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">	<span class="n">LazySingleton</span> <span class="n">b</span> <span class="o">=</span> <span class="n">litSingleton</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">	<span class="k">for</span> <span class="o">(</span><span class="n">Object</span> <span class="n">o</span> <span class="o">:</span> <span class="n">litSingleton</span><span class="o">.</span><span class="na">toArray</span><span class="o">())</span> <span class="o">{</span>
</span><span class="line">	    <span class="n">assertThat</span><span class="o">(</span><span class="n">b</span><span class="o">).</span><span class="na">isSameAs</span><span class="o">(</span><span class="n">o</span><span class="o">);</span>
</span><span class="line">	<span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-2">单例的序列化</h3>
<p>如果单例实现了Serializable接口，则需要注意，默认情况下，反序列化都会生成一个新的对象。根据Effective Java 第74条，谨慎实现序列化接口，除非真的有必要。因为一旦发布这个类出去，再改动这个类时使用端需要重新编译的，从而降低了类的灵活性</p>

<p>解决办法，利用反序列化完成前的readResolve函数重新返回本地的单例，确保系统的单例唯一性<br />
代码演示如下。如果将readResolve方法注释掉，则单元测试将报错</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span> (SerialibleSingleton.java)</span> <a href="http://duffqiu.github.io/downloads/code/DesignPatternDemo/org/duffqiu/patterndemo/SerialibleSingleton.java">download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="cm">/**</span>
</span><span class="line"><span class="cm"> * </span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line"><span class="kn">package</span> <span class="n">org</span><span class="o">.</span><span class="na">duffqiu</span><span class="o">.</span><span class="na">patterndemo</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">java.io.Serializable</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="cm">/**</span>
</span><span class="line"><span class="cm"> * @author macbook</span>
</span><span class="line"><span class="cm"> * </span>
</span><span class="line"><span class="cm"> *         2014年2月5日</span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line"><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">SerialibleSingleton</span> <span class="kd">implements</span> <span class="n">Serializable</span> <span class="o">{</span>
</span><span class="line">    <span class="cm">/**</span>
</span><span class="line"><span class="cm">     * </span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">long</span> <span class="n">serialVersionUID</span> <span class="o">=</span> <span class="mi">7646684293730736310L</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">DEFAULT_AGO</span> <span class="o">=</span> <span class="mi">36</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span> <span class="o">=</span> <span class="s">&quot;duff qiu&quot;</span><span class="o">;</span>
</span><span class="line">    <span class="kd">private</span> <span class="kt">int</span> <span class="n">age</span> <span class="o">=</span> <span class="n">DEFAULT_AGO</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="nf">SerialibleSingleton</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">LazyHolder</span> <span class="o">{</span>
</span><span class="line">	<span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">SerialibleSingleton</span> <span class="n">INSTANCE</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SerialibleSingleton</span><span class="o">();</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kd">static</span> <span class="n">SerialibleSingleton</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">	<span class="k">return</span> <span class="n">LazyHolder</span><span class="o">.</span><span class="na">INSTANCE</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/*</span>
</span><span class="line"><span class="cm">     * (non-Javadoc)</span>
</span><span class="line"><span class="cm">     * @see java.lang.Object#hashCode()</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="nd">@Override</span>
</span><span class="line">    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">hashCode</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">	<span class="kd">final</span> <span class="kt">int</span> <span class="n">prime</span> <span class="o">=</span> <span class="mi">31</span><span class="o">;</span>
</span><span class="line">	<span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class="line">	<span class="n">result</span> <span class="o">=</span> <span class="n">prime</span> <span class="o">*</span> <span class="n">result</span> <span class="o">+</span> <span class="n">age</span><span class="o">;</span>
</span><span class="line">	<span class="n">result</span> <span class="o">=</span> <span class="n">prime</span> <span class="o">*</span> <span class="n">result</span> <span class="o">+</span> <span class="o">((</span><span class="n">name</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="n">name</span><span class="o">.</span><span class="na">hashCode</span><span class="o">());</span>
</span><span class="line">	<span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/*</span>
</span><span class="line"><span class="cm">     * (non-Javadoc)</span>
</span><span class="line"><span class="cm">     * @see java.lang.Object#equals(java.lang.Object)</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="nd">@Override</span>
</span><span class="line">    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="n">Object</span> <span class="n">obj</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">	<span class="k">if</span> <span class="o">(</span><span class="k">this</span> <span class="o">==</span> <span class="n">obj</span><span class="o">)</span>
</span><span class="line">	    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class="line">	<span class="k">if</span> <span class="o">(</span><span class="n">obj</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span><span class="line">	    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class="line">	<span class="k">if</span> <span class="o">(</span><span class="n">getClass</span><span class="o">()</span> <span class="o">!=</span> <span class="n">obj</span><span class="o">.</span><span class="na">getClass</span><span class="o">())</span>
</span><span class="line">	    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class="line">	<span class="n">SerialibleSingleton</span> <span class="n">other</span> <span class="o">=</span> <span class="o">(</span><span class="n">SerialibleSingleton</span><span class="o">)</span> <span class="n">obj</span><span class="o">;</span>
</span><span class="line">	<span class="k">if</span> <span class="o">(</span><span class="n">age</span> <span class="o">!=</span> <span class="n">other</span><span class="o">.</span><span class="na">age</span><span class="o">)</span>
</span><span class="line">	    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class="line">	<span class="k">if</span> <span class="o">(</span><span class="n">name</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">	    <span class="k">if</span> <span class="o">(</span><span class="n">other</span><span class="o">.</span><span class="na">name</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span><span class="line">		<span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class="line">	<span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(!</span><span class="n">name</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">other</span><span class="o">.</span><span class="na">name</span><span class="o">))</span>
</span><span class="line">	    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class="line">	<span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="n">Object</span> <span class="nf">readResolve</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">	<span class="c1">//make sure the instance is the same as the local system after de-serialization </span>
</span><span class="line">	<span class="k">return</span> <span class="n">LazyHolder</span><span class="o">.</span><span class="na">INSTANCE</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>测试代码如下，一个自己实现的序列化和反序列化，一个是用apache common lang实现的。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span> (SerialibleSingletonTest.java)</span> <a href="http://duffqiu.github.io/downloads/code/DesignPatternDemo/org/duffqiu/patterndemotest/SerialibleSingletonTest.java">download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="cm">/**</span>
</span><span class="line"><span class="cm"> * </span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line"><span class="kn">package</span> <span class="n">org</span><span class="o">.</span><span class="na">duffqiu</span><span class="o">.</span><span class="na">patterndemotest</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">assertj</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">api</span><span class="o">.</span><span class="na">Assertions</span><span class="o">.</span><span class="na">assertThat</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">java.io.ByteArrayInputStream</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">java.io.ByteArrayOutputStream</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">java.io.InputStream</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">java.io.ObjectInputStream</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">java.io.ObjectOutputStream</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.commons.lang3.SerializationUtils</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.duffqiu.patterndemo.SerialibleSingleton</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="cm">/**</span>
</span><span class="line"><span class="cm"> * @author macbook</span>
</span><span class="line"><span class="cm"> * </span>
</span><span class="line"><span class="cm"> *         2014年2月5日</span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SerialibleSingletonTest</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@Test</span>
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">test</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">,</span> <span class="n">ClassNotFoundException</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">	<span class="n">SerialibleSingleton</span> <span class="n">a</span> <span class="o">=</span> <span class="n">SerialibleSingleton</span><span class="o">.</span><span class="na">getInstance</span><span class="o">();</span>
</span><span class="line">
</span><span class="line">	<span class="c1">//serialization</span>
</span><span class="line">	<span class="kt">byte</span><span class="o">[]</span> <span class="n">bytes</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line">	<span class="n">ByteArrayOutputStream</span> <span class="n">baos</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ByteArrayOutputStream</span><span class="o">();</span>
</span><span class="line">	<span class="n">ObjectOutputStream</span> <span class="n">oos</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ObjectOutputStream</span><span class="o">(</span><span class="n">baos</span><span class="o">);</span>
</span><span class="line">	<span class="n">oos</span><span class="o">.</span><span class="na">writeObject</span><span class="o">(</span><span class="n">a</span><span class="o">);</span>
</span><span class="line">	<span class="n">bytes</span> <span class="o">=</span> <span class="n">baos</span><span class="o">.</span><span class="na">toByteArray</span><span class="o">();</span>
</span><span class="line">
</span><span class="line">	<span class="c1">//de-serialization</span>
</span><span class="line">
</span><span class="line">	<span class="n">InputStream</span> <span class="n">is</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ByteArrayInputStream</span><span class="o">(</span><span class="n">bytes</span><span class="o">);</span>
</span><span class="line">	<span class="n">ObjectInputStream</span> <span class="n">ois</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ObjectInputStream</span><span class="o">(</span><span class="n">is</span><span class="o">);</span>
</span><span class="line">	<span class="n">SerialibleSingleton</span> <span class="n">b</span> <span class="o">=</span> <span class="o">(</span><span class="n">SerialibleSingleton</span><span class="o">)</span> <span class="n">ois</span><span class="o">.</span><span class="na">readObject</span><span class="o">();</span>
</span><span class="line">
</span><span class="line">	<span class="n">assertThat</span><span class="o">(</span><span class="n">a</span><span class="o">).</span><span class="na">isSameAs</span><span class="o">(</span><span class="n">b</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@Test</span>
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testWithCommLang</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">	<span class="n">SerialibleSingleton</span> <span class="n">a</span> <span class="o">=</span> <span class="n">SerialibleSingleton</span><span class="o">.</span><span class="na">getInstance</span><span class="o">();</span>
</span><span class="line">
</span><span class="line">	<span class="kt">byte</span><span class="o">[]</span> <span class="n">bytes</span> <span class="o">=</span> <span class="n">SerializationUtils</span><span class="o">.</span><span class="na">serialize</span><span class="o">(</span><span class="n">a</span><span class="o">);</span>
</span><span class="line">	<span class="n">SerialibleSingleton</span> <span class="n">b</span> <span class="o">=</span> <span class="n">SerializationUtils</span><span class="o">.</span><span class="na">deserialize</span><span class="o">(</span><span class="n">bytes</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">	<span class="n">assertThat</span><span class="o">(</span><span class="n">a</span><span class="o">).</span><span class="na">isSameAs</span><span class="o">(</span><span class="n">b</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="enumsingleton">Enum实现singleton</h3>
<p>这个参见Effective Java 第77条，好处是不用特别处理readResolve，也不用实现Serializable接口。缺点是无法延迟初始化，以及看起来不是太好看</p>

<p>代码如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span> (EnumSingleton.java)</span> <a href="http://duffqiu.github.io/downloads/code/DesignPatternDemo/org/duffqiu/patterndemo/EnumSingleton.java">download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="cm">/**</span>
</span><span class="line"><span class="cm"> * test git polling</span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line"><span class="kn">package</span> <span class="n">org</span><span class="o">.</span><span class="na">duffqiu</span><span class="o">.</span><span class="na">patterndemo</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="cm">/**</span>
</span><span class="line"><span class="cm"> * @author macbook</span>
</span><span class="line"><span class="cm"> * </span>
</span><span class="line"><span class="cm"> *         2014年2月5日</span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line"><span class="kd">public</span> <span class="kd">enum</span> <span class="n">EnumSingleton</span> <span class="o">{</span>
</span><span class="line">    <span class="n">INSTANCE</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">DEFAULT_AGO</span> <span class="o">=</span> <span class="mi">36</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span> <span class="o">=</span> <span class="s">&quot;duff qiu&quot;</span><span class="o">;</span>
</span><span class="line">    <span class="kd">private</span> <span class="kt">int</span> <span class="n">age</span> <span class="o">=</span> <span class="n">DEFAULT_AGO</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/**</span>
</span><span class="line"><span class="cm">     * @return the name</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="kd">public</span> <span class="kd">synchronized</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">	<span class="k">return</span> <span class="n">name</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/**</span>
</span><span class="line"><span class="cm">     * @param name</span>
</span><span class="line"><span class="cm">     *            the name to set</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="kd">public</span> <span class="kd">synchronized</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">	<span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/**</span>
</span><span class="line"><span class="cm">     * @return the age</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="kd">public</span> <span class="kd">synchronized</span> <span class="kt">int</span> <span class="nf">getAge</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">	<span class="k">return</span> <span class="n">age</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/**</span>
</span><span class="line"><span class="cm">     * @param age</span>
</span><span class="line"><span class="cm">     *            the age to set</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="kd">public</span> <span class="kd">synchronized</span> <span class="kt">void</span> <span class="nf">setAge</span><span class="o">(</span><span class="kt">int</span> <span class="n">age</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">	<span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">age</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>测试代码如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span> (EnumSingletonTest.java)</span> <a href="http://duffqiu.github.io/downloads/code/DesignPatternDemo/org/duffqiu/patterndemotest/EnumSingletonTest.java">download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="cm">/**</span>
</span><span class="line"><span class="cm"> * </span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line"><span class="kn">package</span> <span class="n">org</span><span class="o">.</span><span class="na">duffqiu</span><span class="o">.</span><span class="na">patterndemotest</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">assertj</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">api</span><span class="o">.</span><span class="na">Assertions</span><span class="o">.</span><span class="na">assertThat</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.commons.lang3.SerializationUtils</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.duffqiu.patterndemo.EnumSingleton</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="cm">/**</span>
</span><span class="line"><span class="cm"> * @author macbook</span>
</span><span class="line"><span class="cm"> * </span>
</span><span class="line"><span class="cm"> *         2014年2月5日</span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">EnumSingletonTest</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@Test</span>
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testSerialibel</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">	<span class="n">EnumSingleton</span> <span class="n">a</span> <span class="o">=</span> <span class="n">EnumSingleton</span><span class="o">.</span><span class="na">INSTANCE</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">	<span class="kt">byte</span><span class="o">[]</span> <span class="n">bytes</span> <span class="o">=</span> <span class="n">SerializationUtils</span><span class="o">.</span><span class="na">serialize</span><span class="o">(</span><span class="n">a</span><span class="o">);</span>
</span><span class="line">	<span class="n">EnumSingleton</span> <span class="n">b</span> <span class="o">=</span> <span class="n">SerializationUtils</span><span class="o">.</span><span class="na">deserialize</span><span class="o">(</span><span class="n">bytes</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">	<span class="n">assertThat</span><span class="o">(</span><span class="n">a</span><span class="o">).</span><span class="na">isSameAs</span><span class="o">(</span><span class="n">b</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@Test</span>
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testGetSet</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">	<span class="n">EnumSingleton</span> <span class="n">a</span> <span class="o">=</span> <span class="n">EnumSingleton</span><span class="o">.</span><span class="na">INSTANCE</span><span class="o">;</span>
</span><span class="line">	<span class="n">EnumSingleton</span> <span class="n">b</span> <span class="o">=</span> <span class="n">EnumSingleton</span><span class="o">.</span><span class="na">INSTANCE</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">	<span class="n">a</span><span class="o">.</span><span class="na">setAge</span><span class="o">(</span><span class="mi">30</span><span class="o">);</span>
</span><span class="line">	<span class="n">b</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">&quot;test name&quot;</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">	<span class="n">assertThat</span><span class="o">(</span><span class="n">a</span><span class="o">.</span><span class="na">getName</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="n">b</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class="line">	<span class="n">assertThat</span><span class="o">(</span><span class="n">a</span><span class="o">.</span><span class="na">getAge</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="n">b</span><span class="o">.</span><span class="na">getAge</span><span class="o">());</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-3">小插曲</h3>
<p>测试的判断，我这里用的是assertj的库，比较简单好用，参见<a href="http://joel-costigliola.github.io/assertj/index.html">assertj</a></p>

<p>从上面的测试序列化和反序列化的测试例子看出来，序列化和反序列化是挺麻烦的事情，还好有开源的工具帮组我们做到简单化。可以使用<a href="http://commons.apache.org/proper/commons-lang/">apache common lang</a>的SerializationUtils。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式：模版方法]]></title>
    <link href="http://duffqiu.github.io/blog/2014/02/03/she-ji-mo-shi-%3Amo-ban-fang-fa/"/>
    <updated>2014-02-03T14:53:40+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/02/03/she-ji-mo-shi-:mo-ban-fang-fa</id>
    <content type="html"><![CDATA[<h3 id="section">模版方法模式原理</h3>

<ol>
  <li>名称：模版方法(Template Method)模式</li>
  <li>问题：在很多时候多个对象有很多个共性，只是某个／某些行为不同，如果单独实现这些对象，则需要很多的copy - paste</li>
  <li>解决方案：将共性的行为抽取到抽象类，将特定的行为由具体的对象来实现／或者这个具体的行为本身就是一个对象(主要由继承方式和回调方式两种实现手段)</li>
  <li>结果：减少了相同的代码，增强了维护性</li>
</ol>

<h3 id="section-1">继承方式实现模版方法模式</h3>

<!--![继承方式的模版方法](/images/TemplatePattern1.png)-->

<center><img src="http://duffqiu.github.io/images/plantuml/2515b7108295d58fcfed227fd93bb039.png" /></center>

<p>这里注意点：
1. 父类是抽象类
2. 抽象方法是个个子类需要实现的各自的具体行为
3. 父类只是实现一个算法框架
4. Java为了避免父类的的方法被覆盖／重写，可以将其申明为final或private</p>

<h3 id="section-2">回调函数实现模版方法模式</h3>

<!--![回调函数的模版方法](/images/TemplatePattern2.png)-->

<center><img src="http://duffqiu.github.io/images/plantuml/edf928f5f73da67baf7161bc71ff9098.png" /></center>

<p>这里注意点：
1. 主类对应的接口依赖与回调的接口定义，不是直接依赖回调对象本身
2. 主类无需被继承，提定行为由实现回调接口的对象实现
3. 最为常用的例子是多线程处理中，回调对象都实现了Runable接口实现特性的逻辑，控制线程的主逻辑类如ExecutorService依赖于Runable接口</p>

<p>个人比较建议使用回调函数实现模版方法模式。（之前用C++的时候计较多的是用继承的方式）</p>

<h4 id="vi">Vi小技巧</h4>
<ol>
  <li>yy 用来copy当前行</li>
  <li>数字n＋yy  用来copy从单前行开始的n行</li>
  <li>p 在当前光标出插入copy的内容</li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UML类图]]></title>
    <link href="http://duffqiu.github.io/blog/2014/02/02/umllei-tu/"/>
    <updated>2014-02-02T20:44:44+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/02/02/umllei-tu</id>
    <content type="html"><![CDATA[<h3 id="uml">UML工具</h3>
<p>推荐大家用<a href="http://members.change-vision.com/files/astah_community" title="官网">astah</a>，Community版本就够了</p>

<h3 id="section">类图的描述</h3>

<ol>
  <li>类名：正体字为实例化类， 斜体字是抽象类，接口类有interface标识(也可以是个圆形，不过建议在类图中还是使用长方形的图形标识)</li>
  <li>属性：<strong><em>+</em></strong>表示puiblic， <strong><em>-</em></strong>表示private， <strong><em>#</em></strong>表示protected</li>
  <li>方法：<strong><em>+</em></strong>表示puiblic， <strong><em>-</em></strong>表示private， <strong><em>#</em></strong>表示protected, 有下划线表示      <font style="border-bottom:1px solid #000;">静态方法</font></li>
</ol>

<p><img src="http://duffqiu.github.io/images/ClassDiagram.png" alt="类图和继承与实现" /></p>

<h3 id="section-1">类图中类与类的关系</h3>

<h4 id="section-2">继承与实现</h4>

<ol>
  <li>
    <p>继承关系，用带实线的闭合空心箭头</p>

    <div style="font-size: 36px"> ⇾ </div>

    <p>表示，Java语言中<strong>extends</strong>体现</p>
  </li>
  <li>
    <p>接口实现关系，用虚线带的闭合空心箭头</p>

    <div style="font-size: 36px"> ­­­­⁃⁃⇾ </div>

    <p>表示，Java语言中<strong>implements</strong>体现</p>
  </li>
</ol>

<h4 id="section-3">关联关系(体现类与类的实例变量的关系)</h4>

<p>提示： 实践中，要将所有的关联关系都要画清楚</p>

<ol>
  <li>
    <p>类与类的关联关系：(association)，体现类与类的实例变量的关系，可以是单向关联（单箭头），也可以是双向关联（双箭头/无箭头，不鼓励有这种关系）。关联关系还可以有个基数，表明这一端的类有几个该类型的实例（0..1, 0..*, 1, 1..*），使用实线开放式箭头表示</p>

    <div style="font-size: 36px"> ➔ </div>
  </li>
  <li>
    <p>聚合关系（aggregation），关联关系的一种，是强的关联关系，是整体和个体间的关系(个体可以单独存在)，也是通过实例变量体现。Java语法是无法区分聚合和关联关系的。如果不是太确定，可以设置为关联关系。同样具有基数。实例类用空的菱形表示  </p>

    <div style="font-size: 36px"> ◇⟶ </div>
  </li>
  <li>
    <p>合成关系(Composition)，关联关系的一种，是比聚合关系<strong>强</strong>的关联关系。该关系和聚合关系的区别是，代表整体的部分负责代表部分的对象的生命周期，即部分对象不会独立于整体存在，且不能共享。实例类用实心的菱形表示，也是通过实例变量体现。如果不是太确定则用聚合/关联关系表示</p>

    <div style="font-size: 36px"> ◆⟶ </div>
  </li>
</ol>

<h4 id="section-4">依赖关系(体现为局部变量、方法参数，以及对静态方法的调用)</h4>

<p>提示： 这些表示在astah中都可以容易使用，要做到的事情时清楚其具体含义 </p>

<ol>
  <li>
    <p>依赖关系(dependency)，依赖总是单向。Java中体现为局部变量、方法参数，以及对静态方法的调用，图形通过虚线开放箭头表示</p>

    <div style="font-size: 36px"> ⤑ </div>

    <p>实践中没有必要将所有的依赖都画出来，只画出重要部分</p>
  </li>
</ol>

<h5 id="astah">类的关联关系和依赖关系在astah中的表示如下：</h5>

<p><img src="http://duffqiu.github.io/images/ClassRelationship.png" alt="类的关联关系和依赖关系" />   </p>

<p>尽管前面讲了使用UML不要太教条，试用就好，但是图的表示含义还是要准确的好
本章节的astah的文件：<a href="http://duffqiu.github.io/assets/ClassDiagram.asta">类的UML说明</a></p>

<h3 id="section-5">小插曲</h3>

<p>今天在家下载astah很慢，就用baidu的离线下载（普通下载方式），先交由baidu下载到网盘上，然后再到网盘上下载下来，速度很快，比直接下载好多了</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OO的一些设计原则]]></title>
    <link href="http://duffqiu.github.io/blog/2014/02/02/oode-%5B%3F%5D-xie-she-ji-yuan-ze/"/>
    <updated>2014-02-02T16:05:09+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/02/02/oode-[?]-xie-she-ji-yuan-ze</id>
    <content type="html"><![CDATA[<h3 id="oo">OO设计原则</h3>

<ol>
  <li>
    <p>“开-闭”原则 (Open-Closed Principle, OCP)</p>

    <ul>
      <li>对扩展开放，对修改关闭 (如不要去覆盖一个父类的行为，但是可以在一个新的类的行为中使用父类／关联类的行为)</li>
      <li>不允许更改系统的抽象层，是允许扩展系统的实现层  </li>
    </ul>
  </li>
  <li>
    <p>抽象类(Abstract Class)</p>

    <ul>
      <li>具体类不是用来继承的。继承要从抽象类开始，一般以abstract命名开头</li>
      <li>如果遇到具体类的继承，最有可能的重构方式是构造一个抽象类，这两个类成为这个抽象类的子类</li>
      <li>抽象类应当尽可能有多的共同代码</li>
      <li>抽象类应当尽可能少的数据</li>
      <li>针对抽象编程</li>
      <li>正确使用继承，不要从工具类继承</li>
    </ul>
  </li>
  <li>里氏代换原则(LSP)
    <ul>
      <li>如果程序调用适用于基类，则必定适用于其子类</li>
      <li>反过来的代价不成立</li>
    </ul>
  </li>
  <li>
    <p>依赖倒转原则（DIP）</p>

    <ul>
      <li>要依赖于抽象，不要依赖于具体实现</li>
      <li>三种耦合关系：
  a. 零耦合(Nil Coupling)，两个类没有耦合关系<br />
  b. 具体耦合(Concrete Coupling)，具体型耦合发生在两个具体类之间，有一个类对另一个具体类的直接引用造成（非继承）<br />
  c. 抽象耦合(Abstract Coupling)，耦合关系发生在一个具体类和抽象类（或接口）之间  </li>
      <li>DIP要求客户端依赖于抽象耦合</li>
      <li>抽象不应当依赖于细节，细节应当依赖于抽象</li>
      <li>针对接口编程，不针对实现编程。即使用接口和抽象类进行变量的类型声明、函数参数的类型声明、方法的返回值类型声明，以及数据类型的转换。</li>
      <li>联合使用Java接口和抽象类</li>
      <li>对于已经很稳定的类，客户端是可以依赖于这个具体类型的，而不用再发明抽象类型</li>
    </ul>
  </li>
  <li>接口隔离原则(ISP)
    <ul>
      <li>使用多个专门的接口比使用单一接口要好 </li>
      <li>一个类对于另外一个类的依赖应当建立在最小的接口上</li>
      <li>定制服务：如果客户端仅需要某些方法，那么就应但只提供这些需要的方法，而不提供不需要的方法</li>
    </ul>
  </li>
  <li>合成/聚合复用原则（CARP）  <br />
    <ul>
      <li>在一个新的对象中使用一些已有的对象，新的对象通过向这些旧的对象委派达到复用已有功能的目的</li>
      <li>尽量使用合成/聚合，尽量不要使用继承</li>
    </ul>
  </li>
  <li>迪米特法则(LoD)<br />
又叫做最少知识原则(Least Knowledge Principle LKP)
    <ul>
      <li>只与你直接的朋友通信</li>
      <li>不要和“陌生人”说话</li>
      <li>朋友确定的原则：
        <ul>
          <li>当前对象本身（this）</li>
          <li>以参数形式传入到当前对象方法的对象</li>
          <li>当前对象的实例变量直接引用的对象</li>
          <li>当前对象的实例变量如果是一个聚集，则聚集中的元素都是朋友</li>
          <li>当前对象所创建的对象</li>
        </ul>
      </li>
      <li>使用抽象陌生人重构来调用陌生对象，避免过多的原子调用转发</li>
    </ul>
  </li>
  <li>
    <p>广义迪米特法则在类上的设计</p>

    <ul>
      <li>优先考虑将一个类设置成不变类</li>
      <li>尽量降低一个类的访问权限（package-private是默认权限，无需标示private关键字）</li>
      <li>谨慎使用Serializable</li>
      <li>尽量降低类成员(属性、方法、嵌套类、嵌套接口)的访问权限
        <ul>
          <li>private，只能类内部使用 </li>
          <li>package-private,只能被当前包的类访问，默认权限，无需任何关键字标示</li>
          <li>protected，但前包的类和它的子类可以访问</li>
          <li>public,任何类都可以访问</li>
        </ul>
      </li>
      <li>限制局域变量的有效访问</li>
    </ul>
  </li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式开篇]]></title>
    <link href="http://duffqiu.github.io/blog/2014/02/02/she-ji-mo-shi-kai-pian/"/>
    <updated>2014-02-02T15:31:04+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/02/02/she-ji-mo-shi-kai-pian</id>
    <content type="html"><![CDATA[<h3 id="section">参考</h3>
<p>从这里开始，主要是参考<a href="http://www.amazon.cn/漫谈设计模式-从面向对象开始-刘济华/dp/B006QQZE4Y/ref=sr_1_1?ie=UTF8&amp;qid=1391326331&amp;sr=8-1&amp;keywords=漫谈设计模式">漫谈设计模式</a></p>

<p>要去理解设计模式，必须是有以下基础</p>

<ol>
  <li>语言基础(Java, C++, Object-C…)，这里是以Java语言做介绍，如果需要初步学Java则可以看看<a href="https://www.udemy.com/java-tutorial/?couponCode=FREE">Udemy</a>上面的免费入门视频</li>
  <li>懂得OO的设计理念/原则，后面再抽个章节讲讲这个<a href="http://duffqiu.github.io/blog/2014/02/02/oode-%5B%3F%5D-xie-she-ji-yuan-ze/">OO的设计原则</a></li>
  <li>懂得UML的基础，入门可以先看看这本简单的<a href="http://www.amazon.cn/系统分析师UML项目实战-邱郁惠/dp/B00DSQZ9IQ/ref=sr_1_1?ie=UTF8&amp;qid=1391326582&amp;sr=8-1&amp;keywords=系统分析师UML项目实战">系统分析师UML项目实战</a>，个人也不太建议UML在工作做过于教条化。之前曾经有1年多都是在画UML图，然后开发依据UML图去做开发，结果效果并不是很好。但是一些基础的比较实际的用法还是值得去做的。要看明白设计模式的类图，请先看看<a href="http://duffqiu.github.io/blog/2014/02/02/umllei-tu/">UML类图</a></li>
</ol>

<h3 id="gof-23">经典的GoF 23个设计模式，这只是个基础</h3>
<p>GoF的23个设计模式只是一个经典的总结，但是不代表只有23个，其实在工作中很多问题的共性解决方案都有可能编程设计模式，只要复合以下4个基本的设计模式要素</p>

<ol>
  <li>模式名称（Pattern Name）</li>
  <li>问题描述（Problem）</li>
  <li>解决方案（Solution）</li>
  <li>效果／结果（consequence）</li>
</ol>

<h3 id="section-1">模式的套用</h3>
<p>不是说能套上设计模式就是好的设计，好的设计需要多个方面的积累，AOP、BDD、TDD。。。<br />
模式更像是独孤九剑，最后是忘记模式而自然而然的使用模式(好像有些玄乎？)<br />
设计模式的基础还是OO，只有用好OO才能更好的理解和用好设计模式</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress添加bing网站分析]]></title>
    <link href="http://duffqiu.github.io/blog/2014/02/02/octopresstian-jia-bingwang-zhan-fen-xi/"/>
    <updated>2014-02-02T11:30:01+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/02/02/octopresstian-jia-bingwang-zhan-fen-xi</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<p>Google提供了相应的Analytics网站分析工具，同样Bing也提供了类似的工具：<a href="http://www.bing.com/toolbox/webmaster/" title="官网">Bing网站管理员</a>，同样可以给你的Octopress很快速的添加该分析工具</p>

<h3 id="section-1">配置</h3>

<ol>
  <li>在Bing网站管理员注册，并填写必要的信息</li>
  <li>添加一个新网站，填写相应的信息</li>
  <li>
    <p>根据认证所有权网页配置Octopress，具体如下</p>

    <ul>
      <li>下载你的BingSiteAuth.xml到octopres的source目录下</li>
      <li>
        <p>配置_config_yml文件，设置bing analytics开关，在文件最后加入，如果以后不用bing analytics，则可以将开关设置为false就可以，不用到处改文件</p>

        <pre><code># Bing Analytics  
bing_analytics: true
</code></pre>
      </li>
      <li>
        <p>修改octopres/source/_include目录下的head.html文件，在&lt;head&gt;下面增加以下内容，记得替换&lt;…&gt;bing给你的blog的标识</p>

        <pre><code>{% if site.bing_analytics %}
&lt;meta name="msvalidate.01" content="&lt;...&gt;" /&gt;
{% endif %}
</code></pre>
      </li>
      <li>
        <p>然后重新生成并部署就可以了      </p>

        <pre><code>&gt;rake generate
&gt;rake deploy
</code></pre>
      </li>
    </ul>
  </li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Port Tips: 软件版本选择]]></title>
    <link href="http://duffqiu.github.io/blog/2014/02/01/port-tips-ruan-jian-ban-ben-xuan-ze/"/>
    <updated>2014-02-01T23:30:20+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/02/01/port-tips-ruan-jian-ban-ben-xuan-ze</id>
    <content type="html"><![CDATA[<h3 id="port">port查看本地已安装的文件</h3>

<pre><code>&gt;port installed
</code></pre>

<h3 id="port-1">port查看同一个软件的不同版本</h3>

<pre><code>&gt;port select --list python    #这里查看的已经安装了的python的版本
</code></pre>

<p>我的机器情况是：    </p>

<p><img src="http://duffqiu.github.io/images/Snip20140201_1.png" alt="image" />    </p>

<p>显示为none指的是系统自带的版本</p>

<h3 id="section">激活某个版本</h3>

<pre><code>&gt;sudo port select --set python python2.7
</code></pre>

<p><strong>注意：</strong> 只有那些有对应的select软件包的软件才可以设置版本    </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[加速Octopress的装载]]></title>
    <link href="http://duffqiu.github.io/blog/2014/02/01/jia-su-octopressde-zhuang-zai/"/>
    <updated>2014-02-01T14:23:15+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/02/01/jia-su-octopressde-zhuang-zai</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<p>加速网页的存取有多种方式，其中之一就是减少一个页面的http的请求数量，因为浏览器同时发送http请求的数量是有限的，而对于很多页面而言，通常定义了很多css和js文件的链接，这样就会造成浏览器需要多次请求后才能完整的展示页面，所以最好的方式将多个css和js文件合并，如果需要还可以将合并后的文件压缩再传输，从而达到加速的目的。</p>

<h3 id="gem">Gem插件安装</h3>
<p>Octopress的<a href="https://github.com/matthodan/jekyll-asset-pipeline">jekyll-asset-pipeline</a>就是一个这样机制的开源插件<br />
简单的可以通过以下命令安装</p>

<pre><code>&gt;sudo gem install jekyll-asset-pipeline
</code></pre>

<p><strong>注意：</strong> 有可能安装完成后，需要更新bundle，这行命令</p>

<pre><code>&gt;sudo bunlde update  
</code></pre>

<p>压缩需要用到插件YUI Compressor，可以简单通过以下命令安装</p>

<pre><code>&gt;sudo gem install yui-compressor
</code></pre>

<p>另外一个选择是使用Google的<a href="https://developers.google.com/closure/?hl=zh-cn">Closure</a>，可以通过简单通过以下命令安装</p>

<pre><code>&gt;sudo gem install Closure          
</code></pre>

<h3 id="octopress">配置Octopress</h3>
<ol>
  <li>
    <p>配置octopress目录下的Gemfile文件，在:development中，增加以下两行</p>

    <pre><code>gem "jekyll-asset-pipeline"
gem "yui-compressor
</code></pre>
  </li>
  <li>
    <p>在 Octopress的plugins目录中，创建一个名为“jekyll_asset_pipeline.rb”的文件，内容如下：可以用注释那行代替上面那行就是使用Google的closure来压缩js文件</p>

    <pre><code> require 'jekyll_asset_pipeline'

 module JekyllAssetPipeline
	
   class CssCompressor &lt; JekyllAssetPipeline::Compressor
     require 'yui/compressor'
	
     def self.filetype
       '.css'
     end
	
     def compress
       return YUI::CssCompressor.new.compress(@content)
     end
   end
	
   class JavaScriptCompressor &lt; JekyllAssetPipeline::Compressor
     require 'yui/compressor'
     #require 'closure-compiler'
	
     def self.filetype
       '.js'
     end
	
     def compress
       return YUI::JavaScriptCompressor.new(munge: true).compress(@content)
       #return Closure::Compiler.new.compile(@content)
     end
   end
	
 end
</code></pre>
  </li>
  <li>
    <p>修改Octopress的配置文件_config.yml，在文件最后增加以下配置</p>

    <pre><code>asset_pipeline:
   bundle: true            # Default = true
   compress: true          # Default = true
   #output_path: assets     # Default = assets
   #display_path: nil       # Default = nil
   gzip: false             # Default = false
</code></pre>
  </li>
  <li>
    <p>修改相应的html文件，激活js/css文件的合并压缩。不同的Octopress的template，对应的文件或有不同，我这里用的是Octopress默认的官方template，因该适合大多数人</p>

    <ul>
      <li>
        <p>修改source/_include目录下的head.html文件，注释掉带有js/css的几行</p>

        <pre><code> &lt;!-- &lt;link href="{{ root_url }}/stylesheets/screen.css" media="screen, projection" rel="stylesheet" type="text/css"&gt; --&gt;
	 
 &lt;!-- &lt;script src="{{ root_url }}/javascripts/modernizr-2.0.js"&gt;&lt;/script&gt; --&gt;
 &lt;!-- &lt;script src="http://duffqiu.github.io//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"&gt;&lt;/script&gt; --&gt;
 &lt;!-- &lt;script&gt;!window.jQuery &amp;&amp; document.write(unescape('%3Cscript src="./javascripts/libs/jquery.min.js"%3E%3C/script%3E'))&lt;/script&gt; --&gt;
 &lt;!-- &lt;script src="{{ root_url }}/javascripts/octopress.js" type="text/javascript"&gt;&lt;/script&gt; --&gt;
</code></pre>
      </li>
      <li>
        <p>增加以下内容</p>

        <pre><code>{% css_asset_tag global %}
 - /stylesheets/screen.css
{% endcss_asset_tag %}
	
{% javascript_asset_tag global %}
- /javascripts/octopress.js
- /javascripts/modernizr-2.0.js
- /javascripts/libs/jquery.min.js
- /javascripts/libs/swfobject-dynamic.js
- /javascripts/libs/jXHR.js
{% endjavascript_asset_tag %}
</code></pre>
      </li>
      <li>
        <p>同理修改source/_includes/custom目录下的head.html文件，注释掉里面的内容，增加上面的内容就可   </p>
      </li>
    </ul>
  </li>
  <li>
    <p>到底有多css和js文件需要加入到需要增加的内容中呢？在octopress/source目录中搜索一下</p>

    <pre><code>find . -name '*.css'
find . -name '*.js'
</code></pre>

    <p>然后将必要的文件加入到上面的文件列表中</p>
  </li>
</ol>

<h3 id="vi">Vi小提示</h3>

<ol>
  <li>跳到文件头用 “:0”</li>
  <li>跳到行头在非编辑状态下直接收入”0”</li>
  <li>跳到行尾在非编辑状态下直接收入”$”      </li>
</ol>

]]></content>
  </entry>
  
</feed>
