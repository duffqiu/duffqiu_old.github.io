<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Duff Qiu's Blog]]></title>
  <link href="http://duffqiu.github.io/atom.xml" rel="self"/>
  <link href="http://duffqiu.github.io/"/>
  <updated>2015-02-23T23:46:48+08:00</updated>
  <id>http://duffqiu.github.io/</id>
  <author>
    <name><![CDATA[Duff Qiu]]></name>
    <email><![CDATA[duffqiu@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mac下port工具的使用]]></title>
    <link href="http://duffqiu.github.io/blog/2015/02/23/mac-port-guide/"/>
    <updated>2015-02-23T22:29:35+08:00</updated>
    <id>http://duffqiu.github.io/blog/2015/02/23/mac-port-guide</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<hr />

<p>Mac下面除了用dmg、pkg来安装软件外，比较方便的还有用MacPorts来帮助你安装其他应用程序，跟BSD中的ports道理一样。MacPorts就像apt-get、yum一样，可以快速安装些软件。</p>

<p>Mac下还有brew可以用来管理软件包，但是个人不喜欢这个工具，还是比较倾向于用port</p>

<h3 id="section-1">工具使用详解</h3>
<hr />

<ul>
  <li>更新ports tree(即软件信息列表)和MacPorts版本，强烈推荐第一次运行的时候使用-v参数，显示详细的更新过程。</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo port -v selfupdate</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>搜索索引中的软件</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">port search &lt;name&gt;</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>安装新软件</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo port install &lt;name&gt;</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>卸载软件</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo port uninstall &lt;name&gt;</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>递归卸载要卸载的软件所依赖的软件包，但这一命令不会卸载那些又依赖其他软件包的软件。</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo port uninstall --follow-dependencies software_name </span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>查看有更新的软件以及版本</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">port outdated</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>升级可以更新的软件</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo port upgrade outdated </span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>升级软件并且同时升级所依赖的软件包</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo port upgrade &lt;name&gt; </span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>关闭软件</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo port deactivate &lt;name&gt;</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>查询所需软件信息</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo port info &lt;name&gt; </span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>查看软件依赖性：</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo port deps &lt;name&gt;  </span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>清理安装过程中的缓存文件，在获取软件失败时也可以使用：</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo port clean --all &lt;name&gt;  </span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>查看已经安装的软件的内容信息</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">port contents &lt;name&gt;  </span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>查看已安装软件的信息</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo port installed &lt;name&gt;  </span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>报告所查询软件的依赖包情况</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">port dependents &lt;name&gt;  </span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[集成SBT到Jenkins中]]></title>
    <link href="http://duffqiu.github.io/blog/2015/02/23/integrate-sbt-project-jenkins/"/>
    <updated>2015-02-23T14:56:24+08:00</updated>
    <id>http://duffqiu.github.io/blog/2015/02/23/integrate-sbt-project-jenkins</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<hr />

<p>之前有些过关于Jenkins上搭建maven工程<a href="http://duffqiu.github.io/blog/2014/02/06/yong-jenkinsda-jian-ji-yu-githubhe-junitde-zi-dong-hua-ce-shi/">1</a>，但是对于Scala的工程最好还是用SBT，那么如何在Jenkins用SBT呢？</p>

<h3 id="section-1">解决办法</h3>
<hr />

<p>Jenkins已经提供了SBT的插件，类似Maven的插件</p>

<p>具体步骤如下：</p>

<ul>
  <li>在Jenkins上的系统管理-&gt;管理Jenkins-&gt;管理插件中选择可选插件，然后输入sbt过滤条件</li>
  <li>选择安装sbt plugin</li>
  <li>重启Jenkins</li>
  <li>配置sbt：系统管理-&gt;系统设置，设置”sbt lauch jars”，注意这里是指具体的jar文件，不是配置路径。如<code>/opt/local/share/sbt/sbt-launch.jar</code>  </li>
  <li>新建项目（因为不像Maven有特定的选项），所以选择”构建一个自由风格的软件项目”  </li>
  <li>然后在构建步骤中选择”Build using SBT”，然后配置对应的参数。这里需要注意的是JVM Flags，如果不配置很可能PerGem不够造成OutofMemoryError。但是该配置什么呢？如果不是太清楚，则可以直接拷贝sbt的启动脚本中的JVM Flags参数，如我机器的：<code>-XX:+CMSClassUnloadingEnabled -Xms1536m -Xmx1536m -XX:MaxPermSize=384m -XX:ReservedCodeCacheSize=192m -Dfile.encoding=UTF8</code></li>
  <li>如果Git repo下是涵盖了多个项目，则可以制定sub-directory path来运行特定个项目</li>
</ul>

<h3 id="section-2">小插曲</h3>

<h4 id="linuxunix">Linux/Unix下跟踪或查看文件的命令</h4>

<ol>
  <li>输入文件到console: <code>cat &lt;filename&gt;</code></li>
  <li>逐行显示文件: <code>less &lt;filename&gt;</code></li>
  <li>显示文件最后的一屏: <code>tail &lt;filename&gt;</code></li>
  <li>如果需要跟踪文件的变化则: <code>tail -f &lt;filename&gt;</code></li>
</ol>

<h4 id="git">Git清理工作空间</h4>

<p>如果在某个Repo中，你不小心加入了很多没用的文件和文件目录（或者是因为没有checkout到真确的branch就做了pull操作），则你期望一次性清理掉这些文件，可以用以下命令
不过需要注意的是这个操作不可逆的，可以通过增加<code>-n</code>参数来预览一下将会有什么变化</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">git clean -fdx
</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[初学sbt]]></title>
    <link href="http://duffqiu.github.io/blog/2015/02/10/sbt-for-new-user/"/>
    <updated>2015-02-10T15:22:32+08:00</updated>
    <id>http://duffqiu.github.io/blog/2015/02/10/sbt-for-new-user</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<hr />
<p>初学一种语言最烦的就是搭建开发环境了，每次都要装一堆的plugin，有时候又因为不同的plugin的版本等问题冲突
前面介绍如何使用Maven来搭建开发环境，总体而言还算比较复杂。特别是在不同的机器上竟然有些plugin不可用，也不知道问题在那里。
所以既然是以开发Scala为主，那还是用<a href="http://scala-sbt.org">SBT</a>吧</p>

<h3 id="section-1">主要参考</h3>
<hr />
<p>直接参考<a href="http://www.scala-sbt.org/0.13/tutorial/index.html">SBT官网的Getting Started</a>并结合自己的一些实践做了下浓缩
官网已经提供中文版本了(开来中国是用Scala增长比较快的地区，另一个是美国硅谷，有兴趣可以看看google trend上关于Scala)</p>

<p>该Getting Started有几章可以暂时不用看的，到真的有需要再看
- Scope
- Multi-project builds
- Custom settings and tasks
- .scala build definition</p>

<p>另外在Github上有个<a href="https://github.com/n8han/giter8">giter8，简称g8</a>的工具，可以帮助获取scala, sbt的模版，不过自从有了<a href="http://typesafe.com/get-started">typesafe的activator</a>后，提供g8模版已经不多了，原有的模版也没怎么更新了</p>

<h4 id="sbt">安装SBT</h4>
<p>可以根据SBT官网的Getting Started，对于不同的平台采用不同的安装方式
安装完后，基本上就是一个sbt的命令脚本和sbt-launch.jar
安装完后，通过命令行运行一次<code>sbt</code>，然后sbt会将对应的依赖包下载下来。
sbt会在用户的home目录下创建.sbt和.ivy2的目录，依赖包都放在了ivy2的目录里。因为sbt实际是通过ivy2来管理包依赖。不过大家不用去看ivy2，这些都是sbt自己管理的。
如果是公司有代理的环境中，则需要设置java代理的参数才可以使用，不然sbt总是在尝试下载依赖包。
一般设置java代理的参数是在shell的文件中设置JAVA_OPTS,但是好像不其作用。所以最好的方式是直接修改sbt的命令脚本增加代理配置参数</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">JAVA_OPTS</span><span class="o">=</span><span class="s2">&quot;$JAVA_OPTS -Dhttp.proxyHost=&lt;proxy host&gt; -Dhttp.proxyPort=&lt;proxy port&gt; -Dhttps.proxyHost=&lt;proxy host&gt; -Dhttps.proxyPort=&lt;proxy port&gt;&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="scalajava">建立一个scala/java工程</h4>
<p>建议不要从参考SBT官网的Getting Started的hello world，因为它将源文件建在了工程的根目录上了
很奇怪，到目前位置都没有个一个像maven那样可以直接在Eclipse上创建一个sbt的工程，而必须先手工创建一些文件</p>

<p>具体步骤为：</p>

<ul>
  <li>创建一个工程目录如： sbt-sample</li>
  <li>在工程目录下再创建一个子目录，必须名为project</li>
  <li>在工程目录下创建名为build.sbt的定义文件，并写入基本的信息，需要注意的是每个配置都要空一行。以后打开别人的工程先看看这个文件的基本定义，特比是scala的版本</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">name :<span class="o">=</span> <span class="s2">&quot;sbt-sample&quot;</span>
</span><span class="line">
</span><span class="line">version :<span class="o">=</span> <span class="s2">&quot;1.0&quot;</span>
</span><span class="line">
</span><span class="line">scalaVersion :<span class="o">=</span> <span class="s2">&quot;2.11.4&quot;</span>
</span><span class="line">
</span><span class="line">organization :<span class="o">=</span> <span class="s2">&quot;org.duff&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<ul>
  <li>使用<a href="https://github.com/typesafehub/sbteclipse">sbteclpise</a>插件， 在project子目录下创建一个plugins.sbt文件，然后加入一下内容，然后在sbt的命令行下执行<code>eclipse</code>就可以生成对应的eclipse的工程了。如果改动了sbt的文件则最后重新执行一次<code>eclipse</code>获得最新的包依赖等</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">addSbtPlugin<span class="o">(</span><span class="s2">&quot;com.typesafe.sbteclipse&quot;</span> % <span class="s2">&quot;sbteclipse-plugin&quot;</span> % <span class="s2">&quot;2.5.0&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>打开Eclipse，写个测试的App</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kn">package</span> <span class="n">org</span><span class="o">.</span><span class="na">duff</span><span class="o">.</span><span class="na">sbtsample</span>
</span><span class="line">
</span><span class="line"><span class="n">object</span> <span class="n">Main</span> <span class="kd">extends</span> <span class="n">App</span><span class="o">{</span>
</span><span class="line">
</span><span class="line">  <span class="n">println</span><span class="o">(</span><span class="s">&quot;this is a sbt sample&quot;</span><span class="o">)</span>
</span><span class="line">
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>
    <p>在sbt命令行下执行<code>compile</code>，然后<code>run</code>就可以看到对应的输入了</p>
  </li>
  <li>
    <p>设置包依赖仓库（repository）。对于Maven是设置的Maven的conf文件中，但是对于SBT是每次定义在项目的build.sbt文件中</p>

    <ul>
      <li>方法一： 通过URL定义如： <code>resolvers += "&lt;rep name&gt;" at "&lt;rep url&gt;"</code></li>
    </ul>
  </li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">resolvers +<span class="o">=</span>
</span><span class="line">  <span class="s2">&quot;Sonatype OSS Snapshots&quot;</span> at <span class="s2">&quot;https://oss.sonatype.org/content/repositories/snapshots&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>
    <p>方法二： 使用<a href="http://www.scala-sbt.org/0.13/docs/Resolvers.html">预定义的Rep</a>，主要有：</p>

    <ul>
      <li>DefaultMavenRepository at  https://repo1.maven.org/maven2/，这个会被默认使用，无需指定</li>
      <li>JavaNet1Repository  at http://download.java.net/maven/1/</li>
      <li>Resolver.sonatypeRepo(“public”) (or “snapshots”, “releases”) at https://oss.sonatype.org/content/repositories/public</li>
      <li>Resolver.typesafeRepo(“releases”) (or “snapshots”) at https://repo.typesafe.com/typesafe/releases</li>
      <li>Resolver.typesafeIvyRepo(“releases”) (or “snapshots”) at https://repo.typesafe.com/typesafe/ivy-releases</li>
      <li>Resolver.sbtPluginRepo(“releases”) (or “snapshots”) at https://repo.scala-sbt.org/scalasbt/sbt-plugin-releases</li>
      <li>Resolver.bintrayRepo(“owner”, “repo”) at https://dl.bintray.com/[owner]/[repo]/</li>
      <li>Resolver.jcenterRepo at https://jcenter.bintray.com/</li>
    </ul>
  </li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">resolvers +<span class="o">=</span> JavaNet1Repository
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>方法三：同时指定多个rep，使用<code>resolvers ++= Seq(&lt;rep1&gt;, &lt;rep2&gt;)</code>, rep1/rep2可以使用方法一或方法二</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">resolvers ++<span class="o">=</span> Seq<span class="o">(</span>Resolver.sonatypeRepo<span class="o">(</span><span class="s2">&quot;public&quot;</span><span class="o">)</span>,
</span><span class="line">    Resolver.typesafeRepo<span class="o">(</span><span class="s2">&quot;releases&quot;</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>指定工程依赖包，和resolver类似，可以一个一个指定(+=)，也可以同时指定(++= Seq())，另外如果需要对多个包使用同一个变量指定如scala版本等，则可以使用如下例子的方式(即Scala的闭包)</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">libraryDependencies ++<span class="o">=</span> <span class="o">{</span>
</span><span class="line">  val <span class="nv">akkaVersion</span>       <span class="o">=</span> <span class="s2">&quot;2.3.9&quot;</span>
</span><span class="line">  val <span class="nv">sprayVersion</span>      <span class="o">=</span> <span class="s2">&quot;1.3.2&quot;</span>
</span><span class="line">  Seq<span class="o">(</span>
</span><span class="line">    <span class="s2">&quot;com.typesafe.akka&quot;</span> %% <span class="s2">&quot;akka-slf4j&quot;</span>      % akkaVersion withSources<span class="o">()</span> withJavadoc<span class="o">()</span>,
</span><span class="line">    <span class="s2">&quot;ch.qos.logback&quot;</span>    %  <span class="s2">&quot;logback-classic&quot;</span> % <span class="s2">&quot;1.1.2&quot;</span>,
</span><span class="line">    <span class="s2">&quot;com.typesafe.akka&quot;</span> %% <span class="s2">&quot;akka-testkit&quot;</span>    % akkaVersion   % <span class="s2">&quot;test&quot;</span>,
</span><span class="line">    <span class="s2">&quot;org.scalatest&quot;</span>     %% <span class="s2">&quot;scalatest&quot;</span>       % <span class="s2">&quot;2.2.0&quot;</span>       % <span class="s2">&quot;test&quot;</span> withSources<span class="o">()</span> withJavadoc<span class="o">()</span>
</span><span class="line">  <span class="o">)</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<ul>
  <li>每个lib的定义格式为 <code>&lt;groupID&gt; % &lt;artifactID&gt; % &lt;revision&gt; % configuration</code>。如上面的 ch.qos.logback，默认情况下都是”compile”的配置，而对于scalatest是指定在”test”的时候才使用</li>
  <li>如果artifactID是根据scala的版本有不同的版本则可以简化的使用%%的方式省去指定xxx_2.11.4 (使用scala 2.11.4)而是直接写xxx</li>
  <li>
    <p>需要同时下载javadoc和source，则可以在最后用withSources() withJavadoc()</p>
  </li>
  <li>
    <p>更改完后，如果还在sbt命令行下，则可以运行<code>reload</code>来更新相应的配置</p>
  </li>
  <li>
    <p>打包程序，如果使用的不同的framework/toolkit，则有不同的打包方式，一般的打包方式是打成大的jar包</p>

    <ul>
      <li>配置打包plugin，在project子目录中增加一个名为assembly.sbt的文件，增加以下内容</li>
    </ul>
  </li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">addSbtPlugin<span class="o">(</span><span class="s2">&quot;com.eed3si9n&quot;</span> % <span class="s2">&quot;sbt-assembly&quot;</span> % <span class="s2">&quot;0.12.0&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<ul>
  <li>然后就可以在sbt命令行下执行<code>assembly</code>，则可以打包出jar文件了。可以在子目录target/scala-2.11/下找到这个jar</li>
  <li>通过执行<code>java -jar &lt;xxx.jar&gt;</code>来执行程序</li>
  <li>
    <p>可以通过在build.sbt中增加以下配置更改打包jar</p>

    <ul>
      <li><code>ssemblyJarName in assembly := "&lt;xxxx.jar&gt;"</code> 更改打包的jar文件名</li>
      <li><code>mainClass in assembly := Some("&lt;com.example.Main&gt;")</code> 更改main函数的入库</li>
      <li>如果像用工程的版本号来合成打包文件，则可以这样写 <code>assemblyJarName in assembly := "&lt;name&gt;" + version.value +".jar"</code></li>
    </ul>
  </li>
</ul>

<p>到此一个就本的sbt的scala开发环境就建成了。
后续不同的项目的变化基本上就集中在增加新的依赖包，增加不同的plugin来执行不同的任务
个人使用看来，对比maven相对而言要简单一些。只是SBT使用场景基本只局限于java和scala，同时sbt的写法是scala语法</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scala中函数式编程还是命令式编程]]></title>
    <link href="http://duffqiu.github.io/blog/2015/02/05/fp-or-imperative-with-scala/"/>
    <updated>2015-02-05T11:44:46+08:00</updated>
    <id>http://duffqiu.github.io/blog/2015/02/05/fp-or-imperative-with-scala</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<hr />
<p>Scala是即支持传统的命令式编程也支持函数式编程(FP)，我们既可以像java那样写代码，也可以像Lisp那样写。
但是那种好呢？</p>

<h3 id="section-1">解决办法</h3>
<hr />
<p>个人的理解是，主要取决于对问题的解决方式的思路。
如果已经习惯了命令式编程的思路，那就用命令式编程好了。
不过既然FP已经逐渐成为潮流，那换换思路也未尝不可。
从Scala语言本身看两者没有冲突</p>

<h3 id="section-2">一个例子来对比两种思路</h3>
<hr />

<p>例子：有一个Map的数组/列表，要将不同Map中相同key的value值相加，最后得到一个Map</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">Vector</span><span class="o">(</span><span class="n">Map</span><span class="o">(</span><span class="s">&quot;test&quot;</span> <span class="o">-&gt;</span> <span class="mi">1</span><span class="o">,</span> <span class="s">&quot;hello&quot;</span> <span class="o">-&gt;</span> <span class="mi">2</span><span class="o">,</span> <span class="s">&quot;wwww&quot;</span> <span class="o">-&gt;</span> <span class="mi">9</span><span class="o">),</span> <span class="n">Map</span><span class="o">(</span><span class="s">&quot;test&quot;</span> <span class="o">-&gt;</span> <span class="mi">3</span><span class="o">,</span> <span class="s">&quot;hello&quot;</span> <span class="o">-&gt;</span> <span class="mi">5</span><span class="o">,</span> <span class="s">&quot;http&quot;</span> <span class="o">-&gt;</span> <span class="mi">33</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>期望得到的结果</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">Map</span><span class="o">(</span><span class="n">test</span> <span class="o">-&gt;</span> <span class="mi">4</span><span class="o">,</span> <span class="n">hello</span> <span class="o">-&gt;</span> <span class="mi">7</span><span class="o">,</span> <span class="n">wwww</span> <span class="o">-&gt;</span> <span class="mi">9</span><span class="o">,</span> <span class="n">http</span> <span class="o">-&gt;</span> <span class="mi">33</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>命令式编程方式
思路：循环Vector中的每个Map，然后循环Map中的每个Key-Value，将相同的Key对应的Value加起来后存入到一个临时的Map，最后返回这个Map</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">def</span> <span class="nf">merge</span><span class="o">(</span><span class="nl">input:</span> <span class="n">Vector</span><span class="o">[</span><span class="n">Map</span><span class="o">[</span><span class="n">String</span><span class="o">,</span> <span class="n">Int</span><span class="o">]])</span> <span class="o">=</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">  <span class="n">var</span> <span class="n">mergeRes</span> <span class="o">=</span> <span class="n">input</span><span class="o">.</span><span class="na">head</span>
</span><span class="line">  <span class="n">val</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">input</span><span class="o">.</span><span class="na">tail</span>
</span><span class="line">
</span><span class="line">  <span class="k">for</span><span class="o">(</span><span class="n">itr</span> <span class="o">&lt;-</span> <span class="n">temp</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">  	<span class="k">for</span><span class="o">((</span><span class="n">word</span><span class="o">,</span> <span class="n">count</span><span class="o">)</span> <span class="o">&lt;-</span> <span class="n">itr</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">  		<span class="n">mergeRes</span> <span class="o">=</span> <span class="n">mergeRes</span> <span class="o">+</span> <span class="o">(</span><span class="n">word</span> <span class="o">-&gt;</span> <span class="o">(</span><span class="n">mergeRes</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">word</span><span class="o">).</span><span class="na">getOrElse</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="o">+</span> <span class="n">count</span><span class="o">))</span>
</span><span class="line">  	<span class="o">}</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line">  <span class="n">mergeRes</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>函数式编程方式
思路：对于Vector作折叠操作(reduceLeft)，因为每此计算都要以上一次计算作为输入。而计算中需要做的操作由使用者控制。同时对于每个Map都需要操作每个key-value并返回新的key-value所以用到map函数</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="java"><span class="line">  <span class="n">def</span> <span class="nf">mergeFP</span><span class="o">(</span><span class="nl">input:</span> <span class="n">Vector</span><span class="o">[</span><span class="n">Map</span><span class="o">[</span><span class="n">String</span><span class="o">,</span> <span class="n">Int</span><span class="o">]])</span> <span class="o">=</span> <span class="o">{</span>
</span><span class="line">    <span class="n">input</span><span class="o">.</span><span class="na">reduceLeft</span> <span class="o">{</span>
</span><span class="line">      <span class="o">(</span><span class="n">el</span><span class="o">,</span> <span class="n">acc</span><span class="o">)</span> <span class="o">=&gt;</span>
</span><span class="line">        <span class="n">el</span><span class="o">.</span><span class="na">map</span> <span class="o">{</span>
</span><span class="line">          <span class="k">case</span> <span class="o">(</span><span class="n">word</span><span class="o">,</span> <span class="n">count</span><span class="o">)</span> <span class="o">=&gt;</span>
</span><span class="line">            <span class="n">acc</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">word</span><span class="o">).</span><span class="na">map</span><span class="o">(</span><span class="n">accCount</span> <span class="o">=&gt;</span> <span class="o">(</span><span class="n">word</span> <span class="o">-&gt;</span> <span class="o">(</span><span class="n">accCount</span> <span class="o">+</span> <span class="n">count</span><span class="o">))).</span><span class="na">getOrElse</span><span class="o">(</span><span class="n">word</span> <span class="o">-&gt;</span> <span class="n">count</span><span class="o">)</span>
</span><span class="line">        <span class="o">}</span> <span class="o">++</span> <span class="o">(</span><span class="n">acc</span> <span class="o">--</span> <span class="n">el</span><span class="o">.</span><span class="na">keys</span><span class="o">)</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>从两者的对比俩看，如果不是熟悉FP的思路的化，似乎FP的代码更难看些。这也是为什么有人认为FP不利于代码沟通的原因吧。
但是从FP的实现看，中间没有任何可变变量（其实Scala对于reduceLeft用了中间可变变量，只是对于函数的使用者不需要了）</p>

<p><strong>注</strong> 改FP的例子载自Akka in Action，但是它的是foldLeft不是reduceLeft</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[系统集成模式：规范化数据流模式]]></title>
    <link href="http://duffqiu.github.io/blog/2015/02/02/integration-pattern-canonical-data-model/"/>
    <updated>2015-02-02T18:18:16+08:00</updated>
    <id>http://duffqiu.github.io/blog/2015/02/02/integration-pattern-canonical-data-model</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<hr />
<p><a href="http://duffqiu.github.io/blog/2015/02/02/integration-pattern-normalizer/">Normalizer模式</a>中，我们提到到如果多个系统一起集成将造成Endpoint成几何级数的增长。</p>

<h3 id="section-1">解决办法</h3>
<hr />

<p>使用Canonical Data Model(规范化数据模型)来解决这个问题
其特点如下：
- 每一个EndPoint一端和集成系统衔接，接收或发送特定系统的消息
- 每一个EndPoint的另外一段则是接收或发送Common的消息给另外的EndPoint</p>

<p>如图1：
<img src="http://duffqiu.github.io/images/cdm-1.png" alt="图一" /></p>

<ul>
  <li>所有的在EndPoint间流动的消息都是基于Common的接口，这样当引入一个新的系统的时候这需要实现一个EndPoint就可以了。</li>
</ul>

<p>如图二：
<img src="http://duffqiu.github.io/images/cdm-2.png" alt="图二" /></p>

<p>当我们需要考入如何实现Endpoint的时候，则可以考虑<a href="http://camel.apache.org/">Apache Camel Framework</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[安装附属包失败后修复virtualbox上的centos]]></title>
    <link href="http://duffqiu.github.io/blog/2015/02/02/fix-centos-virtualbox/"/>
    <updated>2015-02-02T16:45:25+08:00</updated>
    <id>http://duffqiu.github.io/blog/2015/02/02/fix-centos-virtualbox</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<hr />
<p>在virtualbox安装好centos7后，共享windows下的目录以及在host机器作拷贝张贴都不行，总是提示virtualbox的附属包没有安装，所以重新进行了安装。
但是重装时发现virtualboxguess module（vboxguest）没有安装成功，提示需要安装kernel-develp包，然后再重装这个附属包。
按照提示用<code>sudo yum install kernel-develop</code>, 然后再重装这个附属包
重新启动后竟然网卡无法使用了，同时也无法mount cdrom来卸载这个virtualbox的附属包。</p>

<p>网卡提示的错误信息是：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class=""><span class="line">11月 05 15:30:10 localhost.localdomain network[2920]: RTNETLINK answers: File exists
</span><span class="line">
</span><span class="line">11月 05 15:30:10 localhost.localdomain network[2920]: RTNETLINK answers: File exists
</span><span class="line">
</span><span class="line">11月 05 15:30:10 localhost.localdomain network[2920]: RTNETLINK answers: File exists
</span><span class="line">
</span><span class="line">11月 05 15:30:10 localhost.localdomain network[2920]: RTNETLINK answers: File exists
</span><span class="line">
</span><span class="line">11月 05 15:30:10 localhost.localdomain network[2920]: RTNETLINK answers: File exists
</span><span class="line">
</span><span class="line">11月 05 15:30:10 localhost.localdomain network[2920]: RTNETLINK answers: File exists
</span><span class="line">
</span><span class="line">11月 05 15:30:10 localhost.localdomain network[2920]: RTNETLINK answers: File exists
</span><span class="line">
</span><span class="line">11月 05 15:30:10 localhost.localdomain systemd[1]: network.service: control process exited, code=exited status=1
</span><span class="line">
</span><span class="line">11月 05 15:30:10 localhost.localdomain systemd[1]: Failed to start LSB: Bring up/down networking.
</span><span class="line">
</span><span class="line">11月 05 15:30:10 localhost.localdomain systemd[1]: Unit network.service entered failed state.</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Google了半天都没有办法，唯一能定位的地方是virtualbox修改了kernel的module造成</p>

<h3 id="section-1">解决办法</h3>
<hr />

<p>kernel的module一般都要通过原码的方式在本地编译后安装/加载，所以才需要kernel-develop的rpm包，难道问题在这里？
通过命令<code>rpm -qa|grep kernel</code>查看安装了的包，竟然发现有两个不同的版本的kernel-develop
那么可能的问题就出在了版本上
那就需要将不对的kernel-develop rpm包卸载掉并将对应的module删除后重新编印virtualbox的module
方法如下：</p>

<ul>
  <li>删除对应的编译需要的lib库： <code>sudo rm /lib/modules/3.10.0-123.el7.x86_64/misc/vbox*</code></li>
  <li>重建modules.dep和map文件: <code>sudo depmod -a</code></li>
  <li>重新加载module: <code>sudo modprobe module</code></li>
  <li>reboot</li>
  <li>这个时候应该cdroom和网卡都回来了</li>
  <li>重新安装virtualbox的附属包</li>
</ul>

<h3 id="section-2">总结</h3>

<p>对于需要影响到kernel的安装的时候， 最好先备份一次VM，避免因为kernel被破坏后难以恢复的问题
对于需要编译kernel module的时候，先查一下已经安装的kernel的开发包有没有多个名称相同但是版本不同的包，如果有则需要删除重复的 
从过程来看，修复是很快的，但是找到问题的根源是复杂的。google也不是万能的。</p>

<p>特定申明：该版权是<a href="&#109;&#097;&#105;&#108;&#116;&#111;:&#032;&#115;&#101;&#097;&#110;&#046;&#103;&#111;&#110;&#103;&#064;&#103;&#109;&#097;&#105;&#108;&#046;&#099;&#111;&#109;">Junjun</a>的 -:)</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[集成模式：标准化模式]]></title>
    <link href="http://duffqiu.github.io/blog/2015/02/02/integration-pattern-normalizer/"/>
    <updated>2015-02-02T13:14:35+08:00</updated>
    <id>http://duffqiu.github.io/blog/2015/02/02/integration-pattern-normalizer</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<hr />
<p>在系统集成中，可以通过不同的接口（EndPoint）适配多个外围系统，然后转换成标准的消息与内部系统结成。这种模式叫Normalizer。即标准化模式</p>

<h3 id="section-1">解决办法</h3>
<hr />

<p>UML图例：</p>

<center><img src="http://duffqiu.github.io/images/plantuml/c58dc192e46e5e6be91c5ccc50fd3990.png" /></center>

<p>对于Normalizer内部，通常从逻辑上可以这样分</p>

<center><img src="http://duffqiu.github.io/images/plantuml/b6169e035bb671e3f1c1ca2801966ce0.png" /></center>

<h3 id="section-2">特点说明</h3>

<ul>
  <li>对于集成简单的场景比较适用。多数用在连接多个类似的client端到一个系统</li>
  <li>如果对于Endpoint本身没有太复杂的逻辑则可以忽略Router并且合并translator的功能</li>
  <li>唯一的不足是如果集成的系统越来越多，则需要的Endpoint将成几何基数的增长</li>
  <li>可以通过Canonical Data Model(规范化数据模型)的方式来解决Normalizer模式的不足</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何开始用scala编程]]></title>
    <link href="http://duffqiu.github.io/blog/2015/01/13/howtostartprogrammingwithscala/"/>
    <updated>2015-01-13T17:19:11+08:00</updated>
    <id>http://duffqiu.github.io/blog/2015/01/13/howtostartprogrammingwithscala</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<p>在经历这么多年的OO的编程概念后，这一两年有兴起了FP(Functional Programming)的编程模式
作为多年的Java程序员如何能更好的接受FP并应用到开发中呢？主要有两个选择</p>

<ul>
  <li><a href="http://scala-lang.org/">Scala</a></li>
  <li><a href="http://clojure.org/">Clojure</a></li>
</ul>

<p>他俩最主要的区别是Clojure是比较纯粹的JVM下List语言的变种。没有OO的概念
Scala比较好的融合了OO和FP，比较合适Java平滑过渡到FP的编程范式。从Java8的新特性看
Java和Scala已经越来越接近。但是个人觉得Scala更好看写。或许是因为Java有过多的历史负担吧</p>

<p>如果是想纯粹学一下List，也可以看看<a href="https://www.haskell.org">Haskell</a></p>

<h3 id="coursera">Coursera的视频课程</h3>
<p>开始一门新的语言，大家总是期望有好的视频来讲解，最出名的是这个了，但是建议大家还是看完入门的书籍对scala有一定的了解后再来看这个
<a href="https://www.coursera.org/course/progfun">Functional Programming Principles in Scala</a></p>

<h3 id="section-1">入门书籍推荐</h3>
<p>现在关于Scala的书籍已经很多了，要达到熟悉的程度要看不下10本书。但是对于基础入门，以下这本我建议大家买个纸质版  <br />
<img src="http://duffqiu.github.io/images/kuaixuescala.jpg" alt="快学Scala" />    </p>

<p>这本有些旧了，某些章节可以不用看，具体如下：</p>

<ul>
  <li>第19章: 解析，这个太难，也不容易应用，可以忽略</li>
  <li>第20章: Actor，这个已经被Akka代替，不用再看，后面将写些如何应用Akka</li>
  <li>第22章: 定界延续，这个也太难，可以暂时忽略</li>
</ul>

<h3 id="section-2">看一个有趣的例子</h3>
<p>最近同学们在谈论lisp/FP的时候提到的一个例子:
有一个农场，鸡的数量是鸭的4倍，但是鸭比猪少9只，鸭和猪的数量是67只，求所有动物的脚加起来总共有多少只？
这个是个推论性的问题，在scala中用for{}的方式来解答(这里的for不是做循环，scala语言的用法叫for comprehension)</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">val</span> <span class="n">d</span> <span class="o">=</span> <span class="o">(</span><span class="mi">1</span> <span class="n">to</span> <span class="mi">67</span><span class="o">)</span> <span class="n">toStream</span>
</span><span class="line">
</span><span class="line"><span class="n">val</span> <span class="n">feet</span> <span class="o">=</span> <span class="k">for</span> <span class="o">{</span>
</span><span class="line">  <span class="n">d1</span> <span class="o">&lt;-</span> <span class="n">d</span>
</span><span class="line">  <span class="n">c1</span> <span class="o">=</span> <span class="n">d1</span> <span class="o">*</span> <span class="mi">4</span>
</span><span class="line">  <span class="n">p1</span> <span class="o">=</span> <span class="n">d1</span> <span class="o">+</span><span class="mi">9</span> <span class="k">if</span><span class="o">(</span><span class="n">d1</span> <span class="o">+</span> <span class="n">p1</span> <span class="o">==</span> <span class="mi">67</span><span class="o">)</span>
</span><span class="line"><span class="o">}</span> <span class="n">yield</span> <span class="o">{</span>
</span><span class="line">  <span class="o">(</span><span class="n">c1</span><span class="o">+</span><span class="n">d1</span><span class="o">)*</span><span class="mi">2</span> <span class="o">+</span> <span class="n">p1</span><span class="o">*</span><span class="mi">4</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line"><span class="n">println</span><span class="o">(</span><span class="n">feet</span><span class="o">.</span><span class="na">take</span><span class="o">(</span><span class="mi">1</span><span class="o">).</span><span class="na">force</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section-3">小提示</h4>
<p>Linux下查找文件中的某些字符串
<code>grep -rnw '&lt;path&gt;' -e "&lt;string value&gt;"</code></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在其它机器上继续编写blog或者是新建编辑环境处理已有的Octopress系统]]></title>
    <link href="http://duffqiu.github.io/blog/2015/01/13/continue-octopress-in-other-machine/"/>
    <updated>2015-01-13T12:14:22+08:00</updated>
    <id>http://duffqiu.github.io/blog/2015/01/13/continue-octopress-in-other-machine</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<hr />
<p>当你有多台机器或者是需要重新从Github上获取最后的blog，然后继续编辑，则需要重新手动配置Octopress
但是Octopress没有相关的教程说明如何做。</p>

<h3 id="section-1">解决办法</h3>
<hr />

<p>参考网上的多个资料以及个人摸索后，具体实践如下：</p>

<ul>
  <li>重新获取源文件</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">git clone &lt;your octopress url in Github&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div>
<ul>
  <li>切换到”source” branch</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">git checkout <span class="nb">source</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<ul>
  <li>重建_deploy目录</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">mkdir _deploy
</span><span class="line"><span class="nb">cd </span>_deploy
</span><span class="line">git init
</span><span class="line">git remote add origin &lt;your octopress url in Github&gt;
</span><span class="line">git pull origin master
</span><span class="line"><span class="nb">cd</span> ..
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>注意：如果在多个环境编辑后，每次切换环境需要做pull操作获得最后的更新。需要在octopress的根目录做一次<code>git pull origin source</code>，然后再到_deploy目录做一次<code>git pull origin master</code></p>

<p>如果在<code>rake deploy</code>的时候发现了<code>non-fast-forward</code>错误，则可以通过重建_deploy目录来解决。</p>

<ul>
  <li>
    <p>在新的机器上设置octopress需要的环境配置rbenv</p>
  </li>
  <li>
    <p>然后就可以在根目录下继续用rake命令了。</p>
  </li>
  <li>
    <p>注意：不用去重新运行<code>rake install</code>，不然会将你客户化的东西冲掉(最好先从Github上备份一个最新的才开始在新的机器安装环境)</p>
  </li>
</ul>

<h3 id="plugin">plugin问题</h3>

<p>如果遇到pygments_code的问题，则需要去看看你的系统安装的python的版本问题。如果python指向了python3.x则需要改成python2.x</p>

<h4 id="git">Git小提示</h4>
<p>这次重新搭建中途换了Theme，谁知道新的theme会覆盖和删除某些改动，所以对于theme的选择最好在建立Octopress之初
换了theme之后我又做了几次提交，为了还原到原来没有换theme的时候，需要将多次的commit去掉。
在SCM同学的支持下，做了还原，主要操作为</p>

<p>先checkout到最后需要的某个commit上
然后强制提交这个commit</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">git reset --hard &lt;commit id<span class="err">&#39;</span>s firt 5 characters&gt;
</span><span class="line">git push -f
</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[从实体模型到数据模型]]></title>
    <link href="http://duffqiu.github.io/blog/2014/04/06/cong-shi-ti-mo-xing-dao-shu-ju-mo-xing/"/>
    <updated>2014-04-06T11:41:20+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/04/06/cong-shi-ti-mo-xing-dao-shu-ju-mo-xing</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<hr />

<p>在系统设计过程中，我们总会用到Entity Model和Data Model，但是两者之间的关系是如何演变的呢？</p>

<h3 id="section-1">解决办法</h3>
<hr />

<ol>
  <li>首先建立一个最详尽的Entity Model，尽可能将所有具体的entity以及他们间的关系都列举出来</li>
  <li>将该详尽的Entity Model尽可能的浓缩抽象，变成7-10个框的图形</li>
  <li>根据浓缩后的Entity Model和业务操作的要求来抽取成Data Model</li>
</ol>

<p>因为设计公司机密问题，无法在这里给出具体的示例。后面有好的例子再补充</p>

<p>同时对于Data Model，有几点个人设计的体验：</p>

<ol>
  <li>不要过于局限于SQL的那几个范式。</li>
  <li>尽可能单表操作</li>
  <li>如果业务上不是要求严格的事物处理，尽可能不做事务操作，而是通过后续的数据处理清理垃圾数据。只是数据的使用过程中要注意保护（如先query后操作create/update）</li>
  <li>如果两个业务模块操作同一个表的不同数据，则可以考虑将表拆成两个对立的子表。</li>
  <li>当数据库性能达到一定瓶颈的时候，可以考虑使用NOSQL的方式做cache，如用<a href="http://redis.io">Redis</a></li>
</ol>

<h4 id="section-2">小插曲</h4>

<p>使用plantuml画entity model或者component 图都是出现自动排列时图形是乱的，很不好看。不过通过一个简单打设置就可以比较工整了。在plantuml文件的前面增加以下代码</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">left to right direction</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何定义一个好的REST接口3]]></title>
    <link href="http://duffqiu.github.io/blog/2014/04/06/ru-he-ding-yi-%5B%3F%5D-ge-hao-de-restjie-kou-3/"/>
    <updated>2014-04-06T10:49:35+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/04/06/ru-he-ding-yi-[?]-ge-hao-de-restjie-kou-3</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<hr />
<p>在定义REST接口的时候，如果采用resource的接口形式，则如何去定义接口的URL呢？</p>

<h3 id="section-1">解决办法</h3>
<hr />

<ul>
  <li>首先要解决的问题是在系统中如何去定位resource，然后才考虑如何设计URL。这样你必须有一个resource tree，如我在项目的设计样式：</li>
</ul>

<p><img src="http://duffqiu.github.io/images/Rest_Resource_Tree.png" alt="resource tree" title="resouce tree" /></p>

<p>这里首先确定要使用的资源入口是User，然后通过userid确定唯一的资源，然后再获取该资源下的子资源Calendar和Meeting</p>

<ul>
  <li>有了这个resource tree，那么URL就好定义了，如获取用户id为300222的所有Calendar的URL为： <code>http://xxxx.com/&lt;webcontext&gt;/p/&lt;component_name&gt;/v1/user/300222/calendar</code></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[创建基于maven的java和scala工程]]></title>
    <link href="http://duffqiu.github.io/blog/2014/04/06/chuang-jian-ji-yu-mavende-javahe-scalagong-cheng/"/>
    <updated>2014-04-06T09:20:56+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/04/06/chuang-jian-ji-yu-mavende-javahe-scalagong-cheng</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<hr />
<p>最近在看Scala和ScalaTest，但是要搭建一个同时运行Java和Scala的项目工程，还是遇到了些问题。因为我习惯了搭建出来的工程是Maven工程，同时即要能在Eclipse上运行，也能用Maven命令的方式运行以便后续用Jenkins。经过一段摸索终于试验出来。但是很奇怪，搜索出来的结果没有一个直接好使的。</p>

<h3 id="section-1">解决办法</h3>
<hr />

<h4 id="eclipse">Eclipse配置</h4>

<ul>
  <li>安装Scala的IDE，参见<a href="http://scala-ide.org">Scala-IDE官网</a>，注意选择Scala孵化器中的ScalaTest插件</li>
  <li>安装Maven在Eclipse上的插件，通过<code>Preference -&gt;Maven-&gt;Discovery</code>安装m2e的对应插件。在后续的POM文件中使用到的插件最好都安装对应的m2e插件。(包括：build-helper，pmd, checkstyle, findbugs, compiler…)</li>
  <li>
    <p>创建Maven工程中，添加如下插件</p>

    <ul>
      <li>build-helper插件，添加scala的source和test source。因为<code>&lt;sourceDirectory&gt;</code>只能指定一个目录，所以需要这个插件来帮助添加scala的文件目录</li>
    </ul>
  </li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
</pre></td><td class="code"><pre><code class=""><span class="line">		&lt;plugin&gt;
</span><span class="line">			&lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
</span><span class="line">			&lt;artifactId&gt;build-helper-maven-plugin&lt;/artifactId&gt;
</span><span class="line">			&lt;version&gt;1.8&lt;/version&gt;
</span><span class="line">			&lt;executions&gt;
</span><span class="line">				&lt;execution&gt;
</span><span class="line">					&lt;id&gt;add-source&lt;/id&gt;
</span><span class="line">					&lt;phase&gt;generate-sources&lt;/phase&gt;
</span><span class="line">					&lt;goals&gt;
</span><span class="line">						&lt;goal&gt;add-source&lt;/goal&gt;
</span><span class="line">					&lt;/goals&gt;
</span><span class="line">					&lt;configuration&gt;
</span><span class="line">						&lt;sources&gt;
</span><span class="line">							&lt;source&gt;src/main/scala&lt;/source&gt;
</span><span class="line">						&lt;/sources&gt;
</span><span class="line">					&lt;/configuration&gt;
</span><span class="line">				&lt;/execution&gt;
</span><span class="line">				&lt;execution&gt;
</span><span class="line">					&lt;id&gt;add-test-source&lt;/id&gt;
</span><span class="line">					&lt;phase&gt;generate-sources&lt;/phase&gt;
</span><span class="line">					&lt;goals&gt;
</span><span class="line">						&lt;goal&gt;add-test-source&lt;/goal&gt;
</span><span class="line">					&lt;/goals&gt;
</span><span class="line">					&lt;configuration&gt;
</span><span class="line">						&lt;sources&gt;
</span><span class="line">							&lt;source&gt;src/test/scala&lt;/source&gt;
</span><span class="line">						&lt;/sources&gt;
</span><span class="line">					&lt;/configuration&gt;
</span><span class="line">				&lt;/execution&gt;
</span><span class="line">			&lt;/executions&gt;
</span><span class="line">		&lt;/plugin&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>Scala插件，协助编译scala，同时指定scala版本</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class=""><span class="line">		&lt;plugin&gt;
</span><span class="line">			&lt;groupId&gt;net.alchim31.maven&lt;/groupId&gt;
</span><span class="line">			&lt;artifactId&gt;scala-maven-plugin&lt;/artifactId&gt;
</span><span class="line">			&lt;version&gt;3.1.6&lt;/version&gt;
</span><span class="line">			&lt;executions&gt;
</span><span class="line">				&lt;execution&gt;
</span><span class="line">					&lt;goals&gt;
</span><span class="line">						&lt;goal&gt;compile&lt;/goal&gt;
</span><span class="line">						&lt;goal&gt;testCompile&lt;/goal&gt;
</span><span class="line">					&lt;/goals&gt;
</span><span class="line">				&lt;/execution&gt;
</span><span class="line">			&lt;/executions&gt;
</span><span class="line">			&lt;configuration&gt;
</span><span class="line">				&lt;scalaVersion&gt;2.10.3&lt;/scalaVersion&gt;
</span><span class="line">			&lt;/configuration&gt;
</span><span class="line">		&lt;/plugin&gt;</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>ScalaTest插件</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class=""><span class="line">		&lt;plugin&gt;
</span><span class="line">			&lt;groupId&gt;org.scalatest&lt;/groupId&gt;
</span><span class="line">			&lt;artifactId&gt;scalatest-maven-plugin&lt;/artifactId&gt;
</span><span class="line">			&lt;version&gt;1.0-RC2&lt;/version&gt;
</span><span class="line">			&lt;configuration&gt;
</span><span class="line">				&lt;reportsDirectory&gt;${project.build.directory}/surefire-reports&lt;/reportsDirectory&gt;
</span><span class="line">				&lt;junitxml&gt;.&lt;/junitxml&gt;
</span><span class="line">				&lt;filereports&gt;WDF TestSuite.txt&lt;/filereports&gt;
</span><span class="line">			&lt;/configuration&gt;
</span><span class="line">			&lt;executions&gt;
</span><span class="line">				&lt;execution&gt;
</span><span class="line">					&lt;id&gt;test&lt;/id&gt;
</span><span class="line">					&lt;goals&gt;
</span><span class="line">						&lt;goal&gt;test&lt;/goal&gt;
</span><span class="line">					&lt;/goals&gt;
</span><span class="line">				&lt;/execution&gt;
</span><span class="line">			&lt;/executions&gt;
</span><span class="line">		&lt;/plugin&gt;</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>指定Junit插件，如果需要同时使用JUnit测试java代码。注意，新版本的插件已经可以支持多线程并发，大大提高测试的速度。强烈建议使用最新的版本</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">		&lt;plugin&gt;
</span><span class="line">			&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
</span><span class="line">			&lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;
</span><span class="line">			&lt;version&gt;2.17&lt;/version&gt;
</span><span class="line">			&lt;configuration&gt;
</span><span class="line">				&lt;parallel&gt;methods&lt;/parallel&gt;
</span><span class="line">				&lt;threadCount&gt;10&lt;/threadCount&gt;
</span><span class="line">			&lt;/configuration&gt;
</span><span class="line">		&lt;/plugin&gt;</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>安装m2e的scala maven plugin的connector插件，不然在eclipse上直接读取pom文件会解释出错。 <a href="http://alchim31.free.fr/m2e-scala/update-site/">update地址</a></li>
</ul>

<h3 id="section-2">小插曲</h3>
<p>不知道什么原因，ScalaTest的官网被屏蔽了。一个纯开源的技术网站有这个必要性么？还是躺枪了？</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何定义一个好的REST接口2]]></title>
    <link href="http://duffqiu.github.io/blog/2014/03/13/ru-he-ding-yi-%5B%3F%5D-ge-hao-de-restjie-kou-2/"/>
    <updated>2014-03-13T22:06:13+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/03/13/ru-he-ding-yi-[?]-ge-hao-de-restjie-kou-2</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<hr />
<p>经过一段实践的实践，特别是需求总在变化的项目（项目开始阶段总是比较痛苦的）中，如何去管理REST接口的描述文件变得非常重要。即要美观，又要开发人员随时能看，能更新。之前写过第一篇的这个<a href="http://duffqiu.github.io/blog/2014/03/03/ru-he-ding-yi-%5B%3F%5D-ge-hao-de-restjie-kou/">“如何定义一个好的REST接口”</a>，但是如果写到word文档中，痛苦是难以仍受的。特别是需要比较大篇幅的改动。同时开发人员也很难知道具体那些被改了，就会陷入迷茫中。</p>

<h3 id="section-1">解决办法</h3>
<hr />

<h4 id="section-2">前提条件</h4>
<ol>
  <li>前提条件1，将设计文档放在离开发最近的地方。那么当然是代码工程的地方是最进的。</li>
  <li>前提条件2，有利于跟踪变化。对于开发人员而言，当然是像代码那样跟踪最顺手了。（目前我用的是Git）</li>
  <li>尽可能足够简单</li>
</ol>

<h4 id="section-3">解决方式</h4>
<ol>
  <li>参照<a href="http://json-schema.org">JSON SCHEMA</a>的方式</li>
  <li>简化JSON SCHEMA，但依然是用JSON的方式字描述接口</li>
  <li>安装Eclipse的JSON editor plugin，可以在outline上很清晰的看到JSON的结构。当然如果是windows下也可以用notepad++的jason plugin看。不过如何是代码就在eclispe上，最好还是用eclipse的plugin</li>
  <li>
    <p>定义设计规则：</p>

    <ul>
      <li>接口文件的目录结构： <code>&lt;ComponentName&gt;\&lt;ResourceName&gt;\Method_&lt;create/delete/query/update&gt;.json</code>. ComponentName：组件或模块名称，ResourceName：资源名称，最后是方法的接口文件名。举个例子：有个组件Calendar，它下面有个资源叫Event，那么操作这个资源的更新的接口文件为Method_update.json，它放在了Calendar\Event\目录下。</li>
      <li>接口文件的层次结构。因为是基于HTTP的方式，则整个REST接口的层次结构为： </li>
    </ul>
  </li>
</ol>

<p><img src="http://duffqiu.github.io/images/rest_structure1.png" alt="rest structure1" title="REST API First Level Structure&quot;" /></p>

<p>其中，Revision Information用来描述文档的要点变化情况  </p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class=""><span class="line">{
</span><span class="line">   "Revision Information" : [
</span><span class="line">   {
</span><span class="line">      "Revision": "v0.1",
</span><span class="line">      "Section":"Whole document",
</span><span class="line">      "Change":"initialized"
</span><span class="line">   },
</span><span class="line">   {
</span><span class="line">      ...
</span><span class="line">   }
</span><span class="line">   ]
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>description用来描述接口的说明</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">{
</span><span class="line">   "description":{
</span><span class="line">    "method_description":"Create xxxxx",
</span><span class="line">    "method_direction":"xxx-&gt;yyy"
</span><span class="line">   }
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>request描述接口的http的query parameter和request body</p>

<p>response描述接口的http的response body</p>

<p>error_list描述接口的可能的错误信息</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class=""><span class="line">{
</span><span class="line">   "error_list":[
</span><span class="line">   {
</span><span class="line">      "errorCode":"91101",
</span><span class="line">      "errorMsg":"xxxx"
</span><span class="line">    },
</span><span class="line">    {
</span><span class="line">      "errorCode":"91102",
</span><span class="line">      "errorMsg":"yyyyy"
</span><span class="line">   }]
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>request的层次结构</li>
</ul>

<p><img src="http://duffqiu.github.io/images/rest_structure2.png" alt="rest structure2" title="REST API Request Structure" /></p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class=""><span class="line">{
</span><span class="line">   "request":{
</span><span class="line">  	"http_method" : "GET",
</span><span class="line">    "http_request_url":"https://www.xxxx.com/&lt;warContext&gt;/p/&lt;component&gt;/v1/&lt;resouce&gt;/{&lt;resourceId&gt;}",
</span><span class="line">    "path_parameter":{
</span><span class="line">      "&lt;resourceId&gt;":"resourceId"
</span><span class="line">    },
</span><span class="line">    "required_query_parameter":{
</span><span class="line">      "&lt;parameter1&gt;" : "xxx"
</span><span class="line">    },
</span><span class="line">    "optional_query_parameter":{
</span><span class="line">      "&lt;parameter2&gt;":"yyy"
</span><span class="line">    },
</span><span class="line">    "request_body":{
</span><span class="line">    ...
</span><span class="line">    }
</span><span class="line">   }
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>http_method指明http调用的方法：GET/DELETE/PUT/POST<br />
   http_request_url指明http调用的URL的格式<br />
   path_parameter指明唯一索引到某个特定资源的标识<br />
   required_query_parameter必须传入的参数
   optional_query_parameter可选传入的参数
   request_body传入的JSON复杂对象</p>

<ul>
  <li>response的层次结构</li>
</ul>

<p>就是返回一个JSON的对象。这里有个BEST PRACTISE的建议，尽量返回能索引到特定资源的标识信息无论输入是否有该信息</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class=""><span class="line">{
</span><span class="line">   "response":{
</span><span class="line">    "&lt;parameter1&gt;":{
</span><span class="line">      "string":"&lt;parameter1 description&gt;",
</span><span class="line">      "required":"y"
</span><span class="line">    },
</span><span class="line">    "&lt;parameter2&gt;":{
</span><span class="line">      "integer":"&lt;parameter2 description&gt;",
</span><span class="line">      "required":"n"
</span><span class="line">    }        
</span><span class="line">   }
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>对于request body和response body中JSON对象的定义，不使用JSON Schema那种繁复的写法，直接参照google的方式，将parameter的类型定义为key，描述为value，然后再用”required”标识是否是必须的</p>

<h4 id="section-4">完整的例子模版</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
</pre></td><td class="code"><pre><code class=""><span class="line">{  
</span><span class="line">  "Revision Information" : [
</span><span class="line">    {
</span><span class="line">      "Revision": "v0.1",
</span><span class="line">      "Section":"Whole document",
</span><span class="line">      "Change":"initialized"
</span><span class="line">    },
</span><span class="line">    {
</span><span class="line">      "Revision": "v0.2",
</span><span class="line">      "Section":"xx",
</span><span class="line">      "Change":"yyy"
</span><span class="line">    }
</span><span class="line">  ],
</span><span class="line">  "description":{
</span><span class="line">    "method_description":"query xxxxx",
</span><span class="line">    "method_direction":"xx-&gt;yyy"
</span><span class="line">  },
</span><span class="line">  "request":{
</span><span class="line">  	"http_method" : "GET",
</span><span class="line">    "http_request_url":"https://www.xxxx.com/&lt;warContext&gt;/p/&lt;component&gt;/v1/&lt;resouce&gt;/{&lt;resourceId&gt;}",
</span><span class="line">    "path_parameter":{
</span><span class="line">      "&lt;resourceId&gt;":"resourceId"
</span><span class="line">    },
</span><span class="line">    "required_query_parameter":{
</span><span class="line">      "&lt;parameter1&gt;" : "xxx"
</span><span class="line">    },
</span><span class="line">    "optional_query_parameter":{
</span><span class="line">      "&lt;parameter2&gt;":"yyy"
</span><span class="line">    },
</span><span class="line">    "request_body":{
</span><span class="line">    }
</span><span class="line">  },
</span><span class="line">  "response":{
</span><span class="line">    "&lt;parameter1&gt;":{
</span><span class="line">      "string":"&lt;parameter1 description&gt;",
</span><span class="line">      "required":"y"
</span><span class="line">    },
</span><span class="line">    "&lt;parameter2&gt;":{
</span><span class="line">      "integer":"&lt;parameter2 description&gt;",
</span><span class="line">      "required":"n"
</span><span class="line">    }        
</span><span class="line">  },
</span><span class="line">  "error_list":[
</span><span class="line">    {
</span><span class="line">      "errorCode":"xx1",
</span><span class="line">      "errorMsg":"yyyy"
</span><span class="line">    },
</span><span class="line">    {
</span><span class="line">      "errorCode":"xx2",
</span><span class="line">      "errorMsg":"yyyy"
</span><span class="line">    }
</span><span class="line">  ]
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何定义一个好的REST接口]]></title>
    <link href="http://duffqiu.github.io/blog/2014/03/03/ru-he-ding-yi-%5B%3F%5D-ge-hao-de-restjie-kou/"/>
    <updated>2014-03-03T21:25:32+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/03/03/ru-he-ding-yi-[?]-ge-hao-de-restjie-kou</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<hr />
<p>现在<a href="http://www.json.org">基于JSON的REST接口</a>使用的是越来越多了，但是在自己去定义JSON的REST API的时候，我们确难免遇到不少疑惑，以下我们来谈谈这些疑惑 </p>

<h3 id="rcp-based-or-rest-based">RCP-BASED or REST-BASED</h3>
<hr />

<p>在接口定义上，我们以往一般都是去定义请求什么，然后响应是什么，这就是典型的RPC(Remote Procedure Call)接口的定义方式。一般可以使用IDL（Interface Description Language，IDL）的方式来描述，如典型的WSDL等。RPC我的理解是，更多的是描述响应端提供什么样的行为给请求端调用。响应端会提供一个服务接入端点(End Point)，依据请求来返回响应。</p>

<p>对于REST-BASED的接口定义，通常针对的是响应端提供什么样的资源给客户端使用。这里有一个很重要的特点是，所有的行为都是围绕“资源”来进行的。主要有：</p>

<ul>
  <li>GET  获取资源(可以是一个或多个)</li>
  <li>PUT  更新资源，PUT方法有个很重要的特性就是多次调用，结果是一直的。</li>
  <li>POST 创建资源，这个方法不是幂等</li>
  <li>DELETE 删除资源 </li>
</ul>

<p>对于每个操作的返回都是基于同一个资源描述，只是不同的方法，资料描述里的某些内容被省略了。</p>

<p>其实对于使用JSON在RPC-Based上还是REST-Based都可以。接口定义成RPC-Based上还是REST-Based没有绝对的好坏，而是根据实际的使用场景。简单来说就是如果可以能被描述成“资源”(如：用户账户、购物车等等)，则用REST-Based更合适，如果是需要执行某些动作(如：发送邮件等)则RPC-Based更合适。</p>

<h3 id="rest-based-best-practice">REST-BASED BEST PRACTICE</h3>

<p>如果使用REST-Based，建议可以参考<a href="https://developers.google.com/google-apps/calendar/v3/reference/">Google Canlendar的API定义</a>。主要的要点如下：</p>

<ol>
  <li>确定什么是资源(如calendar, event…)以及资源的表述</li>
</ol>

<p>例如：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class=""><span class="line">{
</span><span class="line">  "id": string,
</span><span class="line">  "summary": string,
</span><span class="line">  "description": string,
</span><span class="line">  "location": string,
</span><span class="line">  "timeZone": string,
</span><span class="line">  "summaryOverride": string,
</span><span class="line">  "colorId": string,
</span><span class="line">  "backgroundColor": string,
</span><span class="line">  "foregroundColor": string,
</span><span class="line">  "hidden": boolean,
</span><span class="line">  "selected": boolean,
</span><span class="line">  "accessRole": string,
</span><span class="line">  "defaultReminders": [
</span><span class="line">    {
</span><span class="line">      "method": string,
</span><span class="line">      "minutes": integer
</span><span class="line">    }
</span><span class="line">  ],
</span><span class="line">  "primary": boolean
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<ol>
  <li>
    <p>列举每个资源能提供的操作简要</p>

    <table>
      <thead>
        <tr>
          <th>Method</th>
          <th>HTTP request</th>
          <th>Description</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>delete</td>
          <td>DELETE  /calendars/calendarId/acl/ruleId</td>
          <td>Deletes an access control rule.</td>
        </tr>
        <tr>
          <td>get</td>
          <td>GET  /calendars/calendarId/acl/ruleId</td>
          <td>Returns an access control rule.</td>
        </tr>
        <tr>
          <td>insert</td>
          <td>POST  /calendars/calendarId/acl</td>
          <td>Creates an access control rule.</td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>
    <p>详细描述每个资源操作</p>

    <ul>
      <li>http request形式，如</li>
    </ul>

    <p><code>
POST https://www.googleapis.com/calendar/v3/calendars/{calendarId}/clear
</code></p>

    <ul>
      <li>
        <p>http request parameter</p>

        <p>这里需要注意的是什么放在Path上，什么放在query parameter上。一般而言，一个资源的子资源放在path上，定位资源的条件放在query paramenter上</p>

        <table>
          <thead>
            <tr>
              <th>Path parameter</th>
              <th>Value</th>
              <th>Description</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>calendarId</td>
              <td>string</td>
              <td>Calendar identifier</td>
            </tr>
            <tr>
              <td>…</td>
              <td> </td>
              <td> </td>
            </tr>
          </tbody>
        </table>

        <table>
          <thead>
            <tr>
              <th>Query parameter</th>
              <th>Value</th>
              <th>Description</th>
              <th>Required?</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>…</td>
              <td> </td>
              <td> </td>
              <td> </td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <p>Authorization<br />
 定义是否需要授权</p>
      </li>
      <li>
        <p>Request Body (通常只用在Post操作上)，定义方式如下：</p>

        <table>
          <thead>
            <tr>
              <th>Property name</th>
              <th>Value</th>
              <th>Description</th>
              <th>Notes</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>email</td>
              <td>string</td>
              <td>user’s email address</td>
              <td> </td>
            </tr>
            <tr>
              <td>…</td>
              <td> </td>
              <td> </td>
              <td> </td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <p>http response representations(针对RPC的接口，如果是REST原则是公用一个resource的描述，只是不同的操作某些参数可以被忽略)，如</p>

        <p><code>
{  
"id": string,  
"status": string,  
"htmlLink": string,   
"created": datetime   
}  
</code></p>
      </li>
      <li>
        <p>http reponse parameters(对于资源描述中使用到的参数的解释)</p>

        <table>
          <thead>
            <tr>
              <th>Property name</th>
              <th>Value</th>
              <th>Description</th>
              <th>Notes</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>home address</td>
              <td>string</td>
              <td>user’s home address</td>
              <td> </td>
            </tr>
            <tr>
              <td>…</td>
              <td> </td>
              <td> </td>
              <td> </td>
            </tr>
          </tbody>
        </table>
      </li>
    </ul>
  </li>
</ol>

<h3 id="json-style-guideline">JSON Style Guideline</h3>

<p>如何编写JSON，可以参见<a href="https://google-styleguide.googlecode.com/svn/trunk/jsoncstyleguide.xml">Google JSON STYLE</a></p>

<p>主要是参考保留的定义属性名</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">object</span> <span class="o">{</span>
</span><span class="line">  <span class="n">string</span> <span class="n">apiVersion</span><span class="o">?;</span>
</span><span class="line">  <span class="n">string</span> <span class="n">context</span><span class="o">?;</span>
</span><span class="line">  <span class="n">string</span> <span class="n">id</span><span class="o">?;</span>
</span><span class="line">  <span class="n">string</span> <span class="n">method</span><span class="o">?;</span>
</span><span class="line">  <span class="n">object</span> <span class="o">{</span>
</span><span class="line">    <span class="n">string</span> <span class="n">id</span><span class="o">?</span>
</span><span class="line">  <span class="o">}*</span> <span class="n">params</span><span class="o">?;</span>
</span><span class="line">  <span class="n">object</span> <span class="o">{</span>
</span><span class="line">    <span class="n">string</span> <span class="n">kind</span><span class="o">?;</span>
</span><span class="line">    <span class="n">string</span> <span class="n">fields</span><span class="o">?;</span>
</span><span class="line">    <span class="n">string</span> <span class="n">etag</span><span class="o">?;</span>
</span><span class="line">    <span class="n">string</span> <span class="n">id</span><span class="o">?;</span>
</span><span class="line">    <span class="n">string</span> <span class="n">lang</span><span class="o">?;</span>
</span><span class="line">    <span class="n">string</span> <span class="n">updated</span><span class="o">?;</span> <span class="err">#</span> <span class="n">date</span> <span class="n">formatted</span> <span class="n">RFC</span> <span class="mi">3339</span>
</span><span class="line">    <span class="kt">boolean</span> <span class="n">deleted</span><span class="o">?;</span>
</span><span class="line">    <span class="n">integer</span> <span class="n">currentItemCount</span><span class="o">?;</span>
</span><span class="line">    <span class="n">integer</span> <span class="n">itemsPerPage</span><span class="o">?;</span>
</span><span class="line">    <span class="n">integer</span> <span class="n">startIndex</span><span class="o">?;</span>
</span><span class="line">    <span class="n">integer</span> <span class="n">totalItems</span><span class="o">?;</span>
</span><span class="line">    <span class="n">integer</span> <span class="n">pageIndex</span><span class="o">?;</span>
</span><span class="line">    <span class="n">integer</span> <span class="n">totalPages</span><span class="o">?;</span>
</span><span class="line">    <span class="n">string</span> <span class="n">pageLinkTemplate</span> <span class="o">/^</span><span class="n">https</span><span class="o">?:/</span> <span class="o">?;</span>
</span><span class="line">    <span class="n">object</span> <span class="o">{}*</span> <span class="n">next</span><span class="o">?;</span>
</span><span class="line">    <span class="n">string</span> <span class="n">nextLink</span><span class="o">?;</span>
</span><span class="line">    <span class="n">object</span> <span class="o">{}*</span> <span class="n">previous</span><span class="o">?;</span>
</span><span class="line">    <span class="n">string</span> <span class="n">previousLink</span><span class="o">?;</span>
</span><span class="line">    <span class="n">object</span> <span class="o">{}*</span> <span class="n">self</span><span class="o">?;</span>
</span><span class="line">    <span class="n">string</span> <span class="n">selfLink</span><span class="o">?;</span>
</span><span class="line">    <span class="n">object</span> <span class="o">{}*</span> <span class="n">edit</span><span class="o">?;</span>
</span><span class="line">    <span class="n">string</span> <span class="n">editLink</span><span class="o">?;</span>
</span><span class="line">    <span class="n">array</span> <span class="o">[</span>
</span><span class="line">      <span class="n">object</span> <span class="o">{}*;</span>
</span><span class="line">    <span class="o">]</span> <span class="n">items</span><span class="o">?;</span>
</span><span class="line">  <span class="o">}*</span> <span class="n">data</span><span class="o">?;</span>
</span><span class="line">  <span class="n">object</span> <span class="o">{</span>
</span><span class="line">    <span class="n">integer</span> <span class="n">code</span><span class="o">?;</span>
</span><span class="line">    <span class="n">string</span> <span class="n">message</span><span class="o">?;</span>
</span><span class="line">    <span class="n">array</span> <span class="o">[</span>
</span><span class="line">      <span class="n">object</span> <span class="o">{</span>
</span><span class="line">        <span class="n">string</span> <span class="n">domain</span><span class="o">?;</span>
</span><span class="line">        <span class="n">string</span> <span class="n">reason</span><span class="o">?;</span>
</span><span class="line">        <span class="n">string</span> <span class="n">message</span><span class="o">?;</span>
</span><span class="line">        <span class="n">string</span> <span class="n">location</span><span class="o">?;</span>
</span><span class="line">        <span class="n">string</span> <span class="n">locationType</span><span class="o">?;</span>
</span><span class="line">        <span class="n">string</span> <span class="n">extendedHelp</span><span class="o">?;</span>
</span><span class="line">        <span class="n">string</span> <span class="n">sendReport</span><span class="o">?;</span>
</span><span class="line">      <span class="o">}*;</span>
</span><span class="line">    <span class="o">]</span> <span class="n">errors</span><span class="o">?;</span>
</span><span class="line">  <span class="o">}*</span> <span class="n">error</span><span class="o">?;</span>
</span><span class="line"><span class="o">}*;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-1">接口定义模版参考</h3>

<p><a href="">REST JSON API模版</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式：动态代理]]></title>
    <link href="http://duffqiu.github.io/blog/2014/03/01/she-ji-mo-shi-%3Adong-tai-dai-li/"/>
    <updated>2014-03-01T23:31:47+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/03/01/she-ji-mo-shi-:dong-tai-dai-li</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<hr />
<p>之前我们讲了如何使用代理模式，但是代理必须实现被代理对象共同的接口，如果需要用到代理模式的类表多，则同一个扩展功能就必须实现很多个相似的代理类。从而造成代码的重复。
有没有更简单的方法生成代理，而对于一个扩展只需要一个代理类呢 ？</p>

<h3 id="section-1">解决办法</h3>
<hr />

<h4 id="jdkjavalangreflect">JDK的java.lang.reflect</h4>
<p>JDK的反射机制中动态代理类和接口就可以帮助我们简化代理类的生成。
具体代码建议模版为：</p>

<ul>
  <li>生成一个实现<code>InvocationHandler</code>接口的类，建议命名为xxxDynamicProxy</li>
  <li>设计一个私有变量来存储被代理的对象，并提供一个带参数的构造方法，该参数为被代理的对象。为了通用，使用Object或者范型的形式。我使用范型的方式：</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">xxxDynamicProxy</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="kd">implements</span> <span class="n">InvocationHandler</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="n">T</span> <span class="n">delegate</span><span class="o">;</span>
</span><span class="line">    <span class="o">....</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="nf">xxxDynamicProxy</span><span class="o">(</span><span class="n">T</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">	<span class="k">this</span><span class="o">.</span><span class="na">delegate</span> <span class="o">=</span> <span class="n">t</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="o">...</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>设计一个静态工厂方法函数，帮助生成代理对象</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="nd">@SuppressWarnings</span><span class="o">(</span><span class="s">&quot;unchecked&quot;</span><span class="o">)</span>
</span><span class="line"><span class="kd">public</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">T</span> <span class="n">createProxyInstance</span><span class="o">(</span><span class="n">T</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line"><span class="k">return</span> <span class="o">(</span><span class="n">T</span><span class="o">)</span> <span class="n">Proxy</span><span class="o">.</span><span class="na">newProxyInstance</span><span class="o">(</span><span class="n">t</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getClassLoader</span><span class="o">(),</span> <span class="n">t</span>
</span><span class="line">	        <span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getInterfaces</span><span class="o">(),</span> <span class="k">new</span> <span class="n">LoggingDynamicProxy</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;(</span><span class="n">t</span><span class="o">));</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>使用方式就是先生成被代理对象，然后用动态代理类的工厂方法来生成代理对象，接着就可以像被代理对象那样使用了。</li>
</ul>

<p>注意1：JDK这个动态代理的方式是有约束性的，被代理的对象一定要实现某个接口，不然会有运行时错误。</p>

<p>注意2：代理对象也可以被另外一个代理对象所代理，从而实现功能叠加的效果。也就是装饰模式的叠加效果。从这点上看，JDK这个动态代理的方式其实也是装饰模式。</p>

<h4 id="google-guava">Google Guava的动态代理</h4>
<p>原理上Google Guava的动态代理也是使用JDK的动态代理，这是做了封装，更加简便。另外一点是能够很好的检查需要代理的对象必须拥有接口。使用<code>Class类的isInterface()</code>来做检查。从我自己的实现的例子看，当代理作为下一个代理的输入时，这个检查将实效。</p>

<p>Google Guava的动态代理的使用方式</p>

<ul>
  <li>类似上面的步骤生成代理类，但是不用生成静态的工厂方法了。</li>
  <li>
    <p>使用方式为调用<code>Reflection.newProxy(...)</code>来生成代理类。</p>
  </li>
  <li>如果需要比对用相同的handler生成的prxoy是相等的(并非同一个对象)，则可以通过继承<code>AbstractInvocationHandler</code>来简化编码。因为这个抽象类已经实现了相等的相关操作。</li>
</ul>

<h4 id="cglib">CGLIB</h4>
<p>CGLIB对于dynamic proxy的支持个人理解已经太老了，虽然可以对没有实现接口的类支持代理，但是对于final类还是不行。</p>

<h3 id="section-2">总结</h3>

<p>使用Guava来开发代理吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式：代理模式]]></title>
    <link href="http://duffqiu.github.io/blog/2014/02/23/she-ji-mo-shi-%3Adai-li-mo-shi/"/>
    <updated>2014-02-23T17:05:45+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/02/23/she-ji-mo-shi-:dai-li-mo-shi</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<hr />

<p>在编程中我们往往会使用到大对象，而对这些大对象的访问总是比较耗时，但是大对象又不是每次都需要使用到。例如从数据库读取出来的对象，或者从远程服务读取的对象。</p>

<h3 id="section-1">解决办法</h3>
<hr />
<p>使用一个代理对象，实现原有对象的接口，并由这个代理对象来负责大对象的创建、缓存等优化操作。
最常用的例子是数据的储存，我们希望将一个大对象很快的存到数据库中，但是又不希望等待以及做很多异常的处理，以为对于使用端而言并不关系存储方式和异常处理。所以可以通过Proxy对象来隔离这些特殊的处理，并通过多线程等异步手段提高性能。</p>

<h3 id="uml">UML图</h3>

<center><img src="http://duffqiu.github.io/images/plantuml/98d572a73413b32c676af3704f3fa8e2.png" /></center>

<h3 id="proxydecorate">Proxy与Decorate的区别</h3>

<p>－ Decorate的目的是给已有的类增加业务功能，而Proxy就像名义一样目的是为了某种而外目的给已有的类增加非业务功能</p>

<ul>
  <li>
    <p>从UML图可以看出，Proxy是图钉针对某个某个固定对象的，而Decorate是针对接口的，并且Proxy是负责对应的对象的生命周期的，让Decorate只是使用对应的对象。同时Proxy和对应的对象的数量关系并不确定，可以是1-*，也可以是1-1。而Decorate只能是1-1</p>
  </li>
  <li>
    <p>Decorate可以通过递归的方式叠加使用，而Proxy不作此用途</p>
  </li>
  <li>
    <p>当然既然类似，就可能可以混用。没有必要教条的说一定要明确Proxy或Decorate。</p>
  </li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Guice入门2]]></title>
    <link href="http://duffqiu.github.io/blog/2014/02/23/google-guiceru-men-2/"/>
    <updated>2014-02-23T14:26:45+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/02/23/google-guiceru-men-2</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<hr />
<p>在使用Guice做依赖注入的时候，很可能会发生在一个依赖模块（Module）中有多个同类型的接口需要注入，但是又需要根据不同的使用类注入不同的具体对象。如果只是简单的申明为接口注入对象，则会使用同一个对象。如：<code>bind(IDescription.class).to(ConnectionDescription.class);</code></p>

<h3 id="section-1">解决办法</h3>
<hr />
<p>使用<code>@Named("&lt;xxxx&gt;")</code>来命名需要注入的接口，然后在注入的时候指定名称来特定注入，如： </p>

<p>顶层使用类中：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="nd">@Inject</span>
</span><span class="line"><span class="nd">@Named</span><span class="o">(</span><span class="s">&quot;SendMsgWithAuditDesc&quot;</span><span class="o">)</span>
</span><span class="line"><span class="kd">private</span> <span class="n">IDescription</span> <span class="n">desc</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Module configure方法中</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="c1">//为什么的注入</span>
</span><span class="line"><span class="n">bind</span><span class="o">(</span><span class="n">IDescription</span><span class="o">.</span><span class="na">class</span><span class="o">).</span><span class="na">to</span><span class="o">(</span><span class="n">ConnectionDescription</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class="line">
</span><span class="line"><span class="c1">//指定名称的注入</span>
</span><span class="line"><span class="n">bind</span><span class="o">(</span><span class="n">IDescription</span><span class="o">.</span><span class="na">class</span><span class="o">).</span><span class="na">annotatedWith</span><span class="o">(</span>
</span><span class="line">	        <span class="n">Names</span><span class="o">.</span><span class="na">named</span><span class="o">(</span><span class="s">&quot;SendMsgWithAuditDesc&quot;</span><span class="o">)).</span><span class="na">toProvider</span><span class="o">(</span>
</span><span class="line">	        <span class="n">SendMessageWithAuditDescriptionProvider</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这里用了prvoider是因为需要使用参数的构造函数。Provider类如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SendMessageWithAuditDescriptionProvider</span> <span class="kd">implements</span>
</span><span class="line">        <span class="n">Provider</span><span class="o">&lt;</span><span class="n">ConnectionDescription</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@Override</span>
</span><span class="line">    <span class="kd">public</span> <span class="kd">final</span> <span class="n">ConnectionDescription</span> <span class="nf">get</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">	<span class="k">return</span> <span class="k">new</span> <span class="nf">ConnectionDescription</span><span class="o">(</span><span class="s">&quot;Audit with SMPP&quot;</span><span class="o">,</span>
</span><span class="line">	        <span class="s">&quot;Send Msg with audit via SMPP&quot;</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>代码可以参考<a href="https://github.com/duffqiu/DesignPatternDemo">DesignPatternDemo的Decorator部分</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Guice入门1]]></title>
    <link href="http://duffqiu.github.io/blog/2014/02/22/google-guiceru-men-1/"/>
    <updated>2014-02-22T20:26:34+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/02/22/google-guiceru-men-1</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<hr />
<p>在一个系统中，多个模块总是通过各种关系关联在一起的。但是一般的编程方式总是讲如何组装各种模块与处理业务逻辑混合在一块，造成代码的维护比较困看，也容易造成代码的行数很大。</p>

<h3 id="section-1">解决办法</h3>
<hr />

<p>在前面我们已经介绍过<a href="http://duffqiu.github.io/blog/2014/02/19/she-ji-mo-shi-%3Aioche-yi-lai-zhu-ru/">IoC</a>。可以通过自己创建单独的模块来维护类间的依赖。但是现在已经有成熟的框架帮助我们完成这个。主要有Spring和<a href="https://code.google.com/p/google-guice/">Google Guice</a>。这里主要讲一下如何使用Google Guice，这是一个基本的入门使用，后面如果用到高级的地方再讲。</p>

<h3 id="guice">Guice的使用</h3>

<h4 id="section-2">简介</h4>

<p>Google Guice是通过代码的方式来简单维护类间的依赖关系，不象Spring通过XML或annotation然后通过autoscan的方式来维护依赖。个人感觉好的地方是，对于程序员而言，代码方式更加贴近，也更容易理解。</p>

<h4 id="maven">使用方式(基于maven)</h4>
<ul>
  <li>在maven项目中增加Guice的jar包。注意，这里我们没有用AOP，所以特地讲AOP去掉，从而减少了对AOP的依赖</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">&lt;dependency&gt;
</span><span class="line">	&lt;groupId&gt;com.google.inject&lt;/groupId&gt;
</span><span class="line">	&lt;artifactId&gt;guice&lt;/artifactId&gt;
</span><span class="line">	&lt;version&gt;3.0&lt;/version&gt;
</span><span class="line">	&lt;classifier&gt;no_aop&lt;/classifier&gt;
</span><span class="line">&lt;/dependency&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>
    <p>在依赖的顶层被使用的类上指明要注入的类</p>

    <p>注入方式有：  </p>

    <ul>
      <li>
        <p>属性注入：在对应的属性上使用<code>@inject</code>的annotation，前提是要有默认的public的无參构造函数，建议这种方式</p>
      </li>
      <li>
        <p>构造函数注入：在对应的构造函数上使用<code>@inject</code>的annotation，前提是该构造函数带有需要被注入的参数。</p>
      </li>
    </ul>
  </li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SendMessageImpl</span> <span class="kd">implements</span> <span class="n">ISendMessage</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@Inject</span>
</span><span class="line">    <span class="kd">private</span> <span class="n">SmppSendMsg</span> <span class="n">smpp</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@Inject</span>
</span><span class="line">    <span class="kd">private</span> <span class="n">IDescription</span> <span class="n">desc</span><span class="o">;</span>
</span><span class="line">    <span class="o">...</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>
    <p>生成绑定关系的类，该类必须是继承于AbstractModule，然后在重载<code>configure</code>方法，在该方法中指定绑定关系。Best Practice：该类的命名后缀建议为BindingModule。如果注入的为具体的类，则无需在<code>configure</code>方法中指定绑定关系，如果为接口，则需要绑定到具体的类如：<code>bind(&lt;Interface&gt;.class).to(&lt;ConcreteClass&gt;.class)</code>。注意就算<code>configure</code>方法为空，都要生成一个Module类。Best Practise：尽量使用接口而不是具体的类，以便于以后更改类的实现而不用更改业务类的代码，因为注入都是在这个Module类完成。</p>
  </li>
  <li>
    <p>如果注入的类必须使用带参数的构造函数，则必须手工完成类的实例的生成。但是都必须在module类中指定。</p>

    <p>主要有两种方式手工完成类的实例的生成：</p>

    <ul>
      <li>
        <p>使用<code>@provider</code> annotation指定类的生成方法，该方法必须是返回一个该类的实例，但是这种方式无法让Guice自动完成Singleton。</p>
      </li>
      <li>
        <p>给需要手工生成实例的类创建一个provider类，该类实现 <code>Provider&lt;T&gt;</code>接口，然后在<code>configure</code>方法中使用<code>bind(xxx.class).toProvider(yyy.class)</code>指定手工生成实例的类。如果需要Singleton则在后面增加指定如<code>bind(xxx.class).toProvider(yyy.class).in(
        Singleton.class)</code>。Best Practice：该类的命名后缀建议为Provider。</p>
      </li>
    </ul>
  </li>
  <li>
    <p>客户端的使用方式 </p>

    <p>使用生成的BindingModule获取一个Inject实例，然后使用该实例创建需要的对象。如： </p>
  </li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">Injector</span> <span class="n">injector</span> <span class="o">=</span> <span class="n">Guice</span><span class="o">.</span><span class="na">createInjector</span><span class="o">(</span><span class="k">new</span> <span class="n">SendMessageBindingModule</span><span class="o">());</span>
</span><span class="line"><span class="n">ISendMessage</span> <span class="n">sender</span> <span class="o">=</span> <span class="n">injector</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="n">SendMessageImpl</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class="line"><span class="n">sender</span><span class="o">.</span><span class="na">xxx</span><span class="o">();</span>
</span><span class="line"><span class="o">...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-3">小插曲</h3>
<p>这是在写Decorator设计模式的时候分心出来写的，代码可以参考<a href="https://github.com/duffqiu/DesignPatternDemo">DesignPatternDemo的Decorator部分</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PlantUML小技巧]]></title>
    <link href="http://duffqiu.github.io/blog/2014/02/22/plantumlxiao-ji-qiao/"/>
    <updated>2014-02-22T15:10:21+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/02/22/plantumlxiao-ji-qiao</id>
    <content type="html"><![CDATA[<h3 id="plantuml">PlantUML画模块图/组件图的问题</h3>

<p>在使用PlantUML的时候，如果模块中嵌套模块然后将关联关系定义在子模块中，则很容易造成模块的混沦。</p>

<h3 id="section">解决办法</h3>
<p>我个人一个比较好的practice是这样一个模式，PlantUML代码如下<br />
同时最好的方式是在纸上先用笔画好初稿</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
</pre></td><td class="code"><pre><code class=""><span class="line">@startuml
</span><span class="line">title "组件图Best Practice"
</span><span class="line">
</span><span class="line">'全局的component
</span><span class="line">component [global 1]
</span><span class="line">component [global 2]
</span><span class="line">interface "inferface 1" as if1
</span><span class="line">interface "inferface 2" as if2
</span><span class="line">...
</span><span class="line">
</span><span class="line">'模块定义
</span><span class="line">package "Parent1" {
</span><span class="line">	package "Children1-1" {
</span><span class="line">		'只定义component，不定义关心
</span><span class="line">		component [1-1-1]
</span><span class="line">		component [1-1-2]
</span><span class="line">		...
</span><span class="line">	}
</span><span class="line">	package "Children1-2" {
</span><span class="line">		component [1-2-1]
</span><span class="line">		component [1-2-2]
</span><span class="line">		...
</span><span class="line">	}
</span><span class="line">	
</span><span class="line">}
</span><span class="line">
</span><span class="line">package "Parent2" {
</span><span class="line">	package "Children2-1" {
</span><span class="line">		'只定义component，不定义关心
</span><span class="line">		component [2-1-1]
</span><span class="line">		component [2-1-2]
</span><span class="line">		...
</span><span class="line">	}
</span><span class="line">	package "Children2-2" {
</span><span class="line">		component [2-2-1]
</span><span class="line">		component [2-2-2]
</span><span class="line">		...
</span><span class="line">	}
</span><span class="line">	
</span><span class="line">}
</span><span class="line">
</span><span class="line">'完成component定义后再定义关系不要再component中定义关系，容易造成有些component还未必定义就被使用
</span><span class="line">
</span><span class="line">'定义全局和子模块的关系
</span><span class="line">[global 1]..&gt;[global 2]
</span><span class="line">[global 1] - if1
</span><span class="line">[global 2] - if2
</span><span class="line">[global 1] ..&gt; [1-1-1]
</span><span class="line">
</span><span class="line">'定义Parent1和children间的关系已经与其它Parent或children的关系
</span><span class="line">[1-1-1]..&gt;[1-1-2]
</span><span class="line">[1-1-1]..&gt;[1-2-1]
</span><span class="line">[1-2-1]..&gt;[1-2-2]
</span><span class="line">[1-1-1]..&gt;[2-1-1]
</span><span class="line">
</span><span class="line">'定义Parent2和children间的关系已经与其它Parent或children的关系
</span><span class="line">[2-1-1]..&gt;[2-1-2]
</span><span class="line">[2-1-1]..&gt;[2-2-1]
</span><span class="line">[2-1-1]..&gt;[2-2-2]
</span><span class="line">
</span><span class="line">@enduml</span></code></pre></td></tr></table></div></figure></notextile></div>

<div style="text-decoration:underline; font-size: 16px; color: red" onclick="showdiv('componentuml')"> 最后的UML图如下： </div>

<div style="display:none" class="prev" id="componentuml" onclick="hidediv('componentuml')" title="点击关闭">



<center><img src="http://duffqiu.github.io/images/plantuml/0fc7dd179febc49855cadf23e3f82408.png" /></center>

</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式：装饰器模式]]></title>
    <link href="http://duffqiu.github.io/blog/2014/02/22/she-ji-mo-shi-%3Azhuang-shi-qi-mo-shi/"/>
    <updated>2014-02-22T15:09:29+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/02/22/she-ji-mo-shi-:zhuang-shi-qi-mo-shi</id>
    <content type="html"><![CDATA[<h3 id="section">装饰器模式原理</h3>
<hr />
<ol>
  <li>模式名称：装饰器模式 (Decorator Pattern)，另外一个别名是包装器模式(Wrapper)</li>
  <li>问题：在开发过程，当一个比较大的类实现并测试后，将逐渐被稳定下来。但是这个时候有了新的需求，需要增强原由的功能，一般的做法是直接修改原由的类，但是会影响到原有类的稳定性，所有的测试都要回归，并且新增代码会对已有功能的稳定性带来影响，而且违背OO的开放－封闭原则。另外一个做法是继承原有的类然后扩展功，但是会造成代码重复，而且扩展性不高，同时如果类已经是final的则无法通过这种方式达到目的。</li>
  <li>解决方案：提供一个与原来相同接口的类，但是原来的实现累作为新累的一个部分。这样对于客户端而言并没有改变，但是实际行为变成了除原有的功能外，新增了功能。同时可以由多个新增功能的类叠加来处理。简单讲就是<code>Interface i = new A();</code>变成了<code>Interface i = new B(new A)</code></li>
  <li>结论：无需静态继承，可以灵活扩展。可以作为AOP的简单实现。缺点是产生很多类似的类，容易引起歧异。</li>
</ol>

<h3 id="section-1">案例说明</h3>
<hr />
<p>这里提供一个简单的业务需求来完成这个例子。
需求的简单说明如下 ：系统一个模块给系统的其它部分用以发送用户通知。原本已经实现好了SMPP发送的功能，但是现在为了统计方便，需要在每次发送时记录到内存中/文件中，以便审计，但是这个对于客户端使用必须是透明的</p>

<h4 id="uml">UML图</h4>

<center><img src="http://duffqiu.github.io/images/plantuml/b80dc54557db601615cc3bb69ca1ba28.png" /></center>

<h3 id="section-2">模式要点</h3>

<p>一个类A实现接口I，同时拥有一个同样实现接口I的对象。客户端调用的时候，可以实例化多个实现接口I的对象，然后叠加在一起后给客户端使用。客户端只是看到I提供的功能描述，并不知道具体的实现叠加了多少。
这个模式的最大目的就是能够动态的给类增加功能。</p>

<p>使用中可以通过I i = new A(new B(new C))的方式使用，可以通过Guice等通过Inject的方式组装。在<a href="https://github.com/duffqiu/DesignPatternDemo">DesignPatternDemo的Decorator部分</a>例子中同时提供了这两种方式的代码。</p>
]]></content>
  </entry>
  
</feed>
