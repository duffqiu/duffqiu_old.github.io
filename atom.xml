<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Duff Qiu's Blog]]></title>
  <link href="http://duffqiu.github.io/atom.xml" rel="self"/>
  <link href="http://duffqiu.github.io/"/>
  <updated>2015-07-05T15:41:27+08:00</updated>
  <id>http://duffqiu.github.io/</id>
  <author>
    <name><![CDATA[Duff Qiu]]></name>
    <email><![CDATA[duffqiu@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Openstack用Keealived来实现VIP]]></title>
    <link href="http://duffqiu.github.io/blog/2015/07/05/openstack-vip/"/>
    <updated>2015-07-05T15:34:52+08:00</updated>
    <id>http://duffqiu.github.io/blog/2015/07/05/openstack-vip</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<hr />
<p>在Openstack创建VM的时候一般都是使用DHCP的方式来分配虚拟机的IP地址。这样就会出现一个问题，每次重建VM的时候，IP地址都会被改变，从而影响外部的访问。同时如果期望有两个虚拟机同时服务一个IP接入的话，则需要用到VIP的方式来实现。</p>

<h3 id="section-1">解决办法</h3>
<hr />

<p>VIP的实现方式通常使用VRRP（Virtual Router Redundancy Protocol）协议的方式。目前开源比较通用的软件是<a href="http://keepalived.org/">Keepalived</a>，但是在Openstack的环境中，并不是在两台虚拟机安装了Keepalived就可以的。而是需要做某些配置，下面具体讲讲</p>

<ul>
  <li>在OpenStack的一个内部网络上创建一个Port，这个Port将得到一个内网的IP <code>neutron port-create --name &lt;port name&gt; &lt;internal network name&gt;</code> 。如果不知道openstack上有哪些网络可用，则可以用<code>neutron net-list</code>来查看</li>
  <li>创建一个外网可访问的floating ip。<code>neutron floatingip-create &lt;external network name&gt;</code></li>
  <li>将这个floating ip关联到这个新建的port上。 <code>neutron floatingip-associate &lt;floating ip uuid&gt; &lt;port uuid&gt;</code>。这样就可以通过外部网络访问到这个port口了。</li>
  <li>启动两台VM，然后各自配置keepalived，并且用这个内网的ip作为VIP给keepalvied使用。配置好后，似乎都没有问题了。但是始终无法访问，原因是openstack对于使用VIP有安全限制，必须认为的将这个VIP与VM关联才可以访问</li>
  <li>配置VM的allowed-address-pair。首先通过<code>nova list |grep &lt;vm identity&gt;</code>来找到自己创建的VM，然后通过<code>neutron port-list|grep &lt;vm ip&gt;</code>来找到VM port对应的uuid。通过<code>neutron port-show &lt;vm port uuid&gt;</code>来查看是否配置了allowed-address-pair。如果没有则需要更新port来支持allowed-address-pair。命令是<code>neutron port-update &lt;vm port uuid&gt; --allowed-address-pairs type=dict list=true ip_address=&lt;VIP&gt;</code></li>
</ul>

<h3 id="section-2">如何调试</h3>

<ul>
  <li>如果一切都配置好了，但是就是无法通，则可以在VM或者是Openstack对应的Computer Node上用<code>tcpdump -i &lt;net card name&gt; icmp</code>的方式开跟踪是否消息包是通的</li>
  <li><code>ip neigh |grep &lt;vip&gt;</code> 来查看<vip>对应的mac地址。然后在作为master的keepalived的机器上看看是否是这个mac地址</vip></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CoreOS的安装]]></title>
    <link href="http://duffqiu.github.io/blog/2015/03/29/install-coreos/"/>
    <updated>2015-03-29T11:10:44+08:00</updated>
    <id>http://duffqiu.github.io/blog/2015/03/29/install-coreos</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<hr />
<p>想玩Docker的人肯定应该听说过<a href="https://coreos.com">CoreOS</a>。它是一个紧密结合Docker为大集群服务器而设计的Linux系统。它本身不允许安装软件包。所有提供的功能和扩展都是通过Docker容器来提供。安装CoreOS可以有多种方式，网管上都有介绍。这里主要说一下两种方式，一种是单机版，一种是服务器集群。这两种方式都是基于VirtualBox的安装.</p>

<h3 id="coreos">单机安装CoreOS</h3>
<hr />

<ul>
  <li>配置Virtualbox，创建一个linux的虚拟主机出来，内存512就够了</li>
  <li>下载CoreOS的ISO文件。（注意：国内对于CoreOS的下载服务器做了屏蔽，也不知道是为什么）</li>
  <li>设置CoreOS的ISO的文件作为虚拟光驱，然后启动CoreOS的虚拟机</li>
  <li>CoreOS的安装程序没有图形界面，光驱载入后只是给了个命令行的console</li>
  <li>在命令行中输入<code>sudo coreos-install -d /dev/sda</code>，然后这个脚本将下载CoreOS的安装包并开始安装 (注意：同样国内服务器屏蔽了下载服务器)</li>
  <li>安装成功后关闭CoreOS的虚拟机，<code>sudo systemctrl poweroff</code></li>
  <li>然后调整CoreOS的虚拟机，将启动顺序改为硬盘为先</li>
  <li>启动CoreOS的虚拟机，但是需要先进入GUN GRUB设置启动脚本，因为默认情况CoreOS是用证书连接的。没有用户名和密码。所以直接启动是无法登录系统的。</li>
  <li>启动CoreOS的虚拟机后用上下键选择启动default项，在最后一行的末尾加上<code>console=tty0 console=ttyS0 coreos.autologin=tty1 coreos.autologin=ttyS0</code>，然后F10保存后启动，这个时候将不需要密码进入系统了(这个改动只会一次有效，以后需要还要重新更改)</li>
  <li>注意：有可能不同的虚拟机启动的时候的cosole不是tty0或者ttyS0,则可以试一下tty1</li>
  <li>CoreOS默认安装后有用户core，这个时候可以用<code>sudo passwd core</code>来修改密码</li>
  <li>修改密码成功后，以后登录就可以用core用户和新设置的密码了</li>
  <li>CoreOS的虚拟机启动后默认已经启动了Docker，可以用<code>docker info</code>来查看docker的状态</li>
  <li>单机版的CoreOS只是拿来练习docker用的，或者是做开发环境，不可用作生产环境</li>
  <li>在Virutalbox上的虚拟主机上的网络配置端口映射（如SSH的22端口映射到主机的2222端口，这样就可以通过连接本机的2222端口到虚拟机了）</li>
</ul>

<h3 id="vagrantcoreos">Vagrant安装单一虚拟机的CoreoS集群</h3>
<hr />

<ul>
  <li>主要参照官网的文档说明<a href="https://coreos.com/docs/running-coreos/platforms/vagrant/">Running CoreOS on Vagrant</a></li>
  <li><a href="https://coreos.com/docs/running-coreos/platforms/vagrant/">Vagrant</a>主要是作为开发环境配置管理工具，需要1.6.3及以上版本</li>
  <li>根据Virtualbox以及Vagrant的说明安装好这些工具</li>
  <li>用Git克隆对应的vagrant安装CoreOS的工程</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">git clone https://github.com/coreos/coreos-vagrant.git
</span><span class="line"><span class="nb">cd </span>coreos-vagrant
</span></code></pre></td></tr></table></div></figure></notextile></div>
<ul>
  <li>从这个项目中的example文件copy得到一份<code>user-data</code>和<code>config.rb</code>。<code>user-data</code>是CoreOS的云配置文件，是<a href="https://github.com/coreos/fleet">fleet</a>需要用到的配置内容。<code>config.rb</code>是Vagrant用到的配置选项。</li>
  <li>
    <p>修改<code>user-data</code>文件，配置<a href="https://github.com/coreos/fleet">etcd</a>用到的这个CoreOS cluster服务发现所要的etcd的服务。是不是有些绕？etcd需要ectd?后面再写个如何建etcd群的文章给CoreOS cluster用。</p>

    <ul>
      <li>使用免费的公开的etcd的服务获得一个群的token: 调用<code>https://discovery.etcd.io/new</code>得到一个token值</li>
      <li>将这个token替换discovery配置项中的<token>就可。</token></li>
      <li>需要注意的是，每次<code>vagrant destroy</code>后要重新更新这个token值</li>
      <li>每次更新这个文件后，需要用<code>vagrant reload --provision</code>的来更新VM</li>
    </ul>
  </li>
  <li>
    <p>修改<code>config.rb</code>配置文件</p>

    <ul>
      <li>设置群中服务器个的个数 <code>$num_instances=3</code></li>
      <li>设置VM的版本，如使用最新的稳定版 <code>$update_channel='stable'</code>。如果需要指定版本，则可以修改<code>Vagrantfile</code>中的config.vm.box_version配置</li>
    </ul>
  </li>
  <li>
    <p>用启动CoreOS cluster</p>

    <ul>
      <li><code>vagrant up</code> 启动，如果之前没有box，则会自动下载对应的box。注意如果有代理，则需要在环境变量中设置http_proxy以及https_proxy(windows下也要) </li>
      <li>如果只想启动一台server则可以：<code>vagrant up &lt;name&gt;</code>，默认<name>可以是core-01, core-02, core-03&#8230;</name></li>
      <li>检查启动状态：<code>vagrant status</code></li>
      <li>连接进server: <code>vagrant ssh &lt;name&gt;</code>，这样将通过证书来认证默认用户core。如果使用Putty这样的ssh client则可以参考<a href="https://github.com/Varying-Vagrant-Vagrants/VVV/wiki/Connect-to-Your-Vagrant-Virtual-Machine-with-PuTTY">用ssh登录vagrant创建的vm</a></li>
      <li>如果想共享主机目录到CoreOS则可以去掉<code>Vagrantfile</code>中关于<code>config.vm.synced_folder</code>的注释符</li>
    </ul>
  </li>
  <li>
    <p>验证CoreOS是否成功建立集群</p>

    <ul>
      <li>登录其中一台CoreOS</li>
      <li>使用命令：<code>fleetctl list-machines</code>看是否成功列出集群中所有的CoreOS服务器，如果有错误，一般是配置<code>user-data</code>文件的discovery不正确</li>
    </ul>
  </li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scala作为脚本语言动态执行]]></title>
    <link href="http://duffqiu.github.io/blog/2015/03/03/scala-script/"/>
    <updated>2015-03-03T17:05:37+08:00</updated>
    <id>http://duffqiu.github.io/blog/2015/03/03/scala-script</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<hr />
<p>通常我们设计程序的时候都会分为3个层面，MVC是最通用的分层方式。一个是展示层，一个逻辑处理层，一个存储层。但是对于逻辑处理层还可以抽象分为两个层次，一个固定逻辑层，一个动态逻辑层。
对于动态逻辑层的实现，在Java中一般可以使用JavaScript引擎来执行JavaScript脚本。在Scala的程序中也可以这样做。不过Scala增加了使用Scala语言本身作为scritp语言。即Scala代替Javascript。
在2.11的REPL中可以这样做了，参见<a href="http://duffqiu.github.io/blog/2015/03/02/scala211-overview/">Scala2.11Overview</a>
那么在代码中如何做呢？找了半天都没有找到官方的例子，尝试的过程中不是发现Null Point Exception的此错误就是说xxx Not Found (xxx是指Scala的类型，如Object, Int等)
在Junjun的提醒下，可能是ClassLoader的问题，造成script的执行找不到对应的jar包（包括Scala的标准包），因为默认情况下，ScriptEngine是在bootstrap路径下找jar包。参见<a href="http://docs.oracle.com/javase/7/docs/technotes/tools/findingclasses.html">Java如何找CLASS文件</a></p>

<h3 id="section-1">解决办法</h3>
<hr />

<ul>
  <li>先来看看原来在REPL中调用ScalaScript(尽管Script的代码依然是Scala，为了好区分这些是动态执行的Scala,暂且叫他ScalaScript)</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">import javax.script.ScriptEngineManager
</span><span class="line">val e = new ScriptEngineManager().getEngineByName("scala")
</span><span class="line">e.put("n", 10)
</span><span class="line">e.eval("1 to n.asInstanceOf[Int] foreach println")</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>
    <p>这些代码如果直接搬到Scala程序中，然后通过<code>java -jar</code>的方式运行是回出现我前面提到的错误的</p>
  </li>
  <li>
    <p>解决方式1： 使用<code>-xXbootclasspath</code>来指定scalascript中用到的jar包，包含scala的标准包，因为bootstrao只包含了JAVA的rt.jar以及jre/lib下面的jar包。</p>
  </li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">java -Xbootclasspath/a:/usr/scala-2.11.4/lib/scala-library.jar:/usr/scala-2.11.4/lib/scala-compiler.jar:/usr/scala-2.11.4/lib/scala-reflect.jar -jar  &lt;your jar file&gt;
</span><span class="line">//注意/a:/是固定的格式，具体可以查Jdk的文档</span></code></pre></td></tr></table></div></figure></notextile></div>
<pre><code>- 但是这个方式在前面的&lt;&lt;Java如何找CLASS文件&gt;&gt;的文中不建议，同时使用起来也比较麻烦
</code></pre>

<ul>
  <li>解决方式2： 在代码中指定scalascript和调用程度本身使用相同的jar包，代码如下：</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class=""><span class="line">import javax.script.ScriptEngineManager
</span><span class="line">import javax.script.ScriptEngine
</span><span class="line">
</span><span class="line">val m = new ScriptEngineManager()
</span><span class="line">val engine = m.getEngineByName("scala")
</span><span class="line">
</span><span class="line">//需要设计的属性
</span><span class="line">val settings = engine.asInstanceOf[scala.tools.nsc.interpreter.IMain].settings
</span><span class="line">settings.usejavacp.value = true  //使用程序的class path作为engine的class path
</span><span class="line">
</span><span class="line">engine.put("m", 10)
</span><span class="line">engine.eval("1 to m.asInstanceOf[Int] foreach println")</span></code></pre></td></tr></table></div></figure></notextile></div>
<pre><code>- 在sbt的工程中，将scala的标准包都变成依赖包，显示指定
- 然后通过`sbt assembly`来打包程序为胖程序（即包含所有的依赖包），`sbt package`不会包含依赖包的
- 直接通过`jar -jar &lt;your jar file&gt;`就可以了.
</code></pre>

<h4 id="section-2">官方讨论</h4>

<p><a href="https://github.com/scala/scala/pull/2238">Scala Issue 2238</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scala211特性简介]]></title>
    <link href="http://duffqiu.github.io/blog/2015/03/02/scala211-overview/"/>
    <updated>2015-03-02T12:02:16+08:00</updated>
    <id>http://duffqiu.github.io/blog/2015/03/02/scala211-overview</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<hr />
<p>Scala语言本生的变更还是比较快的，现在最通用是2.10和2.11版本
那么是否需要用2.11版本呢？
我们来看一看2.11的一些特性。参考于<a href="http://docs.scala-lang.org/scala/2.11/">scala2.11overview</a></p>

<h3 id="scala-211">Scala 2.11特性简介</h3>
<hr />

<ul>
  <li>
    <p>更小</p>

    <ul>
      <li>Actor包被废弃，如果的需要直接用Akka的包，已经被包含在了Scala的版准语言包了</li>
      <li>XML包被移除出scala-library.jar，编程了一个独立的包，如需要可以加入如下依赖 <code>libraryDependencies += "org.scala-lang.modules" %% "scala-xml" % "1.0.3"</code></li>
    </ul>
  </li>
  <li>更快: 提高了性能</li>
  <li>
    <p>更强</p>

    <ul>
      <li>语言：支持case class的参数多于22个参数(参见：<a href="https://issues.scala-lang.org/browse/SI-7296">1</a>)</li>
      <li>语言：增强类型推断。(不过好像这个问题又被打开了, 参见<a href="https://issues.scala-lang.org/browse/SI-1786">2</a>)</li>
      <li>REPL: 这个增强了很多项， 不一一举例了，下面是一些我个人觉得有用的。</li>
    </ul>
  </li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">scala&gt; :settings &lt;+/-&gt; &lt;flag&gt;
</span><span class="line">//这个主要是针对在REPL中提示有warning的时候，需要使用某些启动参数。原来的方式是需要退出REPL然后再用指定参数启动。现在可以直接通过这个名利来激活(+)/去除(-)某个特性(flag)，如显示deprecation，则用":settings + deprecation"</span></code></pre></td></tr></table></div></figure></notextile></div>

<pre><code>- REPL: 支持script引擎 (我个人没有用过scala下的script引擎，不知道。后面再写个如何在[代码中动态执行Scala](/blog/2015/03/03/scala-script/))
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ssh在linux下使用http/https代理]]></title>
    <link href="http://duffqiu.github.io/blog/2015/02/26/ssh-proxy-in-linux/"/>
    <updated>2015-02-26T18:00:30+08:00</updated>
    <id>http://duffqiu.github.io/blog/2015/02/26/ssh-proxy-in-linux</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<hr />
<p>在公司有代理的环境下，如果在linux下使用github，则可以使用https的方式。
但是https的方式需要每次都输入用户名和密码（用户名可以写在url上避免输入，但是密码就必须要）
但是如果能使用ssh的rsa方式则可以避免这个麻烦，但是ssh默认是不支持使用http/https代理的。
那么有没有办法通过某种手段让ssh支持代理呢？答案是可定的，这个工具是<a href="http://www.agroman.net/corkscrew/">Corkscrew官网</a></p>

<h3 id="section-1">解决办法</h3>
<hr />

<p>通过Corkscrew来建立隧道的方式来为ssh提供代理，具体方法如下 </p>

<ul>
  <li>安装Corkscrew（主要下载源代码，然后配置、编译、安装，典型的C程序的方式）</li>
  <li>配置ssh，在~/.ssh/目录下生成一个config=文将，然后增加一行：<code>ProxyCommand /usr/local/bin/corkscrew &lt;proxy http url&gt; &lt;proxy port&gt; %h %p</code></li>
  <li>如果是新建的config文件，注意要更改一下它的权限为600，<code>chmod 600 ~/.ssh/config</code></li>
  <li>根据github的说明配置ssh的public和private key,参考<a href="https://help.github.com/articles/generating-ssh-keys/#platform-linux">git帮助</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sublime入门以及搭建scala开发环境]]></title>
    <link href="http://duffqiu.github.io/blog/2015/02/25/sublime-startup/"/>
    <updated>2015-02-25T14:49:46+08:00</updated>
    <id>http://duffqiu.github.io/blog/2015/02/25/sublime-startup</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<hr />
<p>Sublime号称是神级编辑器，同时支持多种插件的扩展。并且支持多个平台。
这里主要讲以下如何安装和配置，并说明一下如何使用scala插件来搭建开发环境，
避免使用其他的IDE这么重的工具，节约内存和系统消耗</p>

<h3 id="sublime">sublime使用入门</h3>
<hr />

<ul>
  <li>
    <p>安装sublime
可以直接从<a href="http://www.sublimetext.com/">sublime官网</a>下载对应的版本安装
这里针对不同的系统的配置的文件的路径如下：</p>

    <ul>
      <li>Mac OSX: <code>~/Library/Library/Application Support/Sublime Text 3</code></li>
      <li>Linux CentOS7: <code>~/.config/sublime-text-3</code></li>
    </ul>
  </li>
</ul>

<p>Mac OSX有对应的dmg安装包，一部一部安装就可以
CentOS7没有安装包，需要下载压缩包，4然后解压到<code>/opt/sublime-text</code>目录(注意要把名字中的3去掉)，然后将目录中的sublime_text.desktop复制到<code>/usr/share/applications</code>，这样在CentOS的启动菜单上就对应的图表了</p>

<ul>
  <li>
    <p>安装包管理插件Package Control</p>

    <ul>
      <li>最先要安装的是插件<a href="https://packagecontrol.io/installation">管理工具Package Control</a>: 下载插件包，然后放到配置路径的Installed Packages目录下就可以了。</li>
      <li>每次通过<code>shift+Ctrl+P</code>来打开命令板选择“Package Control: Install Package”来安装插件</li>
    </ul>
  </li>
  <li>
    <p>安装scala插件SublimeREPL</p>

    <ul>
      <li><code>shift+Ctrl+P</code>来打开命令板选择“Package Control: Install Package”，然后选择SublimeREPL</li>
      <li>安装成功后就可以在命令板中选择对应的scala/sbt来打开scala REPL和sbt REPL了</li>
      <li>配置： 有可能你安装sbt/scala的目录不同，造成无法打开scala REPL和sbt REPL，这个时候需要手工配置一下。在配置的文件的路径下找到<code>Packages/SublimeREPL/config/Scala</code>目录下的Main.sublime-menu文件，编辑该文件，为对应的scala和sbt指定好对应的目录就可以了</li>
      <li>使用：对于SublimeREPL:scala只是打开了scala REPL，用处不大，可以使用下面的scala worksheet插件代替。但是对于SublimeREPL:sbt则比较有用。方式是通过sublime先打开sbt的工程的目录，然后在命令板执行SublimeREPL:SBT for opened folder。不过还有更方便的插件SbblimeSBT</li>
    </ul>
  </li>
  <li>
    <p>安装scala worksheet插件</p>

    <ul>
      <li><code>shift+Ctrl+P</code>来打开命令板选择“Package Control: Install Package”，然后选择Scala Worksheet</li>
      <li>安装成功后就可以在命令板中选择对应的show scala worksheet了。</li>
      <li>使用方式是编写对应的scala文件并保存后，再执行show scala worksheet，这样scala REPL就自动会执行你编辑的文件了。</li>
      <li>有可能在打开show scala worksheet出现无法找到scala的无法，简单的解决方式是在1<code>/usr/bin</code>下给scala建立一个soft link <code>sudo ln &lt;scala install path&gt; /usr/bin/scala</code></li>
      <li>如果需要给Scala worksheet增加额外的jar包，则需要配置Sublime中的setting。<code>preferences-&gt;Settings - User</code>，然后增加一个JSON key: (注意不要用相对路径，要用绝对路径)</li>
    </ul>
  </li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">"scala_worksheet_classpath":
</span><span class="line">[
</span><span class="line">	"&lt;jar path&gt;/&lt;jar name&gt;"
</span><span class="line">]</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>
    <p>安装SublimeSBT插件</p>

    <ul>
      <li><code>shift+Ctrl+P</code>来打开命令板选择“Package Control: Install Package”，然后选择SublimeSBT</li>
      <li>使用：shift+Ctrl+P`来打开命令板选择SBT: xxx来运行对应的sbt命令</li>
    </ul>
  </li>
  <li>
    <p>给对应的scala sbt项目配置SBT插件：sbt-sublime </p>

    <ul>
      <li>在project/plugin.sbt中增加<code>addSbtPlugin("com.orrsella" % "sbt-sublime" % "1.0.9")</code></li>
      <li>在sbt console中调用<code>gen-sublime</code>来获取依赖包的源文件以及生成sublime的工程文件（每次SBT Clean都会自动删除这些文件。）。这样也节约了需要在每一个依赖包的定义后面增加withSource的选项</li>
      <li>使用步骤1： 在sublime中， project-&gt;open project来打开生成sublime的工程文件，这个时候将会将SBT的工程目录加载进来，同时多了一个External Libraries的目录（其存放了依赖包的源代码）</li>
      <li>使用步骤2： 使用SublimeSBT插件调用SBT: Start continus compiling，这样每次更改源文件都会被自动编译。如果发现错误，则Sublime会自动提示在那一行代码上</li>
      <li>使用步骤3： 因为引入了依赖包的源代码，则可以通过在sublime中的Goto菜单来调转到指定的类/方法的源文件处(仅Sublime Text 3支持)</li>
      <li>使用步骤4： 使用Snippet：case class…等来协助快速编写代码（但是不知道是上面哪个插件体提供的了）</li>
    </ul>
  </li>
  <li>
    <p>使用Git插件，在“Package Control: Install Package”中选择Git就可以了，然后在命令板选择对应的Git:xxx命令就可如Git status。</p>
  </li>
</ul>

<p>Sublime搭建Scala开发环境小结：
    - 总体而言还是不错，运行速度又快，基本的功能都有
    - 但是唯一的遗憾是没有办法在编写代码的时候自动提示可能的方法/类等</p>

<h4 id="section-1">小提示</h4>
<p>对于sublime text 3的最新版本在linus下无法使用ibus的输入法，所以编写这个blog的时候我又回到了gedit
从这个对比来看，linus和mac osx从个人用户的使用来看还是差很远的</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac下port工具的使用]]></title>
    <link href="http://duffqiu.github.io/blog/2015/02/23/mac-port-guide/"/>
    <updated>2015-02-23T22:29:35+08:00</updated>
    <id>http://duffqiu.github.io/blog/2015/02/23/mac-port-guide</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<hr />

<p>Mac下面除了用dmg、pkg来安装软件外，比较方便的还有用MacPorts来帮助你安装其他应用程序，跟BSD中的ports道理一样。MacPorts就像apt-get、yum一样，可以快速安装些软件。</p>

<p>Mac下还有brew可以用来管理软件包，但是个人不喜欢这个工具，还是比较倾向于用port</p>

<h3 id="section-1">工具使用详解</h3>
<hr />

<ul>
  <li>更新ports tree(即软件信息列表)和MacPorts版本，强烈推荐第一次运行的时候使用-v参数，显示详细的更新过程。</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo port -v selfupdate</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>搜索索引中的软件</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">port search &lt;name&gt;</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>安装新软件</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo port install &lt;name&gt;</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>卸载软件</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo port uninstall &lt;name&gt;</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>递归卸载要卸载的软件所依赖的软件包，但这一命令不会卸载那些又依赖其他软件包的软件。</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo port uninstall --follow-dependencies software_name </span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>查看有更新的软件以及版本</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">port outdated</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>升级可以更新的软件</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo port upgrade outdated </span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>升级软件并且同时升级所依赖的软件包</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo port upgrade &lt;name&gt; </span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>关闭软件</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo port deactivate &lt;name&gt;</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>查询所需软件信息</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo port info &lt;name&gt; </span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>查看软件依赖性：</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo port deps &lt;name&gt;  </span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>清理安装过程中的缓存文件，在获取软件失败时也可以使用：</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo port clean --all &lt;name&gt;  </span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>查看已经安装的软件的内容信息</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">port contents &lt;name&gt;  </span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>查看已安装软件的信息</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo port installed &lt;name&gt;  </span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>报告所查询软件的依赖包情况</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">port dependents &lt;name&gt;  </span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[集成SBT到Jenkins中]]></title>
    <link href="http://duffqiu.github.io/blog/2015/02/23/integrate-sbt-project-jenkins/"/>
    <updated>2015-02-23T14:56:24+08:00</updated>
    <id>http://duffqiu.github.io/blog/2015/02/23/integrate-sbt-project-jenkins</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<hr />

<p>之前有些过关于Jenkins上搭建maven工程<a href="http://duffqiu.github.io/blog/2014/02/06/yong-jenkinsda-jian-ji-yu-githubhe-junitde-zi-dong-hua-ce-shi/">1</a>，但是对于Scala的工程最好还是用SBT，那么如何在Jenkins用SBT呢？</p>

<h3 id="section-1">解决办法</h3>
<hr />

<p>Jenkins已经提供了SBT的插件，类似Maven的插件</p>

<p>具体步骤如下：</p>

<ul>
  <li>在Jenkins上的系统管理-&gt;管理Jenkins-&gt;管理插件中选择可选插件，然后输入sbt过滤条件</li>
  <li>选择安装sbt plugin</li>
  <li>重启Jenkins</li>
  <li>配置sbt：系统管理-&gt;系统设置，设置”sbt lauch jars”，注意这里是指具体的jar文件，不是配置路径。如<code>/opt/local/share/sbt/sbt-launch.jar</code>  </li>
  <li>新建项目（因为不像Maven有特定的选项），所以选择”构建一个自由风格的软件项目”  </li>
  <li>然后在构建步骤中选择”Build using SBT”，然后配置对应的参数。这里需要注意的是JVM Flags，如果不配置很可能PerGem不够造成OutofMemoryError。但是该配置什么呢？如果不是太清楚，则可以直接拷贝sbt的启动脚本中的JVM Flags参数，如我机器的：<code>-XX:+CMSClassUnloadingEnabled -Xms1536m -Xmx1536m -XX:MaxPermSize=384m -XX:ReservedCodeCacheSize=192m -Dfile.encoding=UTF8</code></li>
  <li>如果Git repo下是涵盖了多个项目，则可以制定sub-directory path来运行特定个项目</li>
</ul>

<h3 id="section-2">小插曲</h3>

<h4 id="linuxunix">Linux/Unix下跟踪或查看文件的命令</h4>

<ol>
  <li>输入文件到console: <code>cat &lt;filename&gt;</code></li>
  <li>逐行显示文件: <code>less &lt;filename&gt;</code></li>
  <li>显示文件最后的一屏: <code>tail &lt;filename&gt;</code></li>
  <li>如果需要跟踪文件的变化则: <code>tail -f &lt;filename&gt;</code></li>
</ol>

<h4 id="git">Git清理工作空间</h4>

<p>如果在某个Repo中，你不小心加入了很多没用的文件和文件目录（或者是因为没有checkout到真确的branch就做了pull操作），则你期望一次性清理掉这些文件，可以用以下命令
不过需要注意的是这个操作不可逆的，可以通过增加<code>-n</code>参数来预览一下将会有什么变化</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">git clean -fdx
</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[初学sbt]]></title>
    <link href="http://duffqiu.github.io/blog/2015/02/10/sbt-for-new-user/"/>
    <updated>2015-02-10T15:22:32+08:00</updated>
    <id>http://duffqiu.github.io/blog/2015/02/10/sbt-for-new-user</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<hr />
<p>初学一种语言最烦的就是搭建开发环境了，每次都要装一堆的plugin，有时候又因为不同的plugin的版本等问题冲突
前面介绍如何使用Maven来搭建开发环境，总体而言还算比较复杂。特别是在不同的机器上竟然有些plugin不可用，也不知道问题在那里。
所以既然是以开发Scala为主，那还是用<a href="http://scala-sbt.org">SBT</a>吧</p>

<h3 id="section-1">主要参考</h3>
<hr />
<p>直接参考<a href="http://www.scala-sbt.org/0.13/tutorial/index.html">SBT官网的Getting Started</a>并结合自己的一些实践做了下浓缩
官网已经提供中文版本了(开来中国是用Scala增长比较快的地区，另一个是美国硅谷，有兴趣可以看看google trend上关于Scala)</p>

<p>该Getting Started有几章可以暂时不用看的，到真的有需要再看
- Scope
- Multi-project builds
- Custom settings and tasks
- .scala build definition</p>

<p>另外在Github上有个<a href="https://github.com/n8han/giter8">giter8，简称g8</a>的工具，可以帮助获取scala, sbt的模版，不过自从有了<a href="http://typesafe.com/get-started">typesafe的activator</a>后，提供g8模版已经不多了，原有的模版也没怎么更新了</p>

<h4 id="sbt">安装SBT</h4>
<p>可以根据SBT官网的Getting Started，对于不同的平台采用不同的安装方式
安装完后，基本上就是一个sbt的命令脚本和sbt-launch.jar
安装完后，通过命令行运行一次<code>sbt</code>，然后sbt会将对应的依赖包下载下来。
sbt会在用户的home目录下创建.sbt和.ivy2的目录，依赖包都放在了ivy2的目录里。因为sbt实际是通过ivy2来管理包依赖。不过大家不用去看ivy2，这些都是sbt自己管理的。
如果是公司有代理的环境中，则需要设置java代理的参数才可以使用，不然sbt总是在尝试下载依赖包。
一般设置java代理的参数是在shell的文件中设置JAVA_OPTS,但是好像不其作用。所以最好的方式是直接修改sbt的命令脚本增加代理配置参数</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">JAVA_OPTS</span><span class="o">=</span><span class="s2">&quot;$JAVA_OPTS -Dhttp.proxyHost=&lt;proxy host&gt; -Dhttp.proxyPort=&lt;proxy port&gt; -Dhttps.proxyHost=&lt;proxy host&gt; -Dhttps.proxyPort=&lt;proxy port&gt;&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="scalajava">建立一个scala/java工程</h4>
<p>建议不要从参考SBT官网的Getting Started的hello world，因为它将源文件建在了工程的根目录上了
很奇怪，到目前位置都没有个一个像maven那样可以直接在Eclipse上创建一个sbt的工程，而必须先手工创建一些文件</p>

<p>具体步骤为：</p>

<ul>
  <li>创建一个工程目录如： sbt-sample</li>
  <li>在工程目录下再创建一个子目录，必须名为project</li>
  <li>在工程目录下创建名为build.sbt的定义文件，并写入基本的信息，需要注意的是每个配置都要空一行。以后打开别人的工程先看看这个文件的基本定义，特比是scala的版本</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">name :<span class="o">=</span> <span class="s2">&quot;sbt-sample&quot;</span>
</span><span class="line">
</span><span class="line">version :<span class="o">=</span> <span class="s2">&quot;1.0&quot;</span>
</span><span class="line">
</span><span class="line">scalaVersion :<span class="o">=</span> <span class="s2">&quot;2.11.4&quot;</span>
</span><span class="line">
</span><span class="line">organization :<span class="o">=</span> <span class="s2">&quot;org.duff&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<ul>
  <li>使用<a href="https://github.com/typesafehub/sbteclipse">sbteclpise</a>插件， 在project子目录下创建一个plugins.sbt文件，然后加入一下内容，然后在sbt的命令行下执行<code>eclipse</code>就可以生成对应的eclipse的工程了。如果改动了sbt的文件则最后重新执行一次<code>eclipse</code>获得最新的包依赖等</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">addSbtPlugin<span class="o">(</span><span class="s2">&quot;com.typesafe.sbteclipse&quot;</span> % <span class="s2">&quot;sbteclipse-plugin&quot;</span> % <span class="s2">&quot;2.5.0&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>打开Eclipse，写个测试的App</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kn">package</span> <span class="n">org</span><span class="o">.</span><span class="na">duff</span><span class="o">.</span><span class="na">sbtsample</span>
</span><span class="line">
</span><span class="line"><span class="n">object</span> <span class="n">Main</span> <span class="kd">extends</span> <span class="n">App</span><span class="o">{</span>
</span><span class="line">
</span><span class="line">  <span class="n">println</span><span class="o">(</span><span class="s">&quot;this is a sbt sample&quot;</span><span class="o">)</span>
</span><span class="line">
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>
    <p>在sbt命令行下执行<code>compile</code>，然后<code>run</code>就可以看到对应的输入了</p>
  </li>
  <li>
    <p>设置包依赖仓库（repository）。对于Maven是设置的Maven的conf文件中，但是对于SBT是每次定义在项目的build.sbt文件中</p>

    <ul>
      <li>方法一： 通过URL定义如： <code>resolvers += "&lt;rep name&gt;" at "&lt;rep url&gt;"</code></li>
    </ul>
  </li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">resolvers +<span class="o">=</span>
</span><span class="line">  <span class="s2">&quot;Sonatype OSS Snapshots&quot;</span> at <span class="s2">&quot;https://oss.sonatype.org/content/repositories/snapshots&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>
    <p>方法二： 使用<a href="http://www.scala-sbt.org/0.13/docs/Resolvers.html">预定义的Rep</a>，主要有：</p>

    <ul>
      <li>DefaultMavenRepository at  https://repo1.maven.org/maven2/，这个会被默认使用，无需指定</li>
      <li>JavaNet1Repository  at http://download.java.net/maven/1/</li>
      <li>Resolver.sonatypeRepo(“public”) (or “snapshots”, “releases”) at https://oss.sonatype.org/content/repositories/public</li>
      <li>Resolver.typesafeRepo(“releases”) (or “snapshots”) at https://repo.typesafe.com/typesafe/releases</li>
      <li>Resolver.typesafeIvyRepo(“releases”) (or “snapshots”) at https://repo.typesafe.com/typesafe/ivy-releases</li>
      <li>Resolver.sbtPluginRepo(“releases”) (or “snapshots”) at https://repo.scala-sbt.org/scalasbt/sbt-plugin-releases</li>
      <li>Resolver.bintrayRepo(“owner”, “repo”) at https://dl.bintray.com/[owner]/[repo]/</li>
      <li>Resolver.jcenterRepo at https://jcenter.bintray.com/</li>
    </ul>
  </li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">resolvers +<span class="o">=</span> JavaNet1Repository
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>方法三：同时指定多个rep，使用<code>resolvers ++= Seq(&lt;rep1&gt;, &lt;rep2&gt;)</code>, rep1/rep2可以使用方法一或方法二</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">resolvers ++<span class="o">=</span> Seq<span class="o">(</span>Resolver.sonatypeRepo<span class="o">(</span><span class="s2">&quot;public&quot;</span><span class="o">)</span>,
</span><span class="line">    Resolver.typesafeRepo<span class="o">(</span><span class="s2">&quot;releases&quot;</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>指定工程依赖包，和resolver类似，可以一个一个指定(+=)，也可以同时指定(++= Seq())，另外如果需要对多个包使用同一个变量指定如scala版本等，则可以使用如下例子的方式(即Scala的闭包)</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">libraryDependencies ++<span class="o">=</span> <span class="o">{</span>
</span><span class="line">  val <span class="nv">akkaVersion</span>       <span class="o">=</span> <span class="s2">&quot;2.3.9&quot;</span>
</span><span class="line">  val <span class="nv">sprayVersion</span>      <span class="o">=</span> <span class="s2">&quot;1.3.2&quot;</span>
</span><span class="line">  Seq<span class="o">(</span>
</span><span class="line">    <span class="s2">&quot;com.typesafe.akka&quot;</span> %% <span class="s2">&quot;akka-slf4j&quot;</span>      % akkaVersion withSources<span class="o">()</span> withJavadoc<span class="o">()</span>,
</span><span class="line">    <span class="s2">&quot;ch.qos.logback&quot;</span>    %  <span class="s2">&quot;logback-classic&quot;</span> % <span class="s2">&quot;1.1.2&quot;</span>,
</span><span class="line">    <span class="s2">&quot;com.typesafe.akka&quot;</span> %% <span class="s2">&quot;akka-testkit&quot;</span>    % akkaVersion   % <span class="s2">&quot;test&quot;</span>,
</span><span class="line">    <span class="s2">&quot;org.scalatest&quot;</span>     %% <span class="s2">&quot;scalatest&quot;</span>       % <span class="s2">&quot;2.2.0&quot;</span>       % <span class="s2">&quot;test&quot;</span> withSources<span class="o">()</span> withJavadoc<span class="o">()</span>
</span><span class="line">  <span class="o">)</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<ul>
  <li>每个lib的定义格式为 <code>&lt;groupID&gt; % &lt;artifactID&gt; % &lt;revision&gt; % configuration</code>。如上面的 ch.qos.logback，默认情况下都是”compile”的配置，而对于scalatest是指定在”test”的时候才使用</li>
  <li>如果artifactID是根据scala的版本有不同的版本则可以简化的使用%%的方式省去指定xxx_2.11.4 (使用scala 2.11.4)而是直接写xxx</li>
  <li>
    <p>需要同时下载javadoc和source，则可以在最后用withSources() withJavadoc()</p>
  </li>
  <li>
    <p>更改完后，如果还在sbt命令行下，则可以运行<code>reload</code>来更新相应的配置</p>
  </li>
  <li>
    <p>打包程序，如果使用的不同的framework/toolkit，则有不同的打包方式，一般的打包方式是打成大的jar包</p>

    <ul>
      <li>配置打包plugin，在project子目录中增加一个名为assembly.sbt的文件，增加以下内容</li>
    </ul>
  </li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">addSbtPlugin<span class="o">(</span><span class="s2">&quot;com.eed3si9n&quot;</span> % <span class="s2">&quot;sbt-assembly&quot;</span> % <span class="s2">&quot;0.12.0&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<ul>
  <li>然后就可以在sbt命令行下执行<code>assembly</code>，则可以打包出jar文件了。可以在子目录target/scala-2.11/下找到这个jar</li>
  <li>通过执行<code>java -jar &lt;xxx.jar&gt;</code>来执行程序</li>
  <li>
    <p>可以通过在build.sbt中增加以下配置更改打包jar</p>

    <ul>
      <li><code>ssemblyJarName in assembly := "&lt;xxxx.jar&gt;"</code> 更改打包的jar文件名</li>
      <li><code>mainClass in assembly := Some("&lt;com.example.Main&gt;")</code> 更改main函数的入库</li>
      <li>如果像用工程的版本号来合成打包文件，则可以这样写 <code>assemblyJarName in assembly := "&lt;name&gt;" + version.value +".jar"</code></li>
    </ul>
  </li>
</ul>

<p>到此一个就本的sbt的scala开发环境就建成了。
后续不同的项目的变化基本上就集中在增加新的依赖包，增加不同的plugin来执行不同的任务
个人使用看来，对比maven相对而言要简单一些。只是SBT使用场景基本只局限于java和scala，同时sbt的写法是scala语法</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scala中函数式编程还是命令式编程]]></title>
    <link href="http://duffqiu.github.io/blog/2015/02/05/fp-or-imperative-with-scala/"/>
    <updated>2015-02-05T11:44:46+08:00</updated>
    <id>http://duffqiu.github.io/blog/2015/02/05/fp-or-imperative-with-scala</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<hr />
<p>Scala是即支持传统的命令式编程也支持函数式编程(FP)，我们既可以像java那样写代码，也可以像Lisp那样写。
但是那种好呢？</p>

<h3 id="section-1">解决办法</h3>
<hr />
<p>个人的理解是，主要取决于对问题的解决方式的思路。
如果已经习惯了命令式编程的思路，那就用命令式编程好了。
不过既然FP已经逐渐成为潮流，那换换思路也未尝不可。
从Scala语言本身看两者没有冲突</p>

<h3 id="section-2">一个例子来对比两种思路</h3>
<hr />

<p>例子：有一个Map的数组/列表，要将不同Map中相同key的value值相加，最后得到一个Map</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">Vector</span><span class="o">(</span><span class="n">Map</span><span class="o">(</span><span class="s">&quot;test&quot;</span> <span class="o">-&gt;</span> <span class="mi">1</span><span class="o">,</span> <span class="s">&quot;hello&quot;</span> <span class="o">-&gt;</span> <span class="mi">2</span><span class="o">,</span> <span class="s">&quot;wwww&quot;</span> <span class="o">-&gt;</span> <span class="mi">9</span><span class="o">),</span> <span class="n">Map</span><span class="o">(</span><span class="s">&quot;test&quot;</span> <span class="o">-&gt;</span> <span class="mi">3</span><span class="o">,</span> <span class="s">&quot;hello&quot;</span> <span class="o">-&gt;</span> <span class="mi">5</span><span class="o">,</span> <span class="s">&quot;http&quot;</span> <span class="o">-&gt;</span> <span class="mi">33</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>期望得到的结果</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">Map</span><span class="o">(</span><span class="n">test</span> <span class="o">-&gt;</span> <span class="mi">4</span><span class="o">,</span> <span class="n">hello</span> <span class="o">-&gt;</span> <span class="mi">7</span><span class="o">,</span> <span class="n">wwww</span> <span class="o">-&gt;</span> <span class="mi">9</span><span class="o">,</span> <span class="n">http</span> <span class="o">-&gt;</span> <span class="mi">33</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>命令式编程方式
思路：循环Vector中的每个Map，然后循环Map中的每个Key-Value，将相同的Key对应的Value加起来后存入到一个临时的Map，最后返回这个Map</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">def</span> <span class="nf">merge</span><span class="o">(</span><span class="nl">input:</span> <span class="n">Vector</span><span class="o">[</span><span class="n">Map</span><span class="o">[</span><span class="n">String</span><span class="o">,</span> <span class="n">Int</span><span class="o">]])</span> <span class="o">=</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">  <span class="n">var</span> <span class="n">mergeRes</span> <span class="o">=</span> <span class="n">input</span><span class="o">.</span><span class="na">head</span>
</span><span class="line">  <span class="n">val</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">input</span><span class="o">.</span><span class="na">tail</span>
</span><span class="line">
</span><span class="line">  <span class="k">for</span><span class="o">(</span><span class="n">itr</span> <span class="o">&lt;-</span> <span class="n">temp</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">  	<span class="k">for</span><span class="o">((</span><span class="n">word</span><span class="o">,</span> <span class="n">count</span><span class="o">)</span> <span class="o">&lt;-</span> <span class="n">itr</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">  		<span class="n">mergeRes</span> <span class="o">=</span> <span class="n">mergeRes</span> <span class="o">+</span> <span class="o">(</span><span class="n">word</span> <span class="o">-&gt;</span> <span class="o">(</span><span class="n">mergeRes</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">word</span><span class="o">).</span><span class="na">getOrElse</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="o">+</span> <span class="n">count</span><span class="o">))</span>
</span><span class="line">  	<span class="o">}</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line">  <span class="n">mergeRes</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>函数式编程方式
思路：对于Vector作折叠操作(reduceLeft)，因为每此计算都要以上一次计算作为输入。而计算中需要做的操作由使用者控制。同时对于每个Map都需要操作每个key-value并返回新的key-value所以用到map函数</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="java"><span class="line">  <span class="n">def</span> <span class="nf">mergeFP</span><span class="o">(</span><span class="nl">input:</span> <span class="n">Vector</span><span class="o">[</span><span class="n">Map</span><span class="o">[</span><span class="n">String</span><span class="o">,</span> <span class="n">Int</span><span class="o">]])</span> <span class="o">=</span> <span class="o">{</span>
</span><span class="line">    <span class="n">input</span><span class="o">.</span><span class="na">reduceLeft</span> <span class="o">{</span>
</span><span class="line">      <span class="o">(</span><span class="n">el</span><span class="o">,</span> <span class="n">acc</span><span class="o">)</span> <span class="o">=&gt;</span>
</span><span class="line">        <span class="n">el</span><span class="o">.</span><span class="na">map</span> <span class="o">{</span>
</span><span class="line">          <span class="k">case</span> <span class="o">(</span><span class="n">word</span><span class="o">,</span> <span class="n">count</span><span class="o">)</span> <span class="o">=&gt;</span>
</span><span class="line">            <span class="n">acc</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">word</span><span class="o">).</span><span class="na">map</span><span class="o">(</span><span class="n">accCount</span> <span class="o">=&gt;</span> <span class="o">(</span><span class="n">word</span> <span class="o">-&gt;</span> <span class="o">(</span><span class="n">accCount</span> <span class="o">+</span> <span class="n">count</span><span class="o">))).</span><span class="na">getOrElse</span><span class="o">(</span><span class="n">word</span> <span class="o">-&gt;</span> <span class="n">count</span><span class="o">)</span>
</span><span class="line">        <span class="o">}</span> <span class="o">++</span> <span class="o">(</span><span class="n">acc</span> <span class="o">--</span> <span class="n">el</span><span class="o">.</span><span class="na">keys</span><span class="o">)</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>从两者的对比俩看，如果不是熟悉FP的思路的化，似乎FP的代码更难看些。这也是为什么有人认为FP不利于代码沟通的原因吧。
但是从FP的实现看，中间没有任何可变变量（其实Scala对于reduceLeft用了中间可变变量，只是对于函数的使用者不需要了）</p>

<p><strong>注</strong> 改FP的例子载自Akka in Action，但是它的是foldLeft不是reduceLeft</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[系统集成模式：规范化数据流模式]]></title>
    <link href="http://duffqiu.github.io/blog/2015/02/02/integration-pattern-canonical-data-model/"/>
    <updated>2015-02-02T18:18:16+08:00</updated>
    <id>http://duffqiu.github.io/blog/2015/02/02/integration-pattern-canonical-data-model</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<hr />
<p><a href="http://duffqiu.github.io/blog/2015/02/02/integration-pattern-normalizer/">Normalizer模式</a>中，我们提到到如果多个系统一起集成将造成Endpoint成几何级数的增长。</p>

<h3 id="section-1">解决办法</h3>
<hr />

<p>使用Canonical Data Model(规范化数据模型)来解决这个问题
其特点如下：
- 每一个EndPoint一端和集成系统衔接，接收或发送特定系统的消息
- 每一个EndPoint的另外一段则是接收或发送Common的消息给另外的EndPoint</p>

<p>如图1：
<img src="http://duffqiu.github.io/images/cdm-1.png" alt="图一" /></p>

<ul>
  <li>所有的在EndPoint间流动的消息都是基于Common的接口，这样当引入一个新的系统的时候这需要实现一个EndPoint就可以了。</li>
</ul>

<p>如图二：
<img src="http://duffqiu.github.io/images/cdm-2.png" alt="图二" /></p>

<p>当我们需要考入如何实现Endpoint的时候，则可以考虑<a href="http://camel.apache.org/">Apache Camel Framework</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[安装附属包失败后修复virtualbox上的centos]]></title>
    <link href="http://duffqiu.github.io/blog/2015/02/02/fix-centos-virtualbox/"/>
    <updated>2015-02-02T16:45:25+08:00</updated>
    <id>http://duffqiu.github.io/blog/2015/02/02/fix-centos-virtualbox</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<hr />
<p>在virtualbox安装好centos7后，共享windows下的目录以及在host机器作拷贝张贴都不行，总是提示virtualbox的附属包没有安装，所以重新进行了安装。
但是重装时发现virtualboxguess module（vboxguest）没有安装成功，提示需要安装kernel-develp包，然后再重装这个附属包。
按照提示用<code>sudo yum install kernel-develop</code>, 然后再重装这个附属包
重新启动后竟然网卡无法使用了，同时也无法mount cdrom来卸载这个virtualbox的附属包。</p>

<p>网卡提示的错误信息是：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class=""><span class="line">11月 05 15:30:10 localhost.localdomain network[2920]: RTNETLINK answers: File exists
</span><span class="line">
</span><span class="line">11月 05 15:30:10 localhost.localdomain network[2920]: RTNETLINK answers: File exists
</span><span class="line">
</span><span class="line">11月 05 15:30:10 localhost.localdomain network[2920]: RTNETLINK answers: File exists
</span><span class="line">
</span><span class="line">11月 05 15:30:10 localhost.localdomain network[2920]: RTNETLINK answers: File exists
</span><span class="line">
</span><span class="line">11月 05 15:30:10 localhost.localdomain network[2920]: RTNETLINK answers: File exists
</span><span class="line">
</span><span class="line">11月 05 15:30:10 localhost.localdomain network[2920]: RTNETLINK answers: File exists
</span><span class="line">
</span><span class="line">11月 05 15:30:10 localhost.localdomain network[2920]: RTNETLINK answers: File exists
</span><span class="line">
</span><span class="line">11月 05 15:30:10 localhost.localdomain systemd[1]: network.service: control process exited, code=exited status=1
</span><span class="line">
</span><span class="line">11月 05 15:30:10 localhost.localdomain systemd[1]: Failed to start LSB: Bring up/down networking.
</span><span class="line">
</span><span class="line">11月 05 15:30:10 localhost.localdomain systemd[1]: Unit network.service entered failed state.</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Google了半天都没有办法，唯一能定位的地方是virtualbox修改了kernel的module造成</p>

<h3 id="section-1">解决办法</h3>
<hr />

<p>kernel的module一般都要通过原码的方式在本地编译后安装/加载，所以才需要kernel-develop的rpm包，难道问题在这里？
通过命令<code>rpm -qa|grep kernel</code>查看安装了的包，竟然发现有两个不同的版本的kernel-develop
那么可能的问题就出在了版本上
那就需要将不对的kernel-develop rpm包卸载掉并将对应的module删除后重新编印virtualbox的module
方法如下：</p>

<ul>
  <li>删除对应的编译需要的lib库： <code>sudo rm /lib/modules/3.10.0-123.el7.x86_64/misc/vbox*</code></li>
  <li>重建modules.dep和map文件: <code>sudo depmod -a</code></li>
  <li>重新加载module: <code>sudo modprobe module</code></li>
  <li>reboot</li>
  <li>这个时候应该cdroom和网卡都回来了</li>
  <li>重新安装virtualbox的附属包</li>
</ul>

<h3 id="section-2">总结</h3>

<p>对于需要影响到kernel的安装的时候， 最好先备份一次VM，避免因为kernel被破坏后难以恢复的问题
对于需要编译kernel module的时候，先查一下已经安装的kernel的开发包有没有多个名称相同但是版本不同的包，如果有则需要删除重复的 
从过程来看，修复是很快的，但是找到问题的根源是复杂的。google也不是万能的。</p>

<p>特定申明：该版权是<a href="&#109;&#097;&#105;&#108;&#116;&#111;:&#032;&#115;&#101;&#097;&#110;&#046;&#103;&#111;&#110;&#103;&#064;&#103;&#109;&#097;&#105;&#108;&#046;&#099;&#111;&#109;">Junjun</a>的 -:)</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[集成模式：标准化模式]]></title>
    <link href="http://duffqiu.github.io/blog/2015/02/02/integration-pattern-normalizer/"/>
    <updated>2015-02-02T13:14:35+08:00</updated>
    <id>http://duffqiu.github.io/blog/2015/02/02/integration-pattern-normalizer</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<hr />
<p>在系统集成中，可以通过不同的接口（EndPoint）适配多个外围系统，然后转换成标准的消息与内部系统结成。这种模式叫Normalizer。即标准化模式</p>

<h3 id="section-1">解决办法</h3>
<hr />

<p>UML图例：</p>

<center><img src="http://duffqiu.github.io/images/plantuml/c58dc192e46e5e6be91c5ccc50fd3990.png" /></center>

<p>对于Normalizer内部，通常从逻辑上可以这样分</p>

<center><img src="http://duffqiu.github.io/images/plantuml/b6169e035bb671e3f1c1ca2801966ce0.png" /></center>

<h3 id="section-2">特点说明</h3>

<ul>
  <li>对于集成简单的场景比较适用。多数用在连接多个类似的client端到一个系统</li>
  <li>如果对于Endpoint本身没有太复杂的逻辑则可以忽略Router并且合并translator的功能</li>
  <li>唯一的不足是如果集成的系统越来越多，则需要的Endpoint将成几何基数的增长</li>
  <li>可以通过Canonical Data Model(规范化数据模型)的方式来解决Normalizer模式的不足</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何开始用scala编程]]></title>
    <link href="http://duffqiu.github.io/blog/2015/01/13/howtostartprogrammingwithscala/"/>
    <updated>2015-01-13T17:19:11+08:00</updated>
    <id>http://duffqiu.github.io/blog/2015/01/13/howtostartprogrammingwithscala</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<p>在经历这么多年的OO的编程概念后，这一两年有兴起了FP(Functional Programming)的编程模式
作为多年的Java程序员如何能更好的接受FP并应用到开发中呢？主要有两个选择</p>

<ul>
  <li><a href="http://scala-lang.org/">Scala</a></li>
  <li><a href="http://clojure.org/">Clojure</a></li>
</ul>

<p>他俩最主要的区别是Clojure是比较纯粹的JVM下List语言的变种。没有OO的概念
Scala比较好的融合了OO和FP，比较合适Java平滑过渡到FP的编程范式。从Java8的新特性看
Java和Scala已经越来越接近。但是个人觉得Scala更好看写。或许是因为Java有过多的历史负担吧</p>

<p>如果是想纯粹学一下List，也可以看看<a href="https://www.haskell.org">Haskell</a></p>

<h3 id="coursera">Coursera的视频课程</h3>
<p>开始一门新的语言，大家总是期望有好的视频来讲解，最出名的是这个了，但是建议大家还是看完入门的书籍对scala有一定的了解后再来看这个
<a href="https://www.coursera.org/course/progfun">Functional Programming Principles in Scala</a></p>

<h3 id="section-1">入门书籍推荐</h3>
<p>现在关于Scala的书籍已经很多了，要达到熟悉的程度要看不下10本书。但是对于基础入门，以下这本我建议大家买个纸质版  <br />
<img src="http://duffqiu.github.io/images/kuaixuescala.jpg" alt="快学Scala" />    </p>

<p>这本有些旧了，某些章节可以不用看，具体如下：</p>

<ul>
  <li>第19章: 解析，这个太难，也不容易应用，可以忽略</li>
  <li>第20章: Actor，这个已经被Akka代替，不用再看，后面将写些如何应用Akka</li>
  <li>第22章: 定界延续，这个也太难，可以暂时忽略</li>
</ul>

<h3 id="section-2">看一个有趣的例子</h3>
<p>最近同学们在谈论lisp/FP的时候提到的一个例子:
有一个农场，鸡的数量是鸭的4倍，但是鸭比猪少9只，鸭和猪的数量是67只，求所有动物的脚加起来总共有多少只？
这个是个推论性的问题，在scala中用for{}的方式来解答(这里的for不是做循环，scala语言的用法叫for comprehension)</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">val</span> <span class="n">d</span> <span class="o">=</span> <span class="o">(</span><span class="mi">1</span> <span class="n">to</span> <span class="mi">67</span><span class="o">)</span> <span class="n">toStream</span>
</span><span class="line">
</span><span class="line"><span class="n">val</span> <span class="n">feet</span> <span class="o">=</span> <span class="k">for</span> <span class="o">{</span>
</span><span class="line">  <span class="n">d1</span> <span class="o">&lt;-</span> <span class="n">d</span>
</span><span class="line">  <span class="n">c1</span> <span class="o">=</span> <span class="n">d1</span> <span class="o">*</span> <span class="mi">4</span>
</span><span class="line">  <span class="n">p1</span> <span class="o">=</span> <span class="n">d1</span> <span class="o">+</span><span class="mi">9</span> <span class="k">if</span><span class="o">(</span><span class="n">d1</span> <span class="o">+</span> <span class="n">p1</span> <span class="o">==</span> <span class="mi">67</span><span class="o">)</span>
</span><span class="line"><span class="o">}</span> <span class="n">yield</span> <span class="o">{</span>
</span><span class="line">  <span class="o">(</span><span class="n">c1</span><span class="o">+</span><span class="n">d1</span><span class="o">)*</span><span class="mi">2</span> <span class="o">+</span> <span class="n">p1</span><span class="o">*</span><span class="mi">4</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line"><span class="n">println</span><span class="o">(</span><span class="n">feet</span><span class="o">.</span><span class="na">take</span><span class="o">(</span><span class="mi">1</span><span class="o">).</span><span class="na">force</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section-3">小提示</h4>
<p>Linux下查找文件中的某些字符串
<code>grep -rnw '&lt;path&gt;' -e "&lt;string value&gt;"</code></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在其它机器上继续编写blog或者是新建编辑环境处理已有的Octopress系统]]></title>
    <link href="http://duffqiu.github.io/blog/2015/01/13/continue-octopress-in-other-machine/"/>
    <updated>2015-01-13T12:14:22+08:00</updated>
    <id>http://duffqiu.github.io/blog/2015/01/13/continue-octopress-in-other-machine</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<hr />
<p>当你有多台机器或者是需要重新从Github上获取最后的blog，然后继续编辑，则需要重新手动配置Octopress
但是Octopress没有相关的教程说明如何做。</p>

<h3 id="section-1">解决办法</h3>
<hr />

<p>参考网上的多个资料以及个人摸索后，具体实践如下：</p>

<ul>
  <li>重新获取源文件</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">git clone &lt;your octopress url in Github&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div>
<ul>
  <li>切换到”source” branch</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">git checkout <span class="nb">source</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<ul>
  <li>重建_deploy目录</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">mkdir _deploy
</span><span class="line"><span class="nb">cd </span>_deploy
</span><span class="line">git init
</span><span class="line">git remote add origin &lt;your octopress url in Github&gt;
</span><span class="line">git pull origin master
</span><span class="line"><span class="nb">cd</span> ..
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>注意：如果在多个环境编辑后，每次切换环境需要做pull操作获得最后的更新。需要在octopress的根目录做一次<code>git pull origin source</code>，然后再到_deploy目录做一次<code>git pull origin master</code></p>

<p>如果在<code>rake deploy</code>的时候发现了<code>non-fast-forward</code>错误，则可以通过重建_deploy目录来解决。</p>

<ul>
  <li>
    <p>在新的机器上设置octopress需要的环境配置rbenv</p>
  </li>
  <li>
    <p>然后就可以在根目录下继续用rake命令了。</p>
  </li>
  <li>
    <p>注意：不用去重新运行<code>rake install</code>，不然会将你客户化的东西冲掉(最好先从Github上备份一个最新的才开始在新的机器安装环境)</p>
  </li>
</ul>

<h3 id="plugin">plugin问题</h3>

<p>如果遇到pygments_code的问题，则需要去看看你的系统安装的python的版本问题。如果python指向了python3.x则需要改成python2.x</p>

<h4 id="git">Git小提示</h4>
<p>这次重新搭建中途换了Theme，谁知道新的theme会覆盖和删除某些改动，所以对于theme的选择最好在建立Octopress之初
换了theme之后我又做了几次提交，为了还原到原来没有换theme的时候，需要将多次的commit去掉。
在SCM同学的支持下，做了还原，主要操作为</p>

<p>先checkout到最后需要的某个commit上
然后强制提交这个commit</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">git reset --hard &lt;commit id<span class="err">&#39;</span>s firt 5 characters&gt;
</span><span class="line">git push -f
</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[从实体模型到数据模型]]></title>
    <link href="http://duffqiu.github.io/blog/2014/04/06/cong-shi-ti-mo-xing-dao-shu-ju-mo-xing/"/>
    <updated>2014-04-06T11:41:20+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/04/06/cong-shi-ti-mo-xing-dao-shu-ju-mo-xing</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<hr />

<p>在系统设计过程中，我们总会用到Entity Model和Data Model，但是两者之间的关系是如何演变的呢？</p>

<h3 id="section-1">解决办法</h3>
<hr />

<ol>
  <li>首先建立一个最详尽的Entity Model，尽可能将所有具体的entity以及他们间的关系都列举出来</li>
  <li>将该详尽的Entity Model尽可能的浓缩抽象，变成7-10个框的图形</li>
  <li>根据浓缩后的Entity Model和业务操作的要求来抽取成Data Model</li>
</ol>

<p>因为设计公司机密问题，无法在这里给出具体的示例。后面有好的例子再补充</p>

<p>同时对于Data Model，有几点个人设计的体验：</p>

<ol>
  <li>不要过于局限于SQL的那几个范式。</li>
  <li>尽可能单表操作</li>
  <li>如果业务上不是要求严格的事物处理，尽可能不做事务操作，而是通过后续的数据处理清理垃圾数据。只是数据的使用过程中要注意保护（如先query后操作create/update）</li>
  <li>如果两个业务模块操作同一个表的不同数据，则可以考虑将表拆成两个对立的子表。</li>
  <li>当数据库性能达到一定瓶颈的时候，可以考虑使用NOSQL的方式做cache，如用<a href="http://redis.io">Redis</a></li>
</ol>

<h4 id="section-2">小插曲</h4>

<p>使用plantuml画entity model或者component 图都是出现自动排列时图形是乱的，很不好看。不过通过一个简单打设置就可以比较工整了。在plantuml文件的前面增加以下代码</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">left to right direction</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何定义一个好的REST接口3]]></title>
    <link href="http://duffqiu.github.io/blog/2014/04/06/ru-he-ding-yi-%5B%3F%5D-ge-hao-de-restjie-kou-3/"/>
    <updated>2014-04-06T10:49:35+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/04/06/ru-he-ding-yi-[?]-ge-hao-de-restjie-kou-3</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<hr />
<p>在定义REST接口的时候，如果采用resource的接口形式，则如何去定义接口的URL呢？</p>

<h3 id="section-1">解决办法</h3>
<hr />

<ul>
  <li>首先要解决的问题是在系统中如何去定位resource，然后才考虑如何设计URL。这样你必须有一个resource tree，如我在项目的设计样式：</li>
</ul>

<p><img src="http://duffqiu.github.io/images/Rest_Resource_Tree.png" alt="resource tree" title="resouce tree" /></p>

<p>这里首先确定要使用的资源入口是User，然后通过userid确定唯一的资源，然后再获取该资源下的子资源Calendar和Meeting</p>

<ul>
  <li>有了这个resource tree，那么URL就好定义了，如获取用户id为300222的所有Calendar的URL为： <code>http://xxxx.com/&lt;webcontext&gt;/p/&lt;component_name&gt;/v1/user/300222/calendar</code></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[创建基于maven的java和scala工程]]></title>
    <link href="http://duffqiu.github.io/blog/2014/04/06/chuang-jian-ji-yu-mavende-javahe-scalagong-cheng/"/>
    <updated>2014-04-06T09:20:56+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/04/06/chuang-jian-ji-yu-mavende-javahe-scalagong-cheng</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<hr />
<p>最近在看Scala和ScalaTest，但是要搭建一个同时运行Java和Scala的项目工程，还是遇到了些问题。因为我习惯了搭建出来的工程是Maven工程，同时即要能在Eclipse上运行，也能用Maven命令的方式运行以便后续用Jenkins。经过一段摸索终于试验出来。但是很奇怪，搜索出来的结果没有一个直接好使的。</p>

<h3 id="section-1">解决办法</h3>
<hr />

<h4 id="eclipse">Eclipse配置</h4>

<ul>
  <li>安装Scala的IDE，参见<a href="http://scala-ide.org">Scala-IDE官网</a>，注意选择Scala孵化器中的ScalaTest插件</li>
  <li>安装Maven在Eclipse上的插件，通过<code>Preference -&gt;Maven-&gt;Discovery</code>安装m2e的对应插件。在后续的POM文件中使用到的插件最好都安装对应的m2e插件。(包括：build-helper，pmd, checkstyle, findbugs, compiler…)</li>
  <li>
    <p>创建Maven工程中，添加如下插件</p>

    <ul>
      <li>build-helper插件，添加scala的source和test source。因为<code>&lt;sourceDirectory&gt;</code>只能指定一个目录，所以需要这个插件来帮助添加scala的文件目录</li>
    </ul>
  </li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
</pre></td><td class="code"><pre><code class=""><span class="line">		&lt;plugin&gt;
</span><span class="line">			&lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
</span><span class="line">			&lt;artifactId&gt;build-helper-maven-plugin&lt;/artifactId&gt;
</span><span class="line">			&lt;version&gt;1.8&lt;/version&gt;
</span><span class="line">			&lt;executions&gt;
</span><span class="line">				&lt;execution&gt;
</span><span class="line">					&lt;id&gt;add-source&lt;/id&gt;
</span><span class="line">					&lt;phase&gt;generate-sources&lt;/phase&gt;
</span><span class="line">					&lt;goals&gt;
</span><span class="line">						&lt;goal&gt;add-source&lt;/goal&gt;
</span><span class="line">					&lt;/goals&gt;
</span><span class="line">					&lt;configuration&gt;
</span><span class="line">						&lt;sources&gt;
</span><span class="line">							&lt;source&gt;src/main/scala&lt;/source&gt;
</span><span class="line">						&lt;/sources&gt;
</span><span class="line">					&lt;/configuration&gt;
</span><span class="line">				&lt;/execution&gt;
</span><span class="line">				&lt;execution&gt;
</span><span class="line">					&lt;id&gt;add-test-source&lt;/id&gt;
</span><span class="line">					&lt;phase&gt;generate-sources&lt;/phase&gt;
</span><span class="line">					&lt;goals&gt;
</span><span class="line">						&lt;goal&gt;add-test-source&lt;/goal&gt;
</span><span class="line">					&lt;/goals&gt;
</span><span class="line">					&lt;configuration&gt;
</span><span class="line">						&lt;sources&gt;
</span><span class="line">							&lt;source&gt;src/test/scala&lt;/source&gt;
</span><span class="line">						&lt;/sources&gt;
</span><span class="line">					&lt;/configuration&gt;
</span><span class="line">				&lt;/execution&gt;
</span><span class="line">			&lt;/executions&gt;
</span><span class="line">		&lt;/plugin&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>Scala插件，协助编译scala，同时指定scala版本</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class=""><span class="line">		&lt;plugin&gt;
</span><span class="line">			&lt;groupId&gt;net.alchim31.maven&lt;/groupId&gt;
</span><span class="line">			&lt;artifactId&gt;scala-maven-plugin&lt;/artifactId&gt;
</span><span class="line">			&lt;version&gt;3.1.6&lt;/version&gt;
</span><span class="line">			&lt;executions&gt;
</span><span class="line">				&lt;execution&gt;
</span><span class="line">					&lt;goals&gt;
</span><span class="line">						&lt;goal&gt;compile&lt;/goal&gt;
</span><span class="line">						&lt;goal&gt;testCompile&lt;/goal&gt;
</span><span class="line">					&lt;/goals&gt;
</span><span class="line">				&lt;/execution&gt;
</span><span class="line">			&lt;/executions&gt;
</span><span class="line">			&lt;configuration&gt;
</span><span class="line">				&lt;scalaVersion&gt;2.10.3&lt;/scalaVersion&gt;
</span><span class="line">			&lt;/configuration&gt;
</span><span class="line">		&lt;/plugin&gt;</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>ScalaTest插件</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class=""><span class="line">		&lt;plugin&gt;
</span><span class="line">			&lt;groupId&gt;org.scalatest&lt;/groupId&gt;
</span><span class="line">			&lt;artifactId&gt;scalatest-maven-plugin&lt;/artifactId&gt;
</span><span class="line">			&lt;version&gt;1.0-RC2&lt;/version&gt;
</span><span class="line">			&lt;configuration&gt;
</span><span class="line">				&lt;reportsDirectory&gt;${project.build.directory}/surefire-reports&lt;/reportsDirectory&gt;
</span><span class="line">				&lt;junitxml&gt;.&lt;/junitxml&gt;
</span><span class="line">				&lt;filereports&gt;WDF TestSuite.txt&lt;/filereports&gt;
</span><span class="line">			&lt;/configuration&gt;
</span><span class="line">			&lt;executions&gt;
</span><span class="line">				&lt;execution&gt;
</span><span class="line">					&lt;id&gt;test&lt;/id&gt;
</span><span class="line">					&lt;goals&gt;
</span><span class="line">						&lt;goal&gt;test&lt;/goal&gt;
</span><span class="line">					&lt;/goals&gt;
</span><span class="line">				&lt;/execution&gt;
</span><span class="line">			&lt;/executions&gt;
</span><span class="line">		&lt;/plugin&gt;</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>指定Junit插件，如果需要同时使用JUnit测试java代码。注意，新版本的插件已经可以支持多线程并发，大大提高测试的速度。强烈建议使用最新的版本</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">		&lt;plugin&gt;
</span><span class="line">			&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
</span><span class="line">			&lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;
</span><span class="line">			&lt;version&gt;2.17&lt;/version&gt;
</span><span class="line">			&lt;configuration&gt;
</span><span class="line">				&lt;parallel&gt;methods&lt;/parallel&gt;
</span><span class="line">				&lt;threadCount&gt;10&lt;/threadCount&gt;
</span><span class="line">			&lt;/configuration&gt;
</span><span class="line">		&lt;/plugin&gt;</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>安装m2e的scala maven plugin的connector插件，不然在eclipse上直接读取pom文件会解释出错。 <a href="http://alchim31.free.fr/m2e-scala/update-site/">update地址</a></li>
</ul>

<h3 id="section-2">小插曲</h3>
<p>不知道什么原因，ScalaTest的官网被屏蔽了。一个纯开源的技术网站有这个必要性么？还是躺枪了？</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何定义一个好的REST接口2]]></title>
    <link href="http://duffqiu.github.io/blog/2014/03/13/ru-he-ding-yi-%5B%3F%5D-ge-hao-de-restjie-kou-2/"/>
    <updated>2014-03-13T22:06:13+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/03/13/ru-he-ding-yi-[?]-ge-hao-de-restjie-kou-2</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<hr />
<p>经过一段实践的实践，特别是需求总在变化的项目（项目开始阶段总是比较痛苦的）中，如何去管理REST接口的描述文件变得非常重要。即要美观，又要开发人员随时能看，能更新。之前写过第一篇的这个<a href="http://duffqiu.github.io/blog/2014/03/03/ru-he-ding-yi-%5B%3F%5D-ge-hao-de-restjie-kou/">“如何定义一个好的REST接口”</a>，但是如果写到word文档中，痛苦是难以仍受的。特别是需要比较大篇幅的改动。同时开发人员也很难知道具体那些被改了，就会陷入迷茫中。</p>

<h3 id="section-1">解决办法</h3>
<hr />

<h4 id="section-2">前提条件</h4>
<ol>
  <li>前提条件1，将设计文档放在离开发最近的地方。那么当然是代码工程的地方是最进的。</li>
  <li>前提条件2，有利于跟踪变化。对于开发人员而言，当然是像代码那样跟踪最顺手了。（目前我用的是Git）</li>
  <li>尽可能足够简单</li>
</ol>

<h4 id="section-3">解决方式</h4>
<ol>
  <li>参照<a href="http://json-schema.org">JSON SCHEMA</a>的方式</li>
  <li>简化JSON SCHEMA，但依然是用JSON的方式字描述接口</li>
  <li>安装Eclipse的JSON editor plugin，可以在outline上很清晰的看到JSON的结构。当然如果是windows下也可以用notepad++的jason plugin看。不过如何是代码就在eclispe上，最好还是用eclipse的plugin</li>
  <li>
    <p>定义设计规则：</p>

    <ul>
      <li>接口文件的目录结构： <code>&lt;ComponentName&gt;\&lt;ResourceName&gt;\Method_&lt;create/delete/query/update&gt;.json</code>. ComponentName：组件或模块名称，ResourceName：资源名称，最后是方法的接口文件名。举个例子：有个组件Calendar，它下面有个资源叫Event，那么操作这个资源的更新的接口文件为Method_update.json，它放在了Calendar\Event\目录下。</li>
      <li>接口文件的层次结构。因为是基于HTTP的方式，则整个REST接口的层次结构为： </li>
    </ul>
  </li>
</ol>

<p><img src="http://duffqiu.github.io/images/rest_structure1.png" alt="rest structure1" title="REST API First Level Structure&quot;" /></p>

<p>其中，Revision Information用来描述文档的要点变化情况  </p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class=""><span class="line">{
</span><span class="line">   "Revision Information" : [
</span><span class="line">   {
</span><span class="line">      "Revision": "v0.1",
</span><span class="line">      "Section":"Whole document",
</span><span class="line">      "Change":"initialized"
</span><span class="line">   },
</span><span class="line">   {
</span><span class="line">      ...
</span><span class="line">   }
</span><span class="line">   ]
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>description用来描述接口的说明</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">{
</span><span class="line">   "description":{
</span><span class="line">    "method_description":"Create xxxxx",
</span><span class="line">    "method_direction":"xxx-&gt;yyy"
</span><span class="line">   }
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>request描述接口的http的query parameter和request body</p>

<p>response描述接口的http的response body</p>

<p>error_list描述接口的可能的错误信息</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class=""><span class="line">{
</span><span class="line">   "error_list":[
</span><span class="line">   {
</span><span class="line">      "errorCode":"91101",
</span><span class="line">      "errorMsg":"xxxx"
</span><span class="line">    },
</span><span class="line">    {
</span><span class="line">      "errorCode":"91102",
</span><span class="line">      "errorMsg":"yyyyy"
</span><span class="line">   }]
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>request的层次结构</li>
</ul>

<p><img src="http://duffqiu.github.io/images/rest_structure2.png" alt="rest structure2" title="REST API Request Structure" /></p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class=""><span class="line">{
</span><span class="line">   "request":{
</span><span class="line">  	"http_method" : "GET",
</span><span class="line">    "http_request_url":"https://www.xxxx.com/&lt;warContext&gt;/p/&lt;component&gt;/v1/&lt;resouce&gt;/{&lt;resourceId&gt;}",
</span><span class="line">    "path_parameter":{
</span><span class="line">      "&lt;resourceId&gt;":"resourceId"
</span><span class="line">    },
</span><span class="line">    "required_query_parameter":{
</span><span class="line">      "&lt;parameter1&gt;" : "xxx"
</span><span class="line">    },
</span><span class="line">    "optional_query_parameter":{
</span><span class="line">      "&lt;parameter2&gt;":"yyy"
</span><span class="line">    },
</span><span class="line">    "request_body":{
</span><span class="line">    ...
</span><span class="line">    }
</span><span class="line">   }
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>http_method指明http调用的方法：GET/DELETE/PUT/POST<br />
   http_request_url指明http调用的URL的格式<br />
   path_parameter指明唯一索引到某个特定资源的标识<br />
   required_query_parameter必须传入的参数
   optional_query_parameter可选传入的参数
   request_body传入的JSON复杂对象</p>

<ul>
  <li>response的层次结构</li>
</ul>

<p>就是返回一个JSON的对象。这里有个BEST PRACTISE的建议，尽量返回能索引到特定资源的标识信息无论输入是否有该信息</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class=""><span class="line">{
</span><span class="line">   "response":{
</span><span class="line">    "&lt;parameter1&gt;":{
</span><span class="line">      "string":"&lt;parameter1 description&gt;",
</span><span class="line">      "required":"y"
</span><span class="line">    },
</span><span class="line">    "&lt;parameter2&gt;":{
</span><span class="line">      "integer":"&lt;parameter2 description&gt;",
</span><span class="line">      "required":"n"
</span><span class="line">    }        
</span><span class="line">   }
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>对于request body和response body中JSON对象的定义，不使用JSON Schema那种繁复的写法，直接参照google的方式，将parameter的类型定义为key，描述为value，然后再用”required”标识是否是必须的</p>

<h4 id="section-4">完整的例子模版</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
</pre></td><td class="code"><pre><code class=""><span class="line">{  
</span><span class="line">  "Revision Information" : [
</span><span class="line">    {
</span><span class="line">      "Revision": "v0.1",
</span><span class="line">      "Section":"Whole document",
</span><span class="line">      "Change":"initialized"
</span><span class="line">    },
</span><span class="line">    {
</span><span class="line">      "Revision": "v0.2",
</span><span class="line">      "Section":"xx",
</span><span class="line">      "Change":"yyy"
</span><span class="line">    }
</span><span class="line">  ],
</span><span class="line">  "description":{
</span><span class="line">    "method_description":"query xxxxx",
</span><span class="line">    "method_direction":"xx-&gt;yyy"
</span><span class="line">  },
</span><span class="line">  "request":{
</span><span class="line">  	"http_method" : "GET",
</span><span class="line">    "http_request_url":"https://www.xxxx.com/&lt;warContext&gt;/p/&lt;component&gt;/v1/&lt;resouce&gt;/{&lt;resourceId&gt;}",
</span><span class="line">    "path_parameter":{
</span><span class="line">      "&lt;resourceId&gt;":"resourceId"
</span><span class="line">    },
</span><span class="line">    "required_query_parameter":{
</span><span class="line">      "&lt;parameter1&gt;" : "xxx"
</span><span class="line">    },
</span><span class="line">    "optional_query_parameter":{
</span><span class="line">      "&lt;parameter2&gt;":"yyy"
</span><span class="line">    },
</span><span class="line">    "request_body":{
</span><span class="line">    }
</span><span class="line">  },
</span><span class="line">  "response":{
</span><span class="line">    "&lt;parameter1&gt;":{
</span><span class="line">      "string":"&lt;parameter1 description&gt;",
</span><span class="line">      "required":"y"
</span><span class="line">    },
</span><span class="line">    "&lt;parameter2&gt;":{
</span><span class="line">      "integer":"&lt;parameter2 description&gt;",
</span><span class="line">      "required":"n"
</span><span class="line">    }        
</span><span class="line">  },
</span><span class="line">  "error_list":[
</span><span class="line">    {
</span><span class="line">      "errorCode":"xx1",
</span><span class="line">      "errorMsg":"yyyy"
</span><span class="line">    },
</span><span class="line">    {
</span><span class="line">      "errorCode":"xx2",
</span><span class="line">      "errorMsg":"yyyy"
</span><span class="line">    }
</span><span class="line">  ]
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何定义一个好的REST接口]]></title>
    <link href="http://duffqiu.github.io/blog/2014/03/03/ru-he-ding-yi-%5B%3F%5D-ge-hao-de-restjie-kou/"/>
    <updated>2014-03-03T21:25:32+08:00</updated>
    <id>http://duffqiu.github.io/blog/2014/03/03/ru-he-ding-yi-[?]-ge-hao-de-restjie-kou</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>
<hr />
<p>现在<a href="http://www.json.org">基于JSON的REST接口</a>使用的是越来越多了，但是在自己去定义JSON的REST API的时候，我们确难免遇到不少疑惑，以下我们来谈谈这些疑惑 </p>

<h3 id="rcp-based-or-rest-based">RCP-BASED or REST-BASED</h3>
<hr />

<p>在接口定义上，我们以往一般都是去定义请求什么，然后响应是什么，这就是典型的RPC(Remote Procedure Call)接口的定义方式。一般可以使用IDL（Interface Description Language，IDL）的方式来描述，如典型的WSDL等。RPC我的理解是，更多的是描述响应端提供什么样的行为给请求端调用。响应端会提供一个服务接入端点(End Point)，依据请求来返回响应。</p>

<p>对于REST-BASED的接口定义，通常针对的是响应端提供什么样的资源给客户端使用。这里有一个很重要的特点是，所有的行为都是围绕“资源”来进行的。主要有：</p>

<ul>
  <li>GET  获取资源(可以是一个或多个)</li>
  <li>PUT  更新资源，PUT方法有个很重要的特性就是多次调用，结果是一直的。</li>
  <li>POST 创建资源，这个方法不是幂等</li>
  <li>DELETE 删除资源 </li>
</ul>

<p>对于每个操作的返回都是基于同一个资源描述，只是不同的方法，资料描述里的某些内容被省略了。</p>

<p>其实对于使用JSON在RPC-Based上还是REST-Based都可以。接口定义成RPC-Based上还是REST-Based没有绝对的好坏，而是根据实际的使用场景。简单来说就是如果可以能被描述成“资源”(如：用户账户、购物车等等)，则用REST-Based更合适，如果是需要执行某些动作(如：发送邮件等)则RPC-Based更合适。</p>

<h3 id="rest-based-best-practice">REST-BASED BEST PRACTICE</h3>

<p>如果使用REST-Based，建议可以参考<a href="https://developers.google.com/google-apps/calendar/v3/reference/">Google Canlendar的API定义</a>。主要的要点如下：</p>

<ol>
  <li>确定什么是资源(如calendar, event…)以及资源的表述</li>
</ol>

<p>例如：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class=""><span class="line">{
</span><span class="line">  "id": string,
</span><span class="line">  "summary": string,
</span><span class="line">  "description": string,
</span><span class="line">  "location": string,
</span><span class="line">  "timeZone": string,
</span><span class="line">  "summaryOverride": string,
</span><span class="line">  "colorId": string,
</span><span class="line">  "backgroundColor": string,
</span><span class="line">  "foregroundColor": string,
</span><span class="line">  "hidden": boolean,
</span><span class="line">  "selected": boolean,
</span><span class="line">  "accessRole": string,
</span><span class="line">  "defaultReminders": [
</span><span class="line">    {
</span><span class="line">      "method": string,
</span><span class="line">      "minutes": integer
</span><span class="line">    }
</span><span class="line">  ],
</span><span class="line">  "primary": boolean
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<ol>
  <li>
    <p>列举每个资源能提供的操作简要</p>

    <table>
      <thead>
        <tr>
          <th>Method</th>
          <th>HTTP request</th>
          <th>Description</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>delete</td>
          <td>DELETE  /calendars/calendarId/acl/ruleId</td>
          <td>Deletes an access control rule.</td>
        </tr>
        <tr>
          <td>get</td>
          <td>GET  /calendars/calendarId/acl/ruleId</td>
          <td>Returns an access control rule.</td>
        </tr>
        <tr>
          <td>insert</td>
          <td>POST  /calendars/calendarId/acl</td>
          <td>Creates an access control rule.</td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>
    <p>详细描述每个资源操作</p>

    <ul>
      <li>http request形式，如</li>
    </ul>

    <p><code>
POST https://www.googleapis.com/calendar/v3/calendars/{calendarId}/clear
</code></p>

    <ul>
      <li>
        <p>http request parameter</p>

        <p>这里需要注意的是什么放在Path上，什么放在query parameter上。一般而言，一个资源的子资源放在path上，定位资源的条件放在query paramenter上</p>

        <table>
          <thead>
            <tr>
              <th>Path parameter</th>
              <th>Value</th>
              <th>Description</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>calendarId</td>
              <td>string</td>
              <td>Calendar identifier</td>
            </tr>
            <tr>
              <td>…</td>
              <td> </td>
              <td> </td>
            </tr>
          </tbody>
        </table>

        <table>
          <thead>
            <tr>
              <th>Query parameter</th>
              <th>Value</th>
              <th>Description</th>
              <th>Required?</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>…</td>
              <td> </td>
              <td> </td>
              <td> </td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <p>Authorization<br />
 定义是否需要授权</p>
      </li>
      <li>
        <p>Request Body (通常只用在Post操作上)，定义方式如下：</p>

        <table>
          <thead>
            <tr>
              <th>Property name</th>
              <th>Value</th>
              <th>Description</th>
              <th>Notes</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>email</td>
              <td>string</td>
              <td>user’s email address</td>
              <td> </td>
            </tr>
            <tr>
              <td>…</td>
              <td> </td>
              <td> </td>
              <td> </td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <p>http response representations(针对RPC的接口，如果是REST原则是公用一个resource的描述，只是不同的操作某些参数可以被忽略)，如</p>

        <p><code>
{  
"id": string,  
"status": string,  
"htmlLink": string,   
"created": datetime   
}  
</code></p>
      </li>
      <li>
        <p>http reponse parameters(对于资源描述中使用到的参数的解释)</p>

        <table>
          <thead>
            <tr>
              <th>Property name</th>
              <th>Value</th>
              <th>Description</th>
              <th>Notes</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>home address</td>
              <td>string</td>
              <td>user’s home address</td>
              <td> </td>
            </tr>
            <tr>
              <td>…</td>
              <td> </td>
              <td> </td>
              <td> </td>
            </tr>
          </tbody>
        </table>
      </li>
    </ul>
  </li>
</ol>

<h3 id="json-style-guideline">JSON Style Guideline</h3>

<p>如何编写JSON，可以参见<a href="https://google-styleguide.googlecode.com/svn/trunk/jsoncstyleguide.xml">Google JSON STYLE</a></p>

<p>主要是参考保留的定义属性名</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">object</span> <span class="o">{</span>
</span><span class="line">  <span class="n">string</span> <span class="n">apiVersion</span><span class="o">?;</span>
</span><span class="line">  <span class="n">string</span> <span class="n">context</span><span class="o">?;</span>
</span><span class="line">  <span class="n">string</span> <span class="n">id</span><span class="o">?;</span>
</span><span class="line">  <span class="n">string</span> <span class="n">method</span><span class="o">?;</span>
</span><span class="line">  <span class="n">object</span> <span class="o">{</span>
</span><span class="line">    <span class="n">string</span> <span class="n">id</span><span class="o">?</span>
</span><span class="line">  <span class="o">}*</span> <span class="n">params</span><span class="o">?;</span>
</span><span class="line">  <span class="n">object</span> <span class="o">{</span>
</span><span class="line">    <span class="n">string</span> <span class="n">kind</span><span class="o">?;</span>
</span><span class="line">    <span class="n">string</span> <span class="n">fields</span><span class="o">?;</span>
</span><span class="line">    <span class="n">string</span> <span class="n">etag</span><span class="o">?;</span>
</span><span class="line">    <span class="n">string</span> <span class="n">id</span><span class="o">?;</span>
</span><span class="line">    <span class="n">string</span> <span class="n">lang</span><span class="o">?;</span>
</span><span class="line">    <span class="n">string</span> <span class="n">updated</span><span class="o">?;</span> <span class="err">#</span> <span class="n">date</span> <span class="n">formatted</span> <span class="n">RFC</span> <span class="mi">3339</span>
</span><span class="line">    <span class="kt">boolean</span> <span class="n">deleted</span><span class="o">?;</span>
</span><span class="line">    <span class="n">integer</span> <span class="n">currentItemCount</span><span class="o">?;</span>
</span><span class="line">    <span class="n">integer</span> <span class="n">itemsPerPage</span><span class="o">?;</span>
</span><span class="line">    <span class="n">integer</span> <span class="n">startIndex</span><span class="o">?;</span>
</span><span class="line">    <span class="n">integer</span> <span class="n">totalItems</span><span class="o">?;</span>
</span><span class="line">    <span class="n">integer</span> <span class="n">pageIndex</span><span class="o">?;</span>
</span><span class="line">    <span class="n">integer</span> <span class="n">totalPages</span><span class="o">?;</span>
</span><span class="line">    <span class="n">string</span> <span class="n">pageLinkTemplate</span> <span class="o">/^</span><span class="n">https</span><span class="o">?:/</span> <span class="o">?;</span>
</span><span class="line">    <span class="n">object</span> <span class="o">{}*</span> <span class="n">next</span><span class="o">?;</span>
</span><span class="line">    <span class="n">string</span> <span class="n">nextLink</span><span class="o">?;</span>
</span><span class="line">    <span class="n">object</span> <span class="o">{}*</span> <span class="n">previous</span><span class="o">?;</span>
</span><span class="line">    <span class="n">string</span> <span class="n">previousLink</span><span class="o">?;</span>
</span><span class="line">    <span class="n">object</span> <span class="o">{}*</span> <span class="n">self</span><span class="o">?;</span>
</span><span class="line">    <span class="n">string</span> <span class="n">selfLink</span><span class="o">?;</span>
</span><span class="line">    <span class="n">object</span> <span class="o">{}*</span> <span class="n">edit</span><span class="o">?;</span>
</span><span class="line">    <span class="n">string</span> <span class="n">editLink</span><span class="o">?;</span>
</span><span class="line">    <span class="n">array</span> <span class="o">[</span>
</span><span class="line">      <span class="n">object</span> <span class="o">{}*;</span>
</span><span class="line">    <span class="o">]</span> <span class="n">items</span><span class="o">?;</span>
</span><span class="line">  <span class="o">}*</span> <span class="n">data</span><span class="o">?;</span>
</span><span class="line">  <span class="n">object</span> <span class="o">{</span>
</span><span class="line">    <span class="n">integer</span> <span class="n">code</span><span class="o">?;</span>
</span><span class="line">    <span class="n">string</span> <span class="n">message</span><span class="o">?;</span>
</span><span class="line">    <span class="n">array</span> <span class="o">[</span>
</span><span class="line">      <span class="n">object</span> <span class="o">{</span>
</span><span class="line">        <span class="n">string</span> <span class="n">domain</span><span class="o">?;</span>
</span><span class="line">        <span class="n">string</span> <span class="n">reason</span><span class="o">?;</span>
</span><span class="line">        <span class="n">string</span> <span class="n">message</span><span class="o">?;</span>
</span><span class="line">        <span class="n">string</span> <span class="n">location</span><span class="o">?;</span>
</span><span class="line">        <span class="n">string</span> <span class="n">locationType</span><span class="o">?;</span>
</span><span class="line">        <span class="n">string</span> <span class="n">extendedHelp</span><span class="o">?;</span>
</span><span class="line">        <span class="n">string</span> <span class="n">sendReport</span><span class="o">?;</span>
</span><span class="line">      <span class="o">}*;</span>
</span><span class="line">    <span class="o">]</span> <span class="n">errors</span><span class="o">?;</span>
</span><span class="line">  <span class="o">}*</span> <span class="n">error</span><span class="o">?;</span>
</span><span class="line"><span class="o">}*;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-1">接口定义模版参考</h3>

<p><a href="">REST JSON API模版</a></p>
]]></content>
  </entry>
  
</feed>
